
ROAR_NOISE_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ab4  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  08006b70  08006b70  00007b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d38  08006d38  0000846c  2**0
                  CONTENTS
  4 .ARM          00000000  08006d38  08006d38  0000846c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006d38  08006d38  0000846c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d38  08006d38  00007d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006d3c  08006d3c  00007d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000046c  20000000  08006d40  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f38  2000046c  080071ac  0000846c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013a4  080071ac  000093a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000846c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da7a  00000000  00000000  00008494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024bd  00000000  00000000  00015f0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f18  00000000  00000000  000183d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b9c  00000000  00000000  000192e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018360  00000000  00000000  00019e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001044a  00000000  00000000  000321e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099d6e  00000000  00000000  0004262e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dc39c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004188  00000000  00000000  000dc3e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000e0568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000046c 	.word	0x2000046c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006b58 	.word	0x08006b58

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000470 	.word	0x20000470
 8000100:	08006b58 	.word	0x08006b58

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_lmul>:
 8000230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000232:	46ce      	mov	lr, r9
 8000234:	4699      	mov	r9, r3
 8000236:	0c03      	lsrs	r3, r0, #16
 8000238:	469c      	mov	ip, r3
 800023a:	0413      	lsls	r3, r2, #16
 800023c:	4647      	mov	r7, r8
 800023e:	0c1b      	lsrs	r3, r3, #16
 8000240:	001d      	movs	r5, r3
 8000242:	000e      	movs	r6, r1
 8000244:	4661      	mov	r1, ip
 8000246:	0404      	lsls	r4, r0, #16
 8000248:	0c24      	lsrs	r4, r4, #16
 800024a:	b580      	push	{r7, lr}
 800024c:	0007      	movs	r7, r0
 800024e:	0c10      	lsrs	r0, r2, #16
 8000250:	434b      	muls	r3, r1
 8000252:	4365      	muls	r5, r4
 8000254:	4341      	muls	r1, r0
 8000256:	4360      	muls	r0, r4
 8000258:	0c2c      	lsrs	r4, r5, #16
 800025a:	18c0      	adds	r0, r0, r3
 800025c:	1824      	adds	r4, r4, r0
 800025e:	468c      	mov	ip, r1
 8000260:	42a3      	cmp	r3, r4
 8000262:	d903      	bls.n	800026c <__aeabi_lmul+0x3c>
 8000264:	2380      	movs	r3, #128	@ 0x80
 8000266:	025b      	lsls	r3, r3, #9
 8000268:	4698      	mov	r8, r3
 800026a:	44c4      	add	ip, r8
 800026c:	4649      	mov	r1, r9
 800026e:	4379      	muls	r1, r7
 8000270:	4356      	muls	r6, r2
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	042d      	lsls	r5, r5, #16
 8000276:	0c2d      	lsrs	r5, r5, #16
 8000278:	1989      	adds	r1, r1, r6
 800027a:	4463      	add	r3, ip
 800027c:	0424      	lsls	r4, r4, #16
 800027e:	1960      	adds	r0, r4, r5
 8000280:	18c9      	adds	r1, r1, r3
 8000282:	bcc0      	pop	{r6, r7}
 8000284:	46b9      	mov	r9, r7
 8000286:	46b0      	mov	r8, r6
 8000288:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800028a:	46c0      	nop			@ (mov r8, r8)

0800028c <__aeabi_dadd>:
 800028c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800028e:	4657      	mov	r7, sl
 8000290:	464e      	mov	r6, r9
 8000292:	4645      	mov	r5, r8
 8000294:	46de      	mov	lr, fp
 8000296:	b5e0      	push	{r5, r6, r7, lr}
 8000298:	b083      	sub	sp, #12
 800029a:	9000      	str	r0, [sp, #0]
 800029c:	9101      	str	r1, [sp, #4]
 800029e:	030c      	lsls	r4, r1, #12
 80002a0:	004f      	lsls	r7, r1, #1
 80002a2:	0fce      	lsrs	r6, r1, #31
 80002a4:	0a61      	lsrs	r1, r4, #9
 80002a6:	9c00      	ldr	r4, [sp, #0]
 80002a8:	031d      	lsls	r5, r3, #12
 80002aa:	0f64      	lsrs	r4, r4, #29
 80002ac:	430c      	orrs	r4, r1
 80002ae:	9900      	ldr	r1, [sp, #0]
 80002b0:	9200      	str	r2, [sp, #0]
 80002b2:	9301      	str	r3, [sp, #4]
 80002b4:	00c8      	lsls	r0, r1, #3
 80002b6:	0059      	lsls	r1, r3, #1
 80002b8:	0d4b      	lsrs	r3, r1, #21
 80002ba:	4699      	mov	r9, r3
 80002bc:	9a00      	ldr	r2, [sp, #0]
 80002be:	9b01      	ldr	r3, [sp, #4]
 80002c0:	0a6d      	lsrs	r5, r5, #9
 80002c2:	0fd9      	lsrs	r1, r3, #31
 80002c4:	0f53      	lsrs	r3, r2, #29
 80002c6:	432b      	orrs	r3, r5
 80002c8:	469a      	mov	sl, r3
 80002ca:	9b00      	ldr	r3, [sp, #0]
 80002cc:	0d7f      	lsrs	r7, r7, #21
 80002ce:	00da      	lsls	r2, r3, #3
 80002d0:	4694      	mov	ip, r2
 80002d2:	464a      	mov	r2, r9
 80002d4:	46b0      	mov	r8, r6
 80002d6:	1aba      	subs	r2, r7, r2
 80002d8:	428e      	cmp	r6, r1
 80002da:	d100      	bne.n	80002de <__aeabi_dadd+0x52>
 80002dc:	e0b0      	b.n	8000440 <__aeabi_dadd+0x1b4>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	dc00      	bgt.n	80002e4 <__aeabi_dadd+0x58>
 80002e2:	e078      	b.n	80003d6 <__aeabi_dadd+0x14a>
 80002e4:	4649      	mov	r1, r9
 80002e6:	2900      	cmp	r1, #0
 80002e8:	d100      	bne.n	80002ec <__aeabi_dadd+0x60>
 80002ea:	e0e9      	b.n	80004c0 <__aeabi_dadd+0x234>
 80002ec:	49c9      	ldr	r1, [pc, #804]	@ (8000614 <__aeabi_dadd+0x388>)
 80002ee:	428f      	cmp	r7, r1
 80002f0:	d100      	bne.n	80002f4 <__aeabi_dadd+0x68>
 80002f2:	e195      	b.n	8000620 <__aeabi_dadd+0x394>
 80002f4:	2501      	movs	r5, #1
 80002f6:	2a38      	cmp	r2, #56	@ 0x38
 80002f8:	dc16      	bgt.n	8000328 <__aeabi_dadd+0x9c>
 80002fa:	2180      	movs	r1, #128	@ 0x80
 80002fc:	4653      	mov	r3, sl
 80002fe:	0409      	lsls	r1, r1, #16
 8000300:	430b      	orrs	r3, r1
 8000302:	469a      	mov	sl, r3
 8000304:	2a1f      	cmp	r2, #31
 8000306:	dd00      	ble.n	800030a <__aeabi_dadd+0x7e>
 8000308:	e1e7      	b.n	80006da <__aeabi_dadd+0x44e>
 800030a:	2120      	movs	r1, #32
 800030c:	4655      	mov	r5, sl
 800030e:	1a8b      	subs	r3, r1, r2
 8000310:	4661      	mov	r1, ip
 8000312:	409d      	lsls	r5, r3
 8000314:	40d1      	lsrs	r1, r2
 8000316:	430d      	orrs	r5, r1
 8000318:	4661      	mov	r1, ip
 800031a:	4099      	lsls	r1, r3
 800031c:	1e4b      	subs	r3, r1, #1
 800031e:	4199      	sbcs	r1, r3
 8000320:	4653      	mov	r3, sl
 8000322:	40d3      	lsrs	r3, r2
 8000324:	430d      	orrs	r5, r1
 8000326:	1ae4      	subs	r4, r4, r3
 8000328:	1b45      	subs	r5, r0, r5
 800032a:	42a8      	cmp	r0, r5
 800032c:	4180      	sbcs	r0, r0
 800032e:	4240      	negs	r0, r0
 8000330:	1a24      	subs	r4, r4, r0
 8000332:	0223      	lsls	r3, r4, #8
 8000334:	d400      	bmi.n	8000338 <__aeabi_dadd+0xac>
 8000336:	e10f      	b.n	8000558 <__aeabi_dadd+0x2cc>
 8000338:	0264      	lsls	r4, r4, #9
 800033a:	0a64      	lsrs	r4, r4, #9
 800033c:	2c00      	cmp	r4, #0
 800033e:	d100      	bne.n	8000342 <__aeabi_dadd+0xb6>
 8000340:	e139      	b.n	80005b6 <__aeabi_dadd+0x32a>
 8000342:	0020      	movs	r0, r4
 8000344:	f000 fe38 	bl	8000fb8 <__clzsi2>
 8000348:	0003      	movs	r3, r0
 800034a:	3b08      	subs	r3, #8
 800034c:	2120      	movs	r1, #32
 800034e:	0028      	movs	r0, r5
 8000350:	1aca      	subs	r2, r1, r3
 8000352:	40d0      	lsrs	r0, r2
 8000354:	409c      	lsls	r4, r3
 8000356:	0002      	movs	r2, r0
 8000358:	409d      	lsls	r5, r3
 800035a:	4322      	orrs	r2, r4
 800035c:	429f      	cmp	r7, r3
 800035e:	dd00      	ble.n	8000362 <__aeabi_dadd+0xd6>
 8000360:	e173      	b.n	800064a <__aeabi_dadd+0x3be>
 8000362:	1bd8      	subs	r0, r3, r7
 8000364:	3001      	adds	r0, #1
 8000366:	1a09      	subs	r1, r1, r0
 8000368:	002c      	movs	r4, r5
 800036a:	408d      	lsls	r5, r1
 800036c:	40c4      	lsrs	r4, r0
 800036e:	1e6b      	subs	r3, r5, #1
 8000370:	419d      	sbcs	r5, r3
 8000372:	0013      	movs	r3, r2
 8000374:	40c2      	lsrs	r2, r0
 8000376:	408b      	lsls	r3, r1
 8000378:	4325      	orrs	r5, r4
 800037a:	2700      	movs	r7, #0
 800037c:	0014      	movs	r4, r2
 800037e:	431d      	orrs	r5, r3
 8000380:	076b      	lsls	r3, r5, #29
 8000382:	d009      	beq.n	8000398 <__aeabi_dadd+0x10c>
 8000384:	230f      	movs	r3, #15
 8000386:	402b      	ands	r3, r5
 8000388:	2b04      	cmp	r3, #4
 800038a:	d005      	beq.n	8000398 <__aeabi_dadd+0x10c>
 800038c:	1d2b      	adds	r3, r5, #4
 800038e:	42ab      	cmp	r3, r5
 8000390:	41ad      	sbcs	r5, r5
 8000392:	426d      	negs	r5, r5
 8000394:	1964      	adds	r4, r4, r5
 8000396:	001d      	movs	r5, r3
 8000398:	0223      	lsls	r3, r4, #8
 800039a:	d400      	bmi.n	800039e <__aeabi_dadd+0x112>
 800039c:	e12d      	b.n	80005fa <__aeabi_dadd+0x36e>
 800039e:	4a9d      	ldr	r2, [pc, #628]	@ (8000614 <__aeabi_dadd+0x388>)
 80003a0:	3701      	adds	r7, #1
 80003a2:	4297      	cmp	r7, r2
 80003a4:	d100      	bne.n	80003a8 <__aeabi_dadd+0x11c>
 80003a6:	e0d3      	b.n	8000550 <__aeabi_dadd+0x2c4>
 80003a8:	4646      	mov	r6, r8
 80003aa:	499b      	ldr	r1, [pc, #620]	@ (8000618 <__aeabi_dadd+0x38c>)
 80003ac:	08ed      	lsrs	r5, r5, #3
 80003ae:	4021      	ands	r1, r4
 80003b0:	074a      	lsls	r2, r1, #29
 80003b2:	432a      	orrs	r2, r5
 80003b4:	057c      	lsls	r4, r7, #21
 80003b6:	024d      	lsls	r5, r1, #9
 80003b8:	0b2d      	lsrs	r5, r5, #12
 80003ba:	0d64      	lsrs	r4, r4, #21
 80003bc:	0524      	lsls	r4, r4, #20
 80003be:	432c      	orrs	r4, r5
 80003c0:	07f6      	lsls	r6, r6, #31
 80003c2:	4334      	orrs	r4, r6
 80003c4:	0010      	movs	r0, r2
 80003c6:	0021      	movs	r1, r4
 80003c8:	b003      	add	sp, #12
 80003ca:	bcf0      	pop	{r4, r5, r6, r7}
 80003cc:	46bb      	mov	fp, r7
 80003ce:	46b2      	mov	sl, r6
 80003d0:	46a9      	mov	r9, r5
 80003d2:	46a0      	mov	r8, r4
 80003d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d100      	bne.n	80003dc <__aeabi_dadd+0x150>
 80003da:	e084      	b.n	80004e6 <__aeabi_dadd+0x25a>
 80003dc:	464a      	mov	r2, r9
 80003de:	1bd2      	subs	r2, r2, r7
 80003e0:	2f00      	cmp	r7, #0
 80003e2:	d000      	beq.n	80003e6 <__aeabi_dadd+0x15a>
 80003e4:	e16d      	b.n	80006c2 <__aeabi_dadd+0x436>
 80003e6:	0025      	movs	r5, r4
 80003e8:	4305      	orrs	r5, r0
 80003ea:	d100      	bne.n	80003ee <__aeabi_dadd+0x162>
 80003ec:	e127      	b.n	800063e <__aeabi_dadd+0x3b2>
 80003ee:	1e56      	subs	r6, r2, #1
 80003f0:	2a01      	cmp	r2, #1
 80003f2:	d100      	bne.n	80003f6 <__aeabi_dadd+0x16a>
 80003f4:	e23b      	b.n	800086e <__aeabi_dadd+0x5e2>
 80003f6:	4d87      	ldr	r5, [pc, #540]	@ (8000614 <__aeabi_dadd+0x388>)
 80003f8:	42aa      	cmp	r2, r5
 80003fa:	d100      	bne.n	80003fe <__aeabi_dadd+0x172>
 80003fc:	e26a      	b.n	80008d4 <__aeabi_dadd+0x648>
 80003fe:	2501      	movs	r5, #1
 8000400:	2e38      	cmp	r6, #56	@ 0x38
 8000402:	dc12      	bgt.n	800042a <__aeabi_dadd+0x19e>
 8000404:	0032      	movs	r2, r6
 8000406:	2a1f      	cmp	r2, #31
 8000408:	dd00      	ble.n	800040c <__aeabi_dadd+0x180>
 800040a:	e1f8      	b.n	80007fe <__aeabi_dadd+0x572>
 800040c:	2620      	movs	r6, #32
 800040e:	0025      	movs	r5, r4
 8000410:	1ab6      	subs	r6, r6, r2
 8000412:	0007      	movs	r7, r0
 8000414:	4653      	mov	r3, sl
 8000416:	40b0      	lsls	r0, r6
 8000418:	40d4      	lsrs	r4, r2
 800041a:	40b5      	lsls	r5, r6
 800041c:	40d7      	lsrs	r7, r2
 800041e:	1e46      	subs	r6, r0, #1
 8000420:	41b0      	sbcs	r0, r6
 8000422:	1b1b      	subs	r3, r3, r4
 8000424:	469a      	mov	sl, r3
 8000426:	433d      	orrs	r5, r7
 8000428:	4305      	orrs	r5, r0
 800042a:	4662      	mov	r2, ip
 800042c:	1b55      	subs	r5, r2, r5
 800042e:	45ac      	cmp	ip, r5
 8000430:	4192      	sbcs	r2, r2
 8000432:	4653      	mov	r3, sl
 8000434:	4252      	negs	r2, r2
 8000436:	000e      	movs	r6, r1
 8000438:	464f      	mov	r7, r9
 800043a:	4688      	mov	r8, r1
 800043c:	1a9c      	subs	r4, r3, r2
 800043e:	e778      	b.n	8000332 <__aeabi_dadd+0xa6>
 8000440:	2a00      	cmp	r2, #0
 8000442:	dc00      	bgt.n	8000446 <__aeabi_dadd+0x1ba>
 8000444:	e08e      	b.n	8000564 <__aeabi_dadd+0x2d8>
 8000446:	4649      	mov	r1, r9
 8000448:	2900      	cmp	r1, #0
 800044a:	d175      	bne.n	8000538 <__aeabi_dadd+0x2ac>
 800044c:	4661      	mov	r1, ip
 800044e:	4653      	mov	r3, sl
 8000450:	4319      	orrs	r1, r3
 8000452:	d100      	bne.n	8000456 <__aeabi_dadd+0x1ca>
 8000454:	e0f6      	b.n	8000644 <__aeabi_dadd+0x3b8>
 8000456:	1e51      	subs	r1, r2, #1
 8000458:	2a01      	cmp	r2, #1
 800045a:	d100      	bne.n	800045e <__aeabi_dadd+0x1d2>
 800045c:	e191      	b.n	8000782 <__aeabi_dadd+0x4f6>
 800045e:	4d6d      	ldr	r5, [pc, #436]	@ (8000614 <__aeabi_dadd+0x388>)
 8000460:	42aa      	cmp	r2, r5
 8000462:	d100      	bne.n	8000466 <__aeabi_dadd+0x1da>
 8000464:	e0dc      	b.n	8000620 <__aeabi_dadd+0x394>
 8000466:	2501      	movs	r5, #1
 8000468:	2938      	cmp	r1, #56	@ 0x38
 800046a:	dc14      	bgt.n	8000496 <__aeabi_dadd+0x20a>
 800046c:	000a      	movs	r2, r1
 800046e:	2a1f      	cmp	r2, #31
 8000470:	dd00      	ble.n	8000474 <__aeabi_dadd+0x1e8>
 8000472:	e1a2      	b.n	80007ba <__aeabi_dadd+0x52e>
 8000474:	2120      	movs	r1, #32
 8000476:	4653      	mov	r3, sl
 8000478:	1a89      	subs	r1, r1, r2
 800047a:	408b      	lsls	r3, r1
 800047c:	001d      	movs	r5, r3
 800047e:	4663      	mov	r3, ip
 8000480:	40d3      	lsrs	r3, r2
 8000482:	431d      	orrs	r5, r3
 8000484:	4663      	mov	r3, ip
 8000486:	408b      	lsls	r3, r1
 8000488:	0019      	movs	r1, r3
 800048a:	1e4b      	subs	r3, r1, #1
 800048c:	4199      	sbcs	r1, r3
 800048e:	4653      	mov	r3, sl
 8000490:	40d3      	lsrs	r3, r2
 8000492:	430d      	orrs	r5, r1
 8000494:	18e4      	adds	r4, r4, r3
 8000496:	182d      	adds	r5, r5, r0
 8000498:	4285      	cmp	r5, r0
 800049a:	4180      	sbcs	r0, r0
 800049c:	4240      	negs	r0, r0
 800049e:	1824      	adds	r4, r4, r0
 80004a0:	0223      	lsls	r3, r4, #8
 80004a2:	d559      	bpl.n	8000558 <__aeabi_dadd+0x2cc>
 80004a4:	4b5b      	ldr	r3, [pc, #364]	@ (8000614 <__aeabi_dadd+0x388>)
 80004a6:	3701      	adds	r7, #1
 80004a8:	429f      	cmp	r7, r3
 80004aa:	d051      	beq.n	8000550 <__aeabi_dadd+0x2c4>
 80004ac:	2101      	movs	r1, #1
 80004ae:	4b5a      	ldr	r3, [pc, #360]	@ (8000618 <__aeabi_dadd+0x38c>)
 80004b0:	086a      	lsrs	r2, r5, #1
 80004b2:	401c      	ands	r4, r3
 80004b4:	4029      	ands	r1, r5
 80004b6:	430a      	orrs	r2, r1
 80004b8:	07e5      	lsls	r5, r4, #31
 80004ba:	4315      	orrs	r5, r2
 80004bc:	0864      	lsrs	r4, r4, #1
 80004be:	e75f      	b.n	8000380 <__aeabi_dadd+0xf4>
 80004c0:	4661      	mov	r1, ip
 80004c2:	4653      	mov	r3, sl
 80004c4:	4319      	orrs	r1, r3
 80004c6:	d100      	bne.n	80004ca <__aeabi_dadd+0x23e>
 80004c8:	e0bc      	b.n	8000644 <__aeabi_dadd+0x3b8>
 80004ca:	1e51      	subs	r1, r2, #1
 80004cc:	2a01      	cmp	r2, #1
 80004ce:	d100      	bne.n	80004d2 <__aeabi_dadd+0x246>
 80004d0:	e164      	b.n	800079c <__aeabi_dadd+0x510>
 80004d2:	4d50      	ldr	r5, [pc, #320]	@ (8000614 <__aeabi_dadd+0x388>)
 80004d4:	42aa      	cmp	r2, r5
 80004d6:	d100      	bne.n	80004da <__aeabi_dadd+0x24e>
 80004d8:	e16a      	b.n	80007b0 <__aeabi_dadd+0x524>
 80004da:	2501      	movs	r5, #1
 80004dc:	2938      	cmp	r1, #56	@ 0x38
 80004de:	dd00      	ble.n	80004e2 <__aeabi_dadd+0x256>
 80004e0:	e722      	b.n	8000328 <__aeabi_dadd+0x9c>
 80004e2:	000a      	movs	r2, r1
 80004e4:	e70e      	b.n	8000304 <__aeabi_dadd+0x78>
 80004e6:	4a4d      	ldr	r2, [pc, #308]	@ (800061c <__aeabi_dadd+0x390>)
 80004e8:	1c7d      	adds	r5, r7, #1
 80004ea:	4215      	tst	r5, r2
 80004ec:	d000      	beq.n	80004f0 <__aeabi_dadd+0x264>
 80004ee:	e0d0      	b.n	8000692 <__aeabi_dadd+0x406>
 80004f0:	0025      	movs	r5, r4
 80004f2:	4662      	mov	r2, ip
 80004f4:	4653      	mov	r3, sl
 80004f6:	4305      	orrs	r5, r0
 80004f8:	431a      	orrs	r2, r3
 80004fa:	2f00      	cmp	r7, #0
 80004fc:	d000      	beq.n	8000500 <__aeabi_dadd+0x274>
 80004fe:	e137      	b.n	8000770 <__aeabi_dadd+0x4e4>
 8000500:	2d00      	cmp	r5, #0
 8000502:	d100      	bne.n	8000506 <__aeabi_dadd+0x27a>
 8000504:	e1a8      	b.n	8000858 <__aeabi_dadd+0x5cc>
 8000506:	2a00      	cmp	r2, #0
 8000508:	d100      	bne.n	800050c <__aeabi_dadd+0x280>
 800050a:	e16a      	b.n	80007e2 <__aeabi_dadd+0x556>
 800050c:	4663      	mov	r3, ip
 800050e:	1ac5      	subs	r5, r0, r3
 8000510:	4653      	mov	r3, sl
 8000512:	1ae2      	subs	r2, r4, r3
 8000514:	42a8      	cmp	r0, r5
 8000516:	419b      	sbcs	r3, r3
 8000518:	425b      	negs	r3, r3
 800051a:	1ad3      	subs	r3, r2, r3
 800051c:	021a      	lsls	r2, r3, #8
 800051e:	d400      	bmi.n	8000522 <__aeabi_dadd+0x296>
 8000520:	e203      	b.n	800092a <__aeabi_dadd+0x69e>
 8000522:	4663      	mov	r3, ip
 8000524:	1a1d      	subs	r5, r3, r0
 8000526:	45ac      	cmp	ip, r5
 8000528:	4192      	sbcs	r2, r2
 800052a:	4653      	mov	r3, sl
 800052c:	4252      	negs	r2, r2
 800052e:	1b1c      	subs	r4, r3, r4
 8000530:	000e      	movs	r6, r1
 8000532:	4688      	mov	r8, r1
 8000534:	1aa4      	subs	r4, r4, r2
 8000536:	e723      	b.n	8000380 <__aeabi_dadd+0xf4>
 8000538:	4936      	ldr	r1, [pc, #216]	@ (8000614 <__aeabi_dadd+0x388>)
 800053a:	428f      	cmp	r7, r1
 800053c:	d070      	beq.n	8000620 <__aeabi_dadd+0x394>
 800053e:	2501      	movs	r5, #1
 8000540:	2a38      	cmp	r2, #56	@ 0x38
 8000542:	dca8      	bgt.n	8000496 <__aeabi_dadd+0x20a>
 8000544:	2180      	movs	r1, #128	@ 0x80
 8000546:	4653      	mov	r3, sl
 8000548:	0409      	lsls	r1, r1, #16
 800054a:	430b      	orrs	r3, r1
 800054c:	469a      	mov	sl, r3
 800054e:	e78e      	b.n	800046e <__aeabi_dadd+0x1e2>
 8000550:	003c      	movs	r4, r7
 8000552:	2500      	movs	r5, #0
 8000554:	2200      	movs	r2, #0
 8000556:	e731      	b.n	80003bc <__aeabi_dadd+0x130>
 8000558:	2307      	movs	r3, #7
 800055a:	402b      	ands	r3, r5
 800055c:	2b00      	cmp	r3, #0
 800055e:	d000      	beq.n	8000562 <__aeabi_dadd+0x2d6>
 8000560:	e710      	b.n	8000384 <__aeabi_dadd+0xf8>
 8000562:	e093      	b.n	800068c <__aeabi_dadd+0x400>
 8000564:	2a00      	cmp	r2, #0
 8000566:	d074      	beq.n	8000652 <__aeabi_dadd+0x3c6>
 8000568:	464a      	mov	r2, r9
 800056a:	1bd2      	subs	r2, r2, r7
 800056c:	2f00      	cmp	r7, #0
 800056e:	d100      	bne.n	8000572 <__aeabi_dadd+0x2e6>
 8000570:	e0c7      	b.n	8000702 <__aeabi_dadd+0x476>
 8000572:	4928      	ldr	r1, [pc, #160]	@ (8000614 <__aeabi_dadd+0x388>)
 8000574:	4589      	cmp	r9, r1
 8000576:	d100      	bne.n	800057a <__aeabi_dadd+0x2ee>
 8000578:	e185      	b.n	8000886 <__aeabi_dadd+0x5fa>
 800057a:	2501      	movs	r5, #1
 800057c:	2a38      	cmp	r2, #56	@ 0x38
 800057e:	dc12      	bgt.n	80005a6 <__aeabi_dadd+0x31a>
 8000580:	2180      	movs	r1, #128	@ 0x80
 8000582:	0409      	lsls	r1, r1, #16
 8000584:	430c      	orrs	r4, r1
 8000586:	2a1f      	cmp	r2, #31
 8000588:	dd00      	ble.n	800058c <__aeabi_dadd+0x300>
 800058a:	e1ab      	b.n	80008e4 <__aeabi_dadd+0x658>
 800058c:	2120      	movs	r1, #32
 800058e:	0025      	movs	r5, r4
 8000590:	1a89      	subs	r1, r1, r2
 8000592:	0007      	movs	r7, r0
 8000594:	4088      	lsls	r0, r1
 8000596:	408d      	lsls	r5, r1
 8000598:	40d7      	lsrs	r7, r2
 800059a:	1e41      	subs	r1, r0, #1
 800059c:	4188      	sbcs	r0, r1
 800059e:	40d4      	lsrs	r4, r2
 80005a0:	433d      	orrs	r5, r7
 80005a2:	4305      	orrs	r5, r0
 80005a4:	44a2      	add	sl, r4
 80005a6:	4465      	add	r5, ip
 80005a8:	4565      	cmp	r5, ip
 80005aa:	4192      	sbcs	r2, r2
 80005ac:	4252      	negs	r2, r2
 80005ae:	4452      	add	r2, sl
 80005b0:	0014      	movs	r4, r2
 80005b2:	464f      	mov	r7, r9
 80005b4:	e774      	b.n	80004a0 <__aeabi_dadd+0x214>
 80005b6:	0028      	movs	r0, r5
 80005b8:	f000 fcfe 	bl	8000fb8 <__clzsi2>
 80005bc:	0003      	movs	r3, r0
 80005be:	3318      	adds	r3, #24
 80005c0:	2b1f      	cmp	r3, #31
 80005c2:	dc00      	bgt.n	80005c6 <__aeabi_dadd+0x33a>
 80005c4:	e6c2      	b.n	800034c <__aeabi_dadd+0xc0>
 80005c6:	002a      	movs	r2, r5
 80005c8:	3808      	subs	r0, #8
 80005ca:	4082      	lsls	r2, r0
 80005cc:	429f      	cmp	r7, r3
 80005ce:	dd00      	ble.n	80005d2 <__aeabi_dadd+0x346>
 80005d0:	e0a9      	b.n	8000726 <__aeabi_dadd+0x49a>
 80005d2:	1bdb      	subs	r3, r3, r7
 80005d4:	1c58      	adds	r0, r3, #1
 80005d6:	281f      	cmp	r0, #31
 80005d8:	dc00      	bgt.n	80005dc <__aeabi_dadd+0x350>
 80005da:	e1ac      	b.n	8000936 <__aeabi_dadd+0x6aa>
 80005dc:	0015      	movs	r5, r2
 80005de:	3b1f      	subs	r3, #31
 80005e0:	40dd      	lsrs	r5, r3
 80005e2:	2820      	cmp	r0, #32
 80005e4:	d005      	beq.n	80005f2 <__aeabi_dadd+0x366>
 80005e6:	2340      	movs	r3, #64	@ 0x40
 80005e8:	1a1b      	subs	r3, r3, r0
 80005ea:	409a      	lsls	r2, r3
 80005ec:	1e53      	subs	r3, r2, #1
 80005ee:	419a      	sbcs	r2, r3
 80005f0:	4315      	orrs	r5, r2
 80005f2:	2307      	movs	r3, #7
 80005f4:	2700      	movs	r7, #0
 80005f6:	402b      	ands	r3, r5
 80005f8:	e7b0      	b.n	800055c <__aeabi_dadd+0x2d0>
 80005fa:	08ed      	lsrs	r5, r5, #3
 80005fc:	4b05      	ldr	r3, [pc, #20]	@ (8000614 <__aeabi_dadd+0x388>)
 80005fe:	0762      	lsls	r2, r4, #29
 8000600:	432a      	orrs	r2, r5
 8000602:	08e4      	lsrs	r4, r4, #3
 8000604:	429f      	cmp	r7, r3
 8000606:	d00f      	beq.n	8000628 <__aeabi_dadd+0x39c>
 8000608:	0324      	lsls	r4, r4, #12
 800060a:	0b25      	lsrs	r5, r4, #12
 800060c:	057c      	lsls	r4, r7, #21
 800060e:	0d64      	lsrs	r4, r4, #21
 8000610:	e6d4      	b.n	80003bc <__aeabi_dadd+0x130>
 8000612:	46c0      	nop			@ (mov r8, r8)
 8000614:	000007ff 	.word	0x000007ff
 8000618:	ff7fffff 	.word	0xff7fffff
 800061c:	000007fe 	.word	0x000007fe
 8000620:	08c0      	lsrs	r0, r0, #3
 8000622:	0762      	lsls	r2, r4, #29
 8000624:	4302      	orrs	r2, r0
 8000626:	08e4      	lsrs	r4, r4, #3
 8000628:	0013      	movs	r3, r2
 800062a:	4323      	orrs	r3, r4
 800062c:	d100      	bne.n	8000630 <__aeabi_dadd+0x3a4>
 800062e:	e186      	b.n	800093e <__aeabi_dadd+0x6b2>
 8000630:	2580      	movs	r5, #128	@ 0x80
 8000632:	032d      	lsls	r5, r5, #12
 8000634:	4325      	orrs	r5, r4
 8000636:	032d      	lsls	r5, r5, #12
 8000638:	4cc3      	ldr	r4, [pc, #780]	@ (8000948 <__aeabi_dadd+0x6bc>)
 800063a:	0b2d      	lsrs	r5, r5, #12
 800063c:	e6be      	b.n	80003bc <__aeabi_dadd+0x130>
 800063e:	4660      	mov	r0, ip
 8000640:	4654      	mov	r4, sl
 8000642:	000e      	movs	r6, r1
 8000644:	0017      	movs	r7, r2
 8000646:	08c5      	lsrs	r5, r0, #3
 8000648:	e7d8      	b.n	80005fc <__aeabi_dadd+0x370>
 800064a:	4cc0      	ldr	r4, [pc, #768]	@ (800094c <__aeabi_dadd+0x6c0>)
 800064c:	1aff      	subs	r7, r7, r3
 800064e:	4014      	ands	r4, r2
 8000650:	e696      	b.n	8000380 <__aeabi_dadd+0xf4>
 8000652:	4abf      	ldr	r2, [pc, #764]	@ (8000950 <__aeabi_dadd+0x6c4>)
 8000654:	1c79      	adds	r1, r7, #1
 8000656:	4211      	tst	r1, r2
 8000658:	d16b      	bne.n	8000732 <__aeabi_dadd+0x4a6>
 800065a:	0022      	movs	r2, r4
 800065c:	4302      	orrs	r2, r0
 800065e:	2f00      	cmp	r7, #0
 8000660:	d000      	beq.n	8000664 <__aeabi_dadd+0x3d8>
 8000662:	e0db      	b.n	800081c <__aeabi_dadd+0x590>
 8000664:	2a00      	cmp	r2, #0
 8000666:	d100      	bne.n	800066a <__aeabi_dadd+0x3de>
 8000668:	e12d      	b.n	80008c6 <__aeabi_dadd+0x63a>
 800066a:	4662      	mov	r2, ip
 800066c:	4653      	mov	r3, sl
 800066e:	431a      	orrs	r2, r3
 8000670:	d100      	bne.n	8000674 <__aeabi_dadd+0x3e8>
 8000672:	e0b6      	b.n	80007e2 <__aeabi_dadd+0x556>
 8000674:	4663      	mov	r3, ip
 8000676:	18c5      	adds	r5, r0, r3
 8000678:	4285      	cmp	r5, r0
 800067a:	4180      	sbcs	r0, r0
 800067c:	4454      	add	r4, sl
 800067e:	4240      	negs	r0, r0
 8000680:	1824      	adds	r4, r4, r0
 8000682:	0223      	lsls	r3, r4, #8
 8000684:	d502      	bpl.n	800068c <__aeabi_dadd+0x400>
 8000686:	000f      	movs	r7, r1
 8000688:	4bb0      	ldr	r3, [pc, #704]	@ (800094c <__aeabi_dadd+0x6c0>)
 800068a:	401c      	ands	r4, r3
 800068c:	003a      	movs	r2, r7
 800068e:	0028      	movs	r0, r5
 8000690:	e7d8      	b.n	8000644 <__aeabi_dadd+0x3b8>
 8000692:	4662      	mov	r2, ip
 8000694:	1a85      	subs	r5, r0, r2
 8000696:	42a8      	cmp	r0, r5
 8000698:	4192      	sbcs	r2, r2
 800069a:	4653      	mov	r3, sl
 800069c:	4252      	negs	r2, r2
 800069e:	4691      	mov	r9, r2
 80006a0:	1ae3      	subs	r3, r4, r3
 80006a2:	001a      	movs	r2, r3
 80006a4:	464b      	mov	r3, r9
 80006a6:	1ad2      	subs	r2, r2, r3
 80006a8:	0013      	movs	r3, r2
 80006aa:	4691      	mov	r9, r2
 80006ac:	021a      	lsls	r2, r3, #8
 80006ae:	d454      	bmi.n	800075a <__aeabi_dadd+0x4ce>
 80006b0:	464a      	mov	r2, r9
 80006b2:	464c      	mov	r4, r9
 80006b4:	432a      	orrs	r2, r5
 80006b6:	d000      	beq.n	80006ba <__aeabi_dadd+0x42e>
 80006b8:	e640      	b.n	800033c <__aeabi_dadd+0xb0>
 80006ba:	2600      	movs	r6, #0
 80006bc:	2400      	movs	r4, #0
 80006be:	2500      	movs	r5, #0
 80006c0:	e67c      	b.n	80003bc <__aeabi_dadd+0x130>
 80006c2:	4da1      	ldr	r5, [pc, #644]	@ (8000948 <__aeabi_dadd+0x6bc>)
 80006c4:	45a9      	cmp	r9, r5
 80006c6:	d100      	bne.n	80006ca <__aeabi_dadd+0x43e>
 80006c8:	e090      	b.n	80007ec <__aeabi_dadd+0x560>
 80006ca:	2501      	movs	r5, #1
 80006cc:	2a38      	cmp	r2, #56	@ 0x38
 80006ce:	dd00      	ble.n	80006d2 <__aeabi_dadd+0x446>
 80006d0:	e6ab      	b.n	800042a <__aeabi_dadd+0x19e>
 80006d2:	2580      	movs	r5, #128	@ 0x80
 80006d4:	042d      	lsls	r5, r5, #16
 80006d6:	432c      	orrs	r4, r5
 80006d8:	e695      	b.n	8000406 <__aeabi_dadd+0x17a>
 80006da:	0011      	movs	r1, r2
 80006dc:	4655      	mov	r5, sl
 80006de:	3920      	subs	r1, #32
 80006e0:	40cd      	lsrs	r5, r1
 80006e2:	46a9      	mov	r9, r5
 80006e4:	2a20      	cmp	r2, #32
 80006e6:	d006      	beq.n	80006f6 <__aeabi_dadd+0x46a>
 80006e8:	2140      	movs	r1, #64	@ 0x40
 80006ea:	4653      	mov	r3, sl
 80006ec:	1a8a      	subs	r2, r1, r2
 80006ee:	4093      	lsls	r3, r2
 80006f0:	4662      	mov	r2, ip
 80006f2:	431a      	orrs	r2, r3
 80006f4:	4694      	mov	ip, r2
 80006f6:	4665      	mov	r5, ip
 80006f8:	1e6b      	subs	r3, r5, #1
 80006fa:	419d      	sbcs	r5, r3
 80006fc:	464b      	mov	r3, r9
 80006fe:	431d      	orrs	r5, r3
 8000700:	e612      	b.n	8000328 <__aeabi_dadd+0x9c>
 8000702:	0021      	movs	r1, r4
 8000704:	4301      	orrs	r1, r0
 8000706:	d100      	bne.n	800070a <__aeabi_dadd+0x47e>
 8000708:	e0c4      	b.n	8000894 <__aeabi_dadd+0x608>
 800070a:	1e51      	subs	r1, r2, #1
 800070c:	2a01      	cmp	r2, #1
 800070e:	d100      	bne.n	8000712 <__aeabi_dadd+0x486>
 8000710:	e0fb      	b.n	800090a <__aeabi_dadd+0x67e>
 8000712:	4d8d      	ldr	r5, [pc, #564]	@ (8000948 <__aeabi_dadd+0x6bc>)
 8000714:	42aa      	cmp	r2, r5
 8000716:	d100      	bne.n	800071a <__aeabi_dadd+0x48e>
 8000718:	e0b5      	b.n	8000886 <__aeabi_dadd+0x5fa>
 800071a:	2501      	movs	r5, #1
 800071c:	2938      	cmp	r1, #56	@ 0x38
 800071e:	dd00      	ble.n	8000722 <__aeabi_dadd+0x496>
 8000720:	e741      	b.n	80005a6 <__aeabi_dadd+0x31a>
 8000722:	000a      	movs	r2, r1
 8000724:	e72f      	b.n	8000586 <__aeabi_dadd+0x2fa>
 8000726:	4c89      	ldr	r4, [pc, #548]	@ (800094c <__aeabi_dadd+0x6c0>)
 8000728:	1aff      	subs	r7, r7, r3
 800072a:	4014      	ands	r4, r2
 800072c:	0762      	lsls	r2, r4, #29
 800072e:	08e4      	lsrs	r4, r4, #3
 8000730:	e76a      	b.n	8000608 <__aeabi_dadd+0x37c>
 8000732:	4a85      	ldr	r2, [pc, #532]	@ (8000948 <__aeabi_dadd+0x6bc>)
 8000734:	4291      	cmp	r1, r2
 8000736:	d100      	bne.n	800073a <__aeabi_dadd+0x4ae>
 8000738:	e0e3      	b.n	8000902 <__aeabi_dadd+0x676>
 800073a:	4663      	mov	r3, ip
 800073c:	18c2      	adds	r2, r0, r3
 800073e:	4282      	cmp	r2, r0
 8000740:	4180      	sbcs	r0, r0
 8000742:	0023      	movs	r3, r4
 8000744:	4240      	negs	r0, r0
 8000746:	4453      	add	r3, sl
 8000748:	181b      	adds	r3, r3, r0
 800074a:	07dd      	lsls	r5, r3, #31
 800074c:	085c      	lsrs	r4, r3, #1
 800074e:	2307      	movs	r3, #7
 8000750:	0852      	lsrs	r2, r2, #1
 8000752:	4315      	orrs	r5, r2
 8000754:	000f      	movs	r7, r1
 8000756:	402b      	ands	r3, r5
 8000758:	e700      	b.n	800055c <__aeabi_dadd+0x2d0>
 800075a:	4663      	mov	r3, ip
 800075c:	1a1d      	subs	r5, r3, r0
 800075e:	45ac      	cmp	ip, r5
 8000760:	4192      	sbcs	r2, r2
 8000762:	4653      	mov	r3, sl
 8000764:	4252      	negs	r2, r2
 8000766:	1b1c      	subs	r4, r3, r4
 8000768:	000e      	movs	r6, r1
 800076a:	4688      	mov	r8, r1
 800076c:	1aa4      	subs	r4, r4, r2
 800076e:	e5e5      	b.n	800033c <__aeabi_dadd+0xb0>
 8000770:	2d00      	cmp	r5, #0
 8000772:	d000      	beq.n	8000776 <__aeabi_dadd+0x4ea>
 8000774:	e091      	b.n	800089a <__aeabi_dadd+0x60e>
 8000776:	2a00      	cmp	r2, #0
 8000778:	d138      	bne.n	80007ec <__aeabi_dadd+0x560>
 800077a:	2480      	movs	r4, #128	@ 0x80
 800077c:	2600      	movs	r6, #0
 800077e:	0324      	lsls	r4, r4, #12
 8000780:	e756      	b.n	8000630 <__aeabi_dadd+0x3a4>
 8000782:	4663      	mov	r3, ip
 8000784:	18c5      	adds	r5, r0, r3
 8000786:	4285      	cmp	r5, r0
 8000788:	4180      	sbcs	r0, r0
 800078a:	4454      	add	r4, sl
 800078c:	4240      	negs	r0, r0
 800078e:	1824      	adds	r4, r4, r0
 8000790:	2701      	movs	r7, #1
 8000792:	0223      	lsls	r3, r4, #8
 8000794:	d400      	bmi.n	8000798 <__aeabi_dadd+0x50c>
 8000796:	e6df      	b.n	8000558 <__aeabi_dadd+0x2cc>
 8000798:	2702      	movs	r7, #2
 800079a:	e687      	b.n	80004ac <__aeabi_dadd+0x220>
 800079c:	4663      	mov	r3, ip
 800079e:	1ac5      	subs	r5, r0, r3
 80007a0:	42a8      	cmp	r0, r5
 80007a2:	4180      	sbcs	r0, r0
 80007a4:	4653      	mov	r3, sl
 80007a6:	4240      	negs	r0, r0
 80007a8:	1ae4      	subs	r4, r4, r3
 80007aa:	2701      	movs	r7, #1
 80007ac:	1a24      	subs	r4, r4, r0
 80007ae:	e5c0      	b.n	8000332 <__aeabi_dadd+0xa6>
 80007b0:	0762      	lsls	r2, r4, #29
 80007b2:	08c0      	lsrs	r0, r0, #3
 80007b4:	4302      	orrs	r2, r0
 80007b6:	08e4      	lsrs	r4, r4, #3
 80007b8:	e736      	b.n	8000628 <__aeabi_dadd+0x39c>
 80007ba:	0011      	movs	r1, r2
 80007bc:	4653      	mov	r3, sl
 80007be:	3920      	subs	r1, #32
 80007c0:	40cb      	lsrs	r3, r1
 80007c2:	4699      	mov	r9, r3
 80007c4:	2a20      	cmp	r2, #32
 80007c6:	d006      	beq.n	80007d6 <__aeabi_dadd+0x54a>
 80007c8:	2140      	movs	r1, #64	@ 0x40
 80007ca:	4653      	mov	r3, sl
 80007cc:	1a8a      	subs	r2, r1, r2
 80007ce:	4093      	lsls	r3, r2
 80007d0:	4662      	mov	r2, ip
 80007d2:	431a      	orrs	r2, r3
 80007d4:	4694      	mov	ip, r2
 80007d6:	4665      	mov	r5, ip
 80007d8:	1e6b      	subs	r3, r5, #1
 80007da:	419d      	sbcs	r5, r3
 80007dc:	464b      	mov	r3, r9
 80007de:	431d      	orrs	r5, r3
 80007e0:	e659      	b.n	8000496 <__aeabi_dadd+0x20a>
 80007e2:	0762      	lsls	r2, r4, #29
 80007e4:	08c0      	lsrs	r0, r0, #3
 80007e6:	4302      	orrs	r2, r0
 80007e8:	08e4      	lsrs	r4, r4, #3
 80007ea:	e70d      	b.n	8000608 <__aeabi_dadd+0x37c>
 80007ec:	4653      	mov	r3, sl
 80007ee:	075a      	lsls	r2, r3, #29
 80007f0:	4663      	mov	r3, ip
 80007f2:	08d8      	lsrs	r0, r3, #3
 80007f4:	4653      	mov	r3, sl
 80007f6:	000e      	movs	r6, r1
 80007f8:	4302      	orrs	r2, r0
 80007fa:	08dc      	lsrs	r4, r3, #3
 80007fc:	e714      	b.n	8000628 <__aeabi_dadd+0x39c>
 80007fe:	0015      	movs	r5, r2
 8000800:	0026      	movs	r6, r4
 8000802:	3d20      	subs	r5, #32
 8000804:	40ee      	lsrs	r6, r5
 8000806:	2a20      	cmp	r2, #32
 8000808:	d003      	beq.n	8000812 <__aeabi_dadd+0x586>
 800080a:	2540      	movs	r5, #64	@ 0x40
 800080c:	1aaa      	subs	r2, r5, r2
 800080e:	4094      	lsls	r4, r2
 8000810:	4320      	orrs	r0, r4
 8000812:	1e42      	subs	r2, r0, #1
 8000814:	4190      	sbcs	r0, r2
 8000816:	0005      	movs	r5, r0
 8000818:	4335      	orrs	r5, r6
 800081a:	e606      	b.n	800042a <__aeabi_dadd+0x19e>
 800081c:	2a00      	cmp	r2, #0
 800081e:	d07c      	beq.n	800091a <__aeabi_dadd+0x68e>
 8000820:	4662      	mov	r2, ip
 8000822:	4653      	mov	r3, sl
 8000824:	08c0      	lsrs	r0, r0, #3
 8000826:	431a      	orrs	r2, r3
 8000828:	d100      	bne.n	800082c <__aeabi_dadd+0x5a0>
 800082a:	e6fa      	b.n	8000622 <__aeabi_dadd+0x396>
 800082c:	0762      	lsls	r2, r4, #29
 800082e:	4310      	orrs	r0, r2
 8000830:	2280      	movs	r2, #128	@ 0x80
 8000832:	08e4      	lsrs	r4, r4, #3
 8000834:	0312      	lsls	r2, r2, #12
 8000836:	4214      	tst	r4, r2
 8000838:	d008      	beq.n	800084c <__aeabi_dadd+0x5c0>
 800083a:	08d9      	lsrs	r1, r3, #3
 800083c:	4211      	tst	r1, r2
 800083e:	d105      	bne.n	800084c <__aeabi_dadd+0x5c0>
 8000840:	4663      	mov	r3, ip
 8000842:	08d8      	lsrs	r0, r3, #3
 8000844:	4653      	mov	r3, sl
 8000846:	000c      	movs	r4, r1
 8000848:	075b      	lsls	r3, r3, #29
 800084a:	4318      	orrs	r0, r3
 800084c:	0f42      	lsrs	r2, r0, #29
 800084e:	00c0      	lsls	r0, r0, #3
 8000850:	08c0      	lsrs	r0, r0, #3
 8000852:	0752      	lsls	r2, r2, #29
 8000854:	4302      	orrs	r2, r0
 8000856:	e6e7      	b.n	8000628 <__aeabi_dadd+0x39c>
 8000858:	2a00      	cmp	r2, #0
 800085a:	d100      	bne.n	800085e <__aeabi_dadd+0x5d2>
 800085c:	e72d      	b.n	80006ba <__aeabi_dadd+0x42e>
 800085e:	4663      	mov	r3, ip
 8000860:	08d8      	lsrs	r0, r3, #3
 8000862:	4653      	mov	r3, sl
 8000864:	075a      	lsls	r2, r3, #29
 8000866:	000e      	movs	r6, r1
 8000868:	4302      	orrs	r2, r0
 800086a:	08dc      	lsrs	r4, r3, #3
 800086c:	e6cc      	b.n	8000608 <__aeabi_dadd+0x37c>
 800086e:	4663      	mov	r3, ip
 8000870:	1a1d      	subs	r5, r3, r0
 8000872:	45ac      	cmp	ip, r5
 8000874:	4192      	sbcs	r2, r2
 8000876:	4653      	mov	r3, sl
 8000878:	4252      	negs	r2, r2
 800087a:	1b1c      	subs	r4, r3, r4
 800087c:	000e      	movs	r6, r1
 800087e:	4688      	mov	r8, r1
 8000880:	1aa4      	subs	r4, r4, r2
 8000882:	3701      	adds	r7, #1
 8000884:	e555      	b.n	8000332 <__aeabi_dadd+0xa6>
 8000886:	4663      	mov	r3, ip
 8000888:	08d9      	lsrs	r1, r3, #3
 800088a:	4653      	mov	r3, sl
 800088c:	075a      	lsls	r2, r3, #29
 800088e:	430a      	orrs	r2, r1
 8000890:	08dc      	lsrs	r4, r3, #3
 8000892:	e6c9      	b.n	8000628 <__aeabi_dadd+0x39c>
 8000894:	4660      	mov	r0, ip
 8000896:	4654      	mov	r4, sl
 8000898:	e6d4      	b.n	8000644 <__aeabi_dadd+0x3b8>
 800089a:	08c0      	lsrs	r0, r0, #3
 800089c:	2a00      	cmp	r2, #0
 800089e:	d100      	bne.n	80008a2 <__aeabi_dadd+0x616>
 80008a0:	e6bf      	b.n	8000622 <__aeabi_dadd+0x396>
 80008a2:	0762      	lsls	r2, r4, #29
 80008a4:	4310      	orrs	r0, r2
 80008a6:	2280      	movs	r2, #128	@ 0x80
 80008a8:	08e4      	lsrs	r4, r4, #3
 80008aa:	0312      	lsls	r2, r2, #12
 80008ac:	4214      	tst	r4, r2
 80008ae:	d0cd      	beq.n	800084c <__aeabi_dadd+0x5c0>
 80008b0:	08dd      	lsrs	r5, r3, #3
 80008b2:	4215      	tst	r5, r2
 80008b4:	d1ca      	bne.n	800084c <__aeabi_dadd+0x5c0>
 80008b6:	4663      	mov	r3, ip
 80008b8:	08d8      	lsrs	r0, r3, #3
 80008ba:	4653      	mov	r3, sl
 80008bc:	075b      	lsls	r3, r3, #29
 80008be:	000e      	movs	r6, r1
 80008c0:	002c      	movs	r4, r5
 80008c2:	4318      	orrs	r0, r3
 80008c4:	e7c2      	b.n	800084c <__aeabi_dadd+0x5c0>
 80008c6:	4663      	mov	r3, ip
 80008c8:	08d9      	lsrs	r1, r3, #3
 80008ca:	4653      	mov	r3, sl
 80008cc:	075a      	lsls	r2, r3, #29
 80008ce:	430a      	orrs	r2, r1
 80008d0:	08dc      	lsrs	r4, r3, #3
 80008d2:	e699      	b.n	8000608 <__aeabi_dadd+0x37c>
 80008d4:	4663      	mov	r3, ip
 80008d6:	08d8      	lsrs	r0, r3, #3
 80008d8:	4653      	mov	r3, sl
 80008da:	075a      	lsls	r2, r3, #29
 80008dc:	000e      	movs	r6, r1
 80008de:	4302      	orrs	r2, r0
 80008e0:	08dc      	lsrs	r4, r3, #3
 80008e2:	e6a1      	b.n	8000628 <__aeabi_dadd+0x39c>
 80008e4:	0011      	movs	r1, r2
 80008e6:	0027      	movs	r7, r4
 80008e8:	3920      	subs	r1, #32
 80008ea:	40cf      	lsrs	r7, r1
 80008ec:	2a20      	cmp	r2, #32
 80008ee:	d003      	beq.n	80008f8 <__aeabi_dadd+0x66c>
 80008f0:	2140      	movs	r1, #64	@ 0x40
 80008f2:	1a8a      	subs	r2, r1, r2
 80008f4:	4094      	lsls	r4, r2
 80008f6:	4320      	orrs	r0, r4
 80008f8:	1e42      	subs	r2, r0, #1
 80008fa:	4190      	sbcs	r0, r2
 80008fc:	0005      	movs	r5, r0
 80008fe:	433d      	orrs	r5, r7
 8000900:	e651      	b.n	80005a6 <__aeabi_dadd+0x31a>
 8000902:	000c      	movs	r4, r1
 8000904:	2500      	movs	r5, #0
 8000906:	2200      	movs	r2, #0
 8000908:	e558      	b.n	80003bc <__aeabi_dadd+0x130>
 800090a:	4460      	add	r0, ip
 800090c:	4560      	cmp	r0, ip
 800090e:	4192      	sbcs	r2, r2
 8000910:	4454      	add	r4, sl
 8000912:	4252      	negs	r2, r2
 8000914:	0005      	movs	r5, r0
 8000916:	18a4      	adds	r4, r4, r2
 8000918:	e73a      	b.n	8000790 <__aeabi_dadd+0x504>
 800091a:	4653      	mov	r3, sl
 800091c:	075a      	lsls	r2, r3, #29
 800091e:	4663      	mov	r3, ip
 8000920:	08d9      	lsrs	r1, r3, #3
 8000922:	4653      	mov	r3, sl
 8000924:	430a      	orrs	r2, r1
 8000926:	08dc      	lsrs	r4, r3, #3
 8000928:	e67e      	b.n	8000628 <__aeabi_dadd+0x39c>
 800092a:	001a      	movs	r2, r3
 800092c:	001c      	movs	r4, r3
 800092e:	432a      	orrs	r2, r5
 8000930:	d000      	beq.n	8000934 <__aeabi_dadd+0x6a8>
 8000932:	e6ab      	b.n	800068c <__aeabi_dadd+0x400>
 8000934:	e6c1      	b.n	80006ba <__aeabi_dadd+0x42e>
 8000936:	2120      	movs	r1, #32
 8000938:	2500      	movs	r5, #0
 800093a:	1a09      	subs	r1, r1, r0
 800093c:	e519      	b.n	8000372 <__aeabi_dadd+0xe6>
 800093e:	2200      	movs	r2, #0
 8000940:	2500      	movs	r5, #0
 8000942:	4c01      	ldr	r4, [pc, #4]	@ (8000948 <__aeabi_dadd+0x6bc>)
 8000944:	e53a      	b.n	80003bc <__aeabi_dadd+0x130>
 8000946:	46c0      	nop			@ (mov r8, r8)
 8000948:	000007ff 	.word	0x000007ff
 800094c:	ff7fffff 	.word	0xff7fffff
 8000950:	000007fe 	.word	0x000007fe

08000954 <__aeabi_dmul>:
 8000954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000956:	4657      	mov	r7, sl
 8000958:	46de      	mov	lr, fp
 800095a:	464e      	mov	r6, r9
 800095c:	4645      	mov	r5, r8
 800095e:	b5e0      	push	{r5, r6, r7, lr}
 8000960:	001f      	movs	r7, r3
 8000962:	030b      	lsls	r3, r1, #12
 8000964:	0b1b      	lsrs	r3, r3, #12
 8000966:	0016      	movs	r6, r2
 8000968:	469a      	mov	sl, r3
 800096a:	0fca      	lsrs	r2, r1, #31
 800096c:	004b      	lsls	r3, r1, #1
 800096e:	0004      	movs	r4, r0
 8000970:	4693      	mov	fp, r2
 8000972:	b087      	sub	sp, #28
 8000974:	0d5b      	lsrs	r3, r3, #21
 8000976:	d100      	bne.n	800097a <__aeabi_dmul+0x26>
 8000978:	e0d5      	b.n	8000b26 <__aeabi_dmul+0x1d2>
 800097a:	4abb      	ldr	r2, [pc, #748]	@ (8000c68 <__aeabi_dmul+0x314>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d100      	bne.n	8000982 <__aeabi_dmul+0x2e>
 8000980:	e0f8      	b.n	8000b74 <__aeabi_dmul+0x220>
 8000982:	4651      	mov	r1, sl
 8000984:	0f42      	lsrs	r2, r0, #29
 8000986:	00c9      	lsls	r1, r1, #3
 8000988:	430a      	orrs	r2, r1
 800098a:	2180      	movs	r1, #128	@ 0x80
 800098c:	0409      	lsls	r1, r1, #16
 800098e:	4311      	orrs	r1, r2
 8000990:	00c2      	lsls	r2, r0, #3
 8000992:	4691      	mov	r9, r2
 8000994:	4ab5      	ldr	r2, [pc, #724]	@ (8000c6c <__aeabi_dmul+0x318>)
 8000996:	468a      	mov	sl, r1
 8000998:	189d      	adds	r5, r3, r2
 800099a:	2300      	movs	r3, #0
 800099c:	4698      	mov	r8, r3
 800099e:	9302      	str	r3, [sp, #8]
 80009a0:	033c      	lsls	r4, r7, #12
 80009a2:	007b      	lsls	r3, r7, #1
 80009a4:	0ffa      	lsrs	r2, r7, #31
 80009a6:	0030      	movs	r0, r6
 80009a8:	0b24      	lsrs	r4, r4, #12
 80009aa:	0d5b      	lsrs	r3, r3, #21
 80009ac:	9200      	str	r2, [sp, #0]
 80009ae:	d100      	bne.n	80009b2 <__aeabi_dmul+0x5e>
 80009b0:	e096      	b.n	8000ae0 <__aeabi_dmul+0x18c>
 80009b2:	4aad      	ldr	r2, [pc, #692]	@ (8000c68 <__aeabi_dmul+0x314>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d031      	beq.n	8000a1c <__aeabi_dmul+0xc8>
 80009b8:	0f72      	lsrs	r2, r6, #29
 80009ba:	00e4      	lsls	r4, r4, #3
 80009bc:	4322      	orrs	r2, r4
 80009be:	2480      	movs	r4, #128	@ 0x80
 80009c0:	0424      	lsls	r4, r4, #16
 80009c2:	4314      	orrs	r4, r2
 80009c4:	4aa9      	ldr	r2, [pc, #676]	@ (8000c6c <__aeabi_dmul+0x318>)
 80009c6:	00f0      	lsls	r0, r6, #3
 80009c8:	4694      	mov	ip, r2
 80009ca:	4463      	add	r3, ip
 80009cc:	195b      	adds	r3, r3, r5
 80009ce:	1c5a      	adds	r2, r3, #1
 80009d0:	9201      	str	r2, [sp, #4]
 80009d2:	4642      	mov	r2, r8
 80009d4:	2600      	movs	r6, #0
 80009d6:	2a0a      	cmp	r2, #10
 80009d8:	dc42      	bgt.n	8000a60 <__aeabi_dmul+0x10c>
 80009da:	465a      	mov	r2, fp
 80009dc:	9900      	ldr	r1, [sp, #0]
 80009de:	404a      	eors	r2, r1
 80009e0:	4693      	mov	fp, r2
 80009e2:	4642      	mov	r2, r8
 80009e4:	2a02      	cmp	r2, #2
 80009e6:	dc32      	bgt.n	8000a4e <__aeabi_dmul+0xfa>
 80009e8:	3a01      	subs	r2, #1
 80009ea:	2a01      	cmp	r2, #1
 80009ec:	d900      	bls.n	80009f0 <__aeabi_dmul+0x9c>
 80009ee:	e149      	b.n	8000c84 <__aeabi_dmul+0x330>
 80009f0:	2e02      	cmp	r6, #2
 80009f2:	d100      	bne.n	80009f6 <__aeabi_dmul+0xa2>
 80009f4:	e0ca      	b.n	8000b8c <__aeabi_dmul+0x238>
 80009f6:	2e01      	cmp	r6, #1
 80009f8:	d13d      	bne.n	8000a76 <__aeabi_dmul+0x122>
 80009fa:	2300      	movs	r3, #0
 80009fc:	2400      	movs	r4, #0
 80009fe:	2200      	movs	r2, #0
 8000a00:	0010      	movs	r0, r2
 8000a02:	465a      	mov	r2, fp
 8000a04:	051b      	lsls	r3, r3, #20
 8000a06:	4323      	orrs	r3, r4
 8000a08:	07d2      	lsls	r2, r2, #31
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	0019      	movs	r1, r3
 8000a0e:	b007      	add	sp, #28
 8000a10:	bcf0      	pop	{r4, r5, r6, r7}
 8000a12:	46bb      	mov	fp, r7
 8000a14:	46b2      	mov	sl, r6
 8000a16:	46a9      	mov	r9, r5
 8000a18:	46a0      	mov	r8, r4
 8000a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a1c:	4b92      	ldr	r3, [pc, #584]	@ (8000c68 <__aeabi_dmul+0x314>)
 8000a1e:	4326      	orrs	r6, r4
 8000a20:	18eb      	adds	r3, r5, r3
 8000a22:	2e00      	cmp	r6, #0
 8000a24:	d100      	bne.n	8000a28 <__aeabi_dmul+0xd4>
 8000a26:	e0bb      	b.n	8000ba0 <__aeabi_dmul+0x24c>
 8000a28:	2203      	movs	r2, #3
 8000a2a:	4641      	mov	r1, r8
 8000a2c:	4311      	orrs	r1, r2
 8000a2e:	465a      	mov	r2, fp
 8000a30:	4688      	mov	r8, r1
 8000a32:	9900      	ldr	r1, [sp, #0]
 8000a34:	404a      	eors	r2, r1
 8000a36:	2180      	movs	r1, #128	@ 0x80
 8000a38:	0109      	lsls	r1, r1, #4
 8000a3a:	468c      	mov	ip, r1
 8000a3c:	0029      	movs	r1, r5
 8000a3e:	4461      	add	r1, ip
 8000a40:	9101      	str	r1, [sp, #4]
 8000a42:	4641      	mov	r1, r8
 8000a44:	290a      	cmp	r1, #10
 8000a46:	dd00      	ble.n	8000a4a <__aeabi_dmul+0xf6>
 8000a48:	e233      	b.n	8000eb2 <__aeabi_dmul+0x55e>
 8000a4a:	4693      	mov	fp, r2
 8000a4c:	2603      	movs	r6, #3
 8000a4e:	4642      	mov	r2, r8
 8000a50:	2701      	movs	r7, #1
 8000a52:	4097      	lsls	r7, r2
 8000a54:	21a6      	movs	r1, #166	@ 0xa6
 8000a56:	003a      	movs	r2, r7
 8000a58:	00c9      	lsls	r1, r1, #3
 8000a5a:	400a      	ands	r2, r1
 8000a5c:	420f      	tst	r7, r1
 8000a5e:	d031      	beq.n	8000ac4 <__aeabi_dmul+0x170>
 8000a60:	9e02      	ldr	r6, [sp, #8]
 8000a62:	2e02      	cmp	r6, #2
 8000a64:	d100      	bne.n	8000a68 <__aeabi_dmul+0x114>
 8000a66:	e235      	b.n	8000ed4 <__aeabi_dmul+0x580>
 8000a68:	2e03      	cmp	r6, #3
 8000a6a:	d100      	bne.n	8000a6e <__aeabi_dmul+0x11a>
 8000a6c:	e1d2      	b.n	8000e14 <__aeabi_dmul+0x4c0>
 8000a6e:	4654      	mov	r4, sl
 8000a70:	4648      	mov	r0, r9
 8000a72:	2e01      	cmp	r6, #1
 8000a74:	d0c1      	beq.n	80009fa <__aeabi_dmul+0xa6>
 8000a76:	9a01      	ldr	r2, [sp, #4]
 8000a78:	4b7d      	ldr	r3, [pc, #500]	@ (8000c70 <__aeabi_dmul+0x31c>)
 8000a7a:	4694      	mov	ip, r2
 8000a7c:	4463      	add	r3, ip
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	dc00      	bgt.n	8000a84 <__aeabi_dmul+0x130>
 8000a82:	e0c0      	b.n	8000c06 <__aeabi_dmul+0x2b2>
 8000a84:	0742      	lsls	r2, r0, #29
 8000a86:	d009      	beq.n	8000a9c <__aeabi_dmul+0x148>
 8000a88:	220f      	movs	r2, #15
 8000a8a:	4002      	ands	r2, r0
 8000a8c:	2a04      	cmp	r2, #4
 8000a8e:	d005      	beq.n	8000a9c <__aeabi_dmul+0x148>
 8000a90:	1d02      	adds	r2, r0, #4
 8000a92:	4282      	cmp	r2, r0
 8000a94:	4180      	sbcs	r0, r0
 8000a96:	4240      	negs	r0, r0
 8000a98:	1824      	adds	r4, r4, r0
 8000a9a:	0010      	movs	r0, r2
 8000a9c:	01e2      	lsls	r2, r4, #7
 8000a9e:	d506      	bpl.n	8000aae <__aeabi_dmul+0x15a>
 8000aa0:	4b74      	ldr	r3, [pc, #464]	@ (8000c74 <__aeabi_dmul+0x320>)
 8000aa2:	9a01      	ldr	r2, [sp, #4]
 8000aa4:	401c      	ands	r4, r3
 8000aa6:	2380      	movs	r3, #128	@ 0x80
 8000aa8:	4694      	mov	ip, r2
 8000aaa:	00db      	lsls	r3, r3, #3
 8000aac:	4463      	add	r3, ip
 8000aae:	4a72      	ldr	r2, [pc, #456]	@ (8000c78 <__aeabi_dmul+0x324>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	dc6b      	bgt.n	8000b8c <__aeabi_dmul+0x238>
 8000ab4:	0762      	lsls	r2, r4, #29
 8000ab6:	08c0      	lsrs	r0, r0, #3
 8000ab8:	0264      	lsls	r4, r4, #9
 8000aba:	055b      	lsls	r3, r3, #21
 8000abc:	4302      	orrs	r2, r0
 8000abe:	0b24      	lsrs	r4, r4, #12
 8000ac0:	0d5b      	lsrs	r3, r3, #21
 8000ac2:	e79d      	b.n	8000a00 <__aeabi_dmul+0xac>
 8000ac4:	2190      	movs	r1, #144	@ 0x90
 8000ac6:	0089      	lsls	r1, r1, #2
 8000ac8:	420f      	tst	r7, r1
 8000aca:	d163      	bne.n	8000b94 <__aeabi_dmul+0x240>
 8000acc:	2288      	movs	r2, #136	@ 0x88
 8000ace:	423a      	tst	r2, r7
 8000ad0:	d100      	bne.n	8000ad4 <__aeabi_dmul+0x180>
 8000ad2:	e0d7      	b.n	8000c84 <__aeabi_dmul+0x330>
 8000ad4:	9b00      	ldr	r3, [sp, #0]
 8000ad6:	46a2      	mov	sl, r4
 8000ad8:	469b      	mov	fp, r3
 8000ada:	4681      	mov	r9, r0
 8000adc:	9602      	str	r6, [sp, #8]
 8000ade:	e7bf      	b.n	8000a60 <__aeabi_dmul+0x10c>
 8000ae0:	0023      	movs	r3, r4
 8000ae2:	4333      	orrs	r3, r6
 8000ae4:	d100      	bne.n	8000ae8 <__aeabi_dmul+0x194>
 8000ae6:	e07f      	b.n	8000be8 <__aeabi_dmul+0x294>
 8000ae8:	2c00      	cmp	r4, #0
 8000aea:	d100      	bne.n	8000aee <__aeabi_dmul+0x19a>
 8000aec:	e1ad      	b.n	8000e4a <__aeabi_dmul+0x4f6>
 8000aee:	0020      	movs	r0, r4
 8000af0:	f000 fa62 	bl	8000fb8 <__clzsi2>
 8000af4:	0002      	movs	r2, r0
 8000af6:	0003      	movs	r3, r0
 8000af8:	3a0b      	subs	r2, #11
 8000afa:	201d      	movs	r0, #29
 8000afc:	0019      	movs	r1, r3
 8000afe:	1a82      	subs	r2, r0, r2
 8000b00:	0030      	movs	r0, r6
 8000b02:	3908      	subs	r1, #8
 8000b04:	40d0      	lsrs	r0, r2
 8000b06:	408c      	lsls	r4, r1
 8000b08:	4304      	orrs	r4, r0
 8000b0a:	0030      	movs	r0, r6
 8000b0c:	4088      	lsls	r0, r1
 8000b0e:	4a5b      	ldr	r2, [pc, #364]	@ (8000c7c <__aeabi_dmul+0x328>)
 8000b10:	1aeb      	subs	r3, r5, r3
 8000b12:	4694      	mov	ip, r2
 8000b14:	4463      	add	r3, ip
 8000b16:	1c5a      	adds	r2, r3, #1
 8000b18:	9201      	str	r2, [sp, #4]
 8000b1a:	4642      	mov	r2, r8
 8000b1c:	2600      	movs	r6, #0
 8000b1e:	2a0a      	cmp	r2, #10
 8000b20:	dc00      	bgt.n	8000b24 <__aeabi_dmul+0x1d0>
 8000b22:	e75a      	b.n	80009da <__aeabi_dmul+0x86>
 8000b24:	e79c      	b.n	8000a60 <__aeabi_dmul+0x10c>
 8000b26:	4653      	mov	r3, sl
 8000b28:	4303      	orrs	r3, r0
 8000b2a:	4699      	mov	r9, r3
 8000b2c:	d054      	beq.n	8000bd8 <__aeabi_dmul+0x284>
 8000b2e:	4653      	mov	r3, sl
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d100      	bne.n	8000b36 <__aeabi_dmul+0x1e2>
 8000b34:	e177      	b.n	8000e26 <__aeabi_dmul+0x4d2>
 8000b36:	4650      	mov	r0, sl
 8000b38:	f000 fa3e 	bl	8000fb8 <__clzsi2>
 8000b3c:	230b      	movs	r3, #11
 8000b3e:	425b      	negs	r3, r3
 8000b40:	469c      	mov	ip, r3
 8000b42:	0002      	movs	r2, r0
 8000b44:	4484      	add	ip, r0
 8000b46:	0011      	movs	r1, r2
 8000b48:	4650      	mov	r0, sl
 8000b4a:	3908      	subs	r1, #8
 8000b4c:	4088      	lsls	r0, r1
 8000b4e:	231d      	movs	r3, #29
 8000b50:	4680      	mov	r8, r0
 8000b52:	4660      	mov	r0, ip
 8000b54:	1a1b      	subs	r3, r3, r0
 8000b56:	0020      	movs	r0, r4
 8000b58:	40d8      	lsrs	r0, r3
 8000b5a:	0003      	movs	r3, r0
 8000b5c:	4640      	mov	r0, r8
 8000b5e:	4303      	orrs	r3, r0
 8000b60:	469a      	mov	sl, r3
 8000b62:	0023      	movs	r3, r4
 8000b64:	408b      	lsls	r3, r1
 8000b66:	4699      	mov	r9, r3
 8000b68:	2300      	movs	r3, #0
 8000b6a:	4d44      	ldr	r5, [pc, #272]	@ (8000c7c <__aeabi_dmul+0x328>)
 8000b6c:	4698      	mov	r8, r3
 8000b6e:	1aad      	subs	r5, r5, r2
 8000b70:	9302      	str	r3, [sp, #8]
 8000b72:	e715      	b.n	80009a0 <__aeabi_dmul+0x4c>
 8000b74:	4652      	mov	r2, sl
 8000b76:	4302      	orrs	r2, r0
 8000b78:	4691      	mov	r9, r2
 8000b7a:	d126      	bne.n	8000bca <__aeabi_dmul+0x276>
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	001d      	movs	r5, r3
 8000b80:	2302      	movs	r3, #2
 8000b82:	4692      	mov	sl, r2
 8000b84:	3208      	adds	r2, #8
 8000b86:	4690      	mov	r8, r2
 8000b88:	9302      	str	r3, [sp, #8]
 8000b8a:	e709      	b.n	80009a0 <__aeabi_dmul+0x4c>
 8000b8c:	2400      	movs	r4, #0
 8000b8e:	2200      	movs	r2, #0
 8000b90:	4b35      	ldr	r3, [pc, #212]	@ (8000c68 <__aeabi_dmul+0x314>)
 8000b92:	e735      	b.n	8000a00 <__aeabi_dmul+0xac>
 8000b94:	2300      	movs	r3, #0
 8000b96:	2480      	movs	r4, #128	@ 0x80
 8000b98:	469b      	mov	fp, r3
 8000b9a:	0324      	lsls	r4, r4, #12
 8000b9c:	4b32      	ldr	r3, [pc, #200]	@ (8000c68 <__aeabi_dmul+0x314>)
 8000b9e:	e72f      	b.n	8000a00 <__aeabi_dmul+0xac>
 8000ba0:	2202      	movs	r2, #2
 8000ba2:	4641      	mov	r1, r8
 8000ba4:	4311      	orrs	r1, r2
 8000ba6:	2280      	movs	r2, #128	@ 0x80
 8000ba8:	0112      	lsls	r2, r2, #4
 8000baa:	4694      	mov	ip, r2
 8000bac:	002a      	movs	r2, r5
 8000bae:	4462      	add	r2, ip
 8000bb0:	4688      	mov	r8, r1
 8000bb2:	9201      	str	r2, [sp, #4]
 8000bb4:	290a      	cmp	r1, #10
 8000bb6:	dd00      	ble.n	8000bba <__aeabi_dmul+0x266>
 8000bb8:	e752      	b.n	8000a60 <__aeabi_dmul+0x10c>
 8000bba:	465a      	mov	r2, fp
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	9900      	ldr	r1, [sp, #0]
 8000bc0:	0004      	movs	r4, r0
 8000bc2:	404a      	eors	r2, r1
 8000bc4:	4693      	mov	fp, r2
 8000bc6:	2602      	movs	r6, #2
 8000bc8:	e70b      	b.n	80009e2 <__aeabi_dmul+0x8e>
 8000bca:	220c      	movs	r2, #12
 8000bcc:	001d      	movs	r5, r3
 8000bce:	2303      	movs	r3, #3
 8000bd0:	4681      	mov	r9, r0
 8000bd2:	4690      	mov	r8, r2
 8000bd4:	9302      	str	r3, [sp, #8]
 8000bd6:	e6e3      	b.n	80009a0 <__aeabi_dmul+0x4c>
 8000bd8:	2300      	movs	r3, #0
 8000bda:	469a      	mov	sl, r3
 8000bdc:	3304      	adds	r3, #4
 8000bde:	4698      	mov	r8, r3
 8000be0:	3b03      	subs	r3, #3
 8000be2:	2500      	movs	r5, #0
 8000be4:	9302      	str	r3, [sp, #8]
 8000be6:	e6db      	b.n	80009a0 <__aeabi_dmul+0x4c>
 8000be8:	4642      	mov	r2, r8
 8000bea:	3301      	adds	r3, #1
 8000bec:	431a      	orrs	r2, r3
 8000bee:	002b      	movs	r3, r5
 8000bf0:	4690      	mov	r8, r2
 8000bf2:	1c5a      	adds	r2, r3, #1
 8000bf4:	9201      	str	r2, [sp, #4]
 8000bf6:	4642      	mov	r2, r8
 8000bf8:	2400      	movs	r4, #0
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	2601      	movs	r6, #1
 8000bfe:	2a0a      	cmp	r2, #10
 8000c00:	dc00      	bgt.n	8000c04 <__aeabi_dmul+0x2b0>
 8000c02:	e6ea      	b.n	80009da <__aeabi_dmul+0x86>
 8000c04:	e72c      	b.n	8000a60 <__aeabi_dmul+0x10c>
 8000c06:	2201      	movs	r2, #1
 8000c08:	1ad2      	subs	r2, r2, r3
 8000c0a:	2a38      	cmp	r2, #56	@ 0x38
 8000c0c:	dd00      	ble.n	8000c10 <__aeabi_dmul+0x2bc>
 8000c0e:	e6f4      	b.n	80009fa <__aeabi_dmul+0xa6>
 8000c10:	2a1f      	cmp	r2, #31
 8000c12:	dc00      	bgt.n	8000c16 <__aeabi_dmul+0x2c2>
 8000c14:	e12a      	b.n	8000e6c <__aeabi_dmul+0x518>
 8000c16:	211f      	movs	r1, #31
 8000c18:	4249      	negs	r1, r1
 8000c1a:	1acb      	subs	r3, r1, r3
 8000c1c:	0021      	movs	r1, r4
 8000c1e:	40d9      	lsrs	r1, r3
 8000c20:	000b      	movs	r3, r1
 8000c22:	2a20      	cmp	r2, #32
 8000c24:	d005      	beq.n	8000c32 <__aeabi_dmul+0x2de>
 8000c26:	4a16      	ldr	r2, [pc, #88]	@ (8000c80 <__aeabi_dmul+0x32c>)
 8000c28:	9d01      	ldr	r5, [sp, #4]
 8000c2a:	4694      	mov	ip, r2
 8000c2c:	4465      	add	r5, ip
 8000c2e:	40ac      	lsls	r4, r5
 8000c30:	4320      	orrs	r0, r4
 8000c32:	1e42      	subs	r2, r0, #1
 8000c34:	4190      	sbcs	r0, r2
 8000c36:	4318      	orrs	r0, r3
 8000c38:	2307      	movs	r3, #7
 8000c3a:	0019      	movs	r1, r3
 8000c3c:	2400      	movs	r4, #0
 8000c3e:	4001      	ands	r1, r0
 8000c40:	4203      	tst	r3, r0
 8000c42:	d00c      	beq.n	8000c5e <__aeabi_dmul+0x30a>
 8000c44:	230f      	movs	r3, #15
 8000c46:	4003      	ands	r3, r0
 8000c48:	2b04      	cmp	r3, #4
 8000c4a:	d100      	bne.n	8000c4e <__aeabi_dmul+0x2fa>
 8000c4c:	e140      	b.n	8000ed0 <__aeabi_dmul+0x57c>
 8000c4e:	1d03      	adds	r3, r0, #4
 8000c50:	4283      	cmp	r3, r0
 8000c52:	41a4      	sbcs	r4, r4
 8000c54:	0018      	movs	r0, r3
 8000c56:	4264      	negs	r4, r4
 8000c58:	0761      	lsls	r1, r4, #29
 8000c5a:	0264      	lsls	r4, r4, #9
 8000c5c:	0b24      	lsrs	r4, r4, #12
 8000c5e:	08c2      	lsrs	r2, r0, #3
 8000c60:	2300      	movs	r3, #0
 8000c62:	430a      	orrs	r2, r1
 8000c64:	e6cc      	b.n	8000a00 <__aeabi_dmul+0xac>
 8000c66:	46c0      	nop			@ (mov r8, r8)
 8000c68:	000007ff 	.word	0x000007ff
 8000c6c:	fffffc01 	.word	0xfffffc01
 8000c70:	000003ff 	.word	0x000003ff
 8000c74:	feffffff 	.word	0xfeffffff
 8000c78:	000007fe 	.word	0x000007fe
 8000c7c:	fffffc0d 	.word	0xfffffc0d
 8000c80:	0000043e 	.word	0x0000043e
 8000c84:	4649      	mov	r1, r9
 8000c86:	464a      	mov	r2, r9
 8000c88:	0409      	lsls	r1, r1, #16
 8000c8a:	0c09      	lsrs	r1, r1, #16
 8000c8c:	000d      	movs	r5, r1
 8000c8e:	0c16      	lsrs	r6, r2, #16
 8000c90:	0c02      	lsrs	r2, r0, #16
 8000c92:	0400      	lsls	r0, r0, #16
 8000c94:	0c00      	lsrs	r0, r0, #16
 8000c96:	4345      	muls	r5, r0
 8000c98:	46ac      	mov	ip, r5
 8000c9a:	0005      	movs	r5, r0
 8000c9c:	4375      	muls	r5, r6
 8000c9e:	46a8      	mov	r8, r5
 8000ca0:	0015      	movs	r5, r2
 8000ca2:	000f      	movs	r7, r1
 8000ca4:	4375      	muls	r5, r6
 8000ca6:	9200      	str	r2, [sp, #0]
 8000ca8:	9502      	str	r5, [sp, #8]
 8000caa:	002a      	movs	r2, r5
 8000cac:	9d00      	ldr	r5, [sp, #0]
 8000cae:	436f      	muls	r7, r5
 8000cb0:	4665      	mov	r5, ip
 8000cb2:	0c2d      	lsrs	r5, r5, #16
 8000cb4:	46a9      	mov	r9, r5
 8000cb6:	4447      	add	r7, r8
 8000cb8:	444f      	add	r7, r9
 8000cba:	45b8      	cmp	r8, r7
 8000cbc:	d905      	bls.n	8000cca <__aeabi_dmul+0x376>
 8000cbe:	0015      	movs	r5, r2
 8000cc0:	2280      	movs	r2, #128	@ 0x80
 8000cc2:	0252      	lsls	r2, r2, #9
 8000cc4:	4690      	mov	r8, r2
 8000cc6:	4445      	add	r5, r8
 8000cc8:	9502      	str	r5, [sp, #8]
 8000cca:	0c3d      	lsrs	r5, r7, #16
 8000ccc:	9503      	str	r5, [sp, #12]
 8000cce:	4665      	mov	r5, ip
 8000cd0:	042d      	lsls	r5, r5, #16
 8000cd2:	043f      	lsls	r7, r7, #16
 8000cd4:	0c2d      	lsrs	r5, r5, #16
 8000cd6:	46ac      	mov	ip, r5
 8000cd8:	003d      	movs	r5, r7
 8000cda:	4465      	add	r5, ip
 8000cdc:	9504      	str	r5, [sp, #16]
 8000cde:	0c25      	lsrs	r5, r4, #16
 8000ce0:	0424      	lsls	r4, r4, #16
 8000ce2:	0c24      	lsrs	r4, r4, #16
 8000ce4:	46ac      	mov	ip, r5
 8000ce6:	0025      	movs	r5, r4
 8000ce8:	4375      	muls	r5, r6
 8000cea:	46a8      	mov	r8, r5
 8000cec:	4665      	mov	r5, ip
 8000cee:	000f      	movs	r7, r1
 8000cf0:	4369      	muls	r1, r5
 8000cf2:	4441      	add	r1, r8
 8000cf4:	4689      	mov	r9, r1
 8000cf6:	4367      	muls	r7, r4
 8000cf8:	0c39      	lsrs	r1, r7, #16
 8000cfa:	4449      	add	r1, r9
 8000cfc:	436e      	muls	r6, r5
 8000cfe:	4588      	cmp	r8, r1
 8000d00:	d903      	bls.n	8000d0a <__aeabi_dmul+0x3b6>
 8000d02:	2280      	movs	r2, #128	@ 0x80
 8000d04:	0252      	lsls	r2, r2, #9
 8000d06:	4690      	mov	r8, r2
 8000d08:	4446      	add	r6, r8
 8000d0a:	0c0d      	lsrs	r5, r1, #16
 8000d0c:	46a8      	mov	r8, r5
 8000d0e:	0035      	movs	r5, r6
 8000d10:	4445      	add	r5, r8
 8000d12:	9505      	str	r5, [sp, #20]
 8000d14:	9d03      	ldr	r5, [sp, #12]
 8000d16:	043f      	lsls	r7, r7, #16
 8000d18:	46a8      	mov	r8, r5
 8000d1a:	0c3f      	lsrs	r7, r7, #16
 8000d1c:	0409      	lsls	r1, r1, #16
 8000d1e:	19c9      	adds	r1, r1, r7
 8000d20:	4488      	add	r8, r1
 8000d22:	4645      	mov	r5, r8
 8000d24:	9503      	str	r5, [sp, #12]
 8000d26:	4655      	mov	r5, sl
 8000d28:	042e      	lsls	r6, r5, #16
 8000d2a:	0c36      	lsrs	r6, r6, #16
 8000d2c:	0c2f      	lsrs	r7, r5, #16
 8000d2e:	0035      	movs	r5, r6
 8000d30:	4345      	muls	r5, r0
 8000d32:	4378      	muls	r0, r7
 8000d34:	4681      	mov	r9, r0
 8000d36:	0038      	movs	r0, r7
 8000d38:	46a8      	mov	r8, r5
 8000d3a:	0c2d      	lsrs	r5, r5, #16
 8000d3c:	46aa      	mov	sl, r5
 8000d3e:	9a00      	ldr	r2, [sp, #0]
 8000d40:	4350      	muls	r0, r2
 8000d42:	4372      	muls	r2, r6
 8000d44:	444a      	add	r2, r9
 8000d46:	4452      	add	r2, sl
 8000d48:	4591      	cmp	r9, r2
 8000d4a:	d903      	bls.n	8000d54 <__aeabi_dmul+0x400>
 8000d4c:	2580      	movs	r5, #128	@ 0x80
 8000d4e:	026d      	lsls	r5, r5, #9
 8000d50:	46a9      	mov	r9, r5
 8000d52:	4448      	add	r0, r9
 8000d54:	0c15      	lsrs	r5, r2, #16
 8000d56:	46a9      	mov	r9, r5
 8000d58:	4645      	mov	r5, r8
 8000d5a:	042d      	lsls	r5, r5, #16
 8000d5c:	0c2d      	lsrs	r5, r5, #16
 8000d5e:	46a8      	mov	r8, r5
 8000d60:	4665      	mov	r5, ip
 8000d62:	437d      	muls	r5, r7
 8000d64:	0412      	lsls	r2, r2, #16
 8000d66:	4448      	add	r0, r9
 8000d68:	4490      	add	r8, r2
 8000d6a:	46a9      	mov	r9, r5
 8000d6c:	0032      	movs	r2, r6
 8000d6e:	4665      	mov	r5, ip
 8000d70:	4362      	muls	r2, r4
 8000d72:	436e      	muls	r6, r5
 8000d74:	437c      	muls	r4, r7
 8000d76:	0c17      	lsrs	r7, r2, #16
 8000d78:	1936      	adds	r6, r6, r4
 8000d7a:	19bf      	adds	r7, r7, r6
 8000d7c:	42bc      	cmp	r4, r7
 8000d7e:	d903      	bls.n	8000d88 <__aeabi_dmul+0x434>
 8000d80:	2480      	movs	r4, #128	@ 0x80
 8000d82:	0264      	lsls	r4, r4, #9
 8000d84:	46a4      	mov	ip, r4
 8000d86:	44e1      	add	r9, ip
 8000d88:	9c02      	ldr	r4, [sp, #8]
 8000d8a:	9e03      	ldr	r6, [sp, #12]
 8000d8c:	46a4      	mov	ip, r4
 8000d8e:	9d05      	ldr	r5, [sp, #20]
 8000d90:	4466      	add	r6, ip
 8000d92:	428e      	cmp	r6, r1
 8000d94:	4189      	sbcs	r1, r1
 8000d96:	46ac      	mov	ip, r5
 8000d98:	0412      	lsls	r2, r2, #16
 8000d9a:	043c      	lsls	r4, r7, #16
 8000d9c:	0c12      	lsrs	r2, r2, #16
 8000d9e:	18a2      	adds	r2, r4, r2
 8000da0:	4462      	add	r2, ip
 8000da2:	4249      	negs	r1, r1
 8000da4:	1854      	adds	r4, r2, r1
 8000da6:	4446      	add	r6, r8
 8000da8:	46a4      	mov	ip, r4
 8000daa:	4546      	cmp	r6, r8
 8000dac:	41a4      	sbcs	r4, r4
 8000dae:	4682      	mov	sl, r0
 8000db0:	4264      	negs	r4, r4
 8000db2:	46a0      	mov	r8, r4
 8000db4:	42aa      	cmp	r2, r5
 8000db6:	4192      	sbcs	r2, r2
 8000db8:	458c      	cmp	ip, r1
 8000dba:	4189      	sbcs	r1, r1
 8000dbc:	44e2      	add	sl, ip
 8000dbe:	44d0      	add	r8, sl
 8000dc0:	4249      	negs	r1, r1
 8000dc2:	4252      	negs	r2, r2
 8000dc4:	430a      	orrs	r2, r1
 8000dc6:	45a0      	cmp	r8, r4
 8000dc8:	41a4      	sbcs	r4, r4
 8000dca:	4582      	cmp	sl, r0
 8000dcc:	4189      	sbcs	r1, r1
 8000dce:	4264      	negs	r4, r4
 8000dd0:	4249      	negs	r1, r1
 8000dd2:	430c      	orrs	r4, r1
 8000dd4:	4641      	mov	r1, r8
 8000dd6:	0c3f      	lsrs	r7, r7, #16
 8000dd8:	19d2      	adds	r2, r2, r7
 8000dda:	1912      	adds	r2, r2, r4
 8000ddc:	0dcc      	lsrs	r4, r1, #23
 8000dde:	9904      	ldr	r1, [sp, #16]
 8000de0:	0270      	lsls	r0, r6, #9
 8000de2:	4308      	orrs	r0, r1
 8000de4:	1e41      	subs	r1, r0, #1
 8000de6:	4188      	sbcs	r0, r1
 8000de8:	4641      	mov	r1, r8
 8000dea:	444a      	add	r2, r9
 8000dec:	0df6      	lsrs	r6, r6, #23
 8000dee:	0252      	lsls	r2, r2, #9
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0249      	lsls	r1, r1, #9
 8000df4:	4314      	orrs	r4, r2
 8000df6:	4308      	orrs	r0, r1
 8000df8:	01d2      	lsls	r2, r2, #7
 8000dfa:	d535      	bpl.n	8000e68 <__aeabi_dmul+0x514>
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	0843      	lsrs	r3, r0, #1
 8000e00:	4002      	ands	r2, r0
 8000e02:	4313      	orrs	r3, r2
 8000e04:	07e0      	lsls	r0, r4, #31
 8000e06:	4318      	orrs	r0, r3
 8000e08:	0864      	lsrs	r4, r4, #1
 8000e0a:	e634      	b.n	8000a76 <__aeabi_dmul+0x122>
 8000e0c:	9b00      	ldr	r3, [sp, #0]
 8000e0e:	46a2      	mov	sl, r4
 8000e10:	469b      	mov	fp, r3
 8000e12:	4681      	mov	r9, r0
 8000e14:	2480      	movs	r4, #128	@ 0x80
 8000e16:	4653      	mov	r3, sl
 8000e18:	0324      	lsls	r4, r4, #12
 8000e1a:	431c      	orrs	r4, r3
 8000e1c:	0324      	lsls	r4, r4, #12
 8000e1e:	464a      	mov	r2, r9
 8000e20:	4b2e      	ldr	r3, [pc, #184]	@ (8000edc <__aeabi_dmul+0x588>)
 8000e22:	0b24      	lsrs	r4, r4, #12
 8000e24:	e5ec      	b.n	8000a00 <__aeabi_dmul+0xac>
 8000e26:	f000 f8c7 	bl	8000fb8 <__clzsi2>
 8000e2a:	2315      	movs	r3, #21
 8000e2c:	469c      	mov	ip, r3
 8000e2e:	4484      	add	ip, r0
 8000e30:	0002      	movs	r2, r0
 8000e32:	4663      	mov	r3, ip
 8000e34:	3220      	adds	r2, #32
 8000e36:	2b1c      	cmp	r3, #28
 8000e38:	dc00      	bgt.n	8000e3c <__aeabi_dmul+0x4e8>
 8000e3a:	e684      	b.n	8000b46 <__aeabi_dmul+0x1f2>
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	4699      	mov	r9, r3
 8000e40:	0023      	movs	r3, r4
 8000e42:	3808      	subs	r0, #8
 8000e44:	4083      	lsls	r3, r0
 8000e46:	469a      	mov	sl, r3
 8000e48:	e68e      	b.n	8000b68 <__aeabi_dmul+0x214>
 8000e4a:	f000 f8b5 	bl	8000fb8 <__clzsi2>
 8000e4e:	0002      	movs	r2, r0
 8000e50:	0003      	movs	r3, r0
 8000e52:	3215      	adds	r2, #21
 8000e54:	3320      	adds	r3, #32
 8000e56:	2a1c      	cmp	r2, #28
 8000e58:	dc00      	bgt.n	8000e5c <__aeabi_dmul+0x508>
 8000e5a:	e64e      	b.n	8000afa <__aeabi_dmul+0x1a6>
 8000e5c:	0002      	movs	r2, r0
 8000e5e:	0034      	movs	r4, r6
 8000e60:	3a08      	subs	r2, #8
 8000e62:	2000      	movs	r0, #0
 8000e64:	4094      	lsls	r4, r2
 8000e66:	e652      	b.n	8000b0e <__aeabi_dmul+0x1ba>
 8000e68:	9301      	str	r3, [sp, #4]
 8000e6a:	e604      	b.n	8000a76 <__aeabi_dmul+0x122>
 8000e6c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ee0 <__aeabi_dmul+0x58c>)
 8000e6e:	0021      	movs	r1, r4
 8000e70:	469c      	mov	ip, r3
 8000e72:	0003      	movs	r3, r0
 8000e74:	9d01      	ldr	r5, [sp, #4]
 8000e76:	40d3      	lsrs	r3, r2
 8000e78:	4465      	add	r5, ip
 8000e7a:	40a9      	lsls	r1, r5
 8000e7c:	4319      	orrs	r1, r3
 8000e7e:	0003      	movs	r3, r0
 8000e80:	40ab      	lsls	r3, r5
 8000e82:	1e58      	subs	r0, r3, #1
 8000e84:	4183      	sbcs	r3, r0
 8000e86:	4319      	orrs	r1, r3
 8000e88:	0008      	movs	r0, r1
 8000e8a:	40d4      	lsrs	r4, r2
 8000e8c:	074b      	lsls	r3, r1, #29
 8000e8e:	d009      	beq.n	8000ea4 <__aeabi_dmul+0x550>
 8000e90:	230f      	movs	r3, #15
 8000e92:	400b      	ands	r3, r1
 8000e94:	2b04      	cmp	r3, #4
 8000e96:	d005      	beq.n	8000ea4 <__aeabi_dmul+0x550>
 8000e98:	1d0b      	adds	r3, r1, #4
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	4180      	sbcs	r0, r0
 8000e9e:	4240      	negs	r0, r0
 8000ea0:	1824      	adds	r4, r4, r0
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	0223      	lsls	r3, r4, #8
 8000ea6:	d400      	bmi.n	8000eaa <__aeabi_dmul+0x556>
 8000ea8:	e6d6      	b.n	8000c58 <__aeabi_dmul+0x304>
 8000eaa:	2301      	movs	r3, #1
 8000eac:	2400      	movs	r4, #0
 8000eae:	2200      	movs	r2, #0
 8000eb0:	e5a6      	b.n	8000a00 <__aeabi_dmul+0xac>
 8000eb2:	290f      	cmp	r1, #15
 8000eb4:	d1aa      	bne.n	8000e0c <__aeabi_dmul+0x4b8>
 8000eb6:	2380      	movs	r3, #128	@ 0x80
 8000eb8:	4652      	mov	r2, sl
 8000eba:	031b      	lsls	r3, r3, #12
 8000ebc:	421a      	tst	r2, r3
 8000ebe:	d0a9      	beq.n	8000e14 <__aeabi_dmul+0x4c0>
 8000ec0:	421c      	tst	r4, r3
 8000ec2:	d1a7      	bne.n	8000e14 <__aeabi_dmul+0x4c0>
 8000ec4:	431c      	orrs	r4, r3
 8000ec6:	9b00      	ldr	r3, [sp, #0]
 8000ec8:	0002      	movs	r2, r0
 8000eca:	469b      	mov	fp, r3
 8000ecc:	4b03      	ldr	r3, [pc, #12]	@ (8000edc <__aeabi_dmul+0x588>)
 8000ece:	e597      	b.n	8000a00 <__aeabi_dmul+0xac>
 8000ed0:	2400      	movs	r4, #0
 8000ed2:	e6c1      	b.n	8000c58 <__aeabi_dmul+0x304>
 8000ed4:	2400      	movs	r4, #0
 8000ed6:	4b01      	ldr	r3, [pc, #4]	@ (8000edc <__aeabi_dmul+0x588>)
 8000ed8:	0022      	movs	r2, r4
 8000eda:	e591      	b.n	8000a00 <__aeabi_dmul+0xac>
 8000edc:	000007ff 	.word	0x000007ff
 8000ee0:	0000041e 	.word	0x0000041e

08000ee4 <__aeabi_d2iz>:
 8000ee4:	000b      	movs	r3, r1
 8000ee6:	0002      	movs	r2, r0
 8000ee8:	b570      	push	{r4, r5, r6, lr}
 8000eea:	4d16      	ldr	r5, [pc, #88]	@ (8000f44 <__aeabi_d2iz+0x60>)
 8000eec:	030c      	lsls	r4, r1, #12
 8000eee:	b082      	sub	sp, #8
 8000ef0:	0049      	lsls	r1, r1, #1
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	9200      	str	r2, [sp, #0]
 8000ef6:	9301      	str	r3, [sp, #4]
 8000ef8:	0b24      	lsrs	r4, r4, #12
 8000efa:	0d49      	lsrs	r1, r1, #21
 8000efc:	0fde      	lsrs	r6, r3, #31
 8000efe:	42a9      	cmp	r1, r5
 8000f00:	dd04      	ble.n	8000f0c <__aeabi_d2iz+0x28>
 8000f02:	4811      	ldr	r0, [pc, #68]	@ (8000f48 <__aeabi_d2iz+0x64>)
 8000f04:	4281      	cmp	r1, r0
 8000f06:	dd03      	ble.n	8000f10 <__aeabi_d2iz+0x2c>
 8000f08:	4b10      	ldr	r3, [pc, #64]	@ (8000f4c <__aeabi_d2iz+0x68>)
 8000f0a:	18f0      	adds	r0, r6, r3
 8000f0c:	b002      	add	sp, #8
 8000f0e:	bd70      	pop	{r4, r5, r6, pc}
 8000f10:	2080      	movs	r0, #128	@ 0x80
 8000f12:	0340      	lsls	r0, r0, #13
 8000f14:	4320      	orrs	r0, r4
 8000f16:	4c0e      	ldr	r4, [pc, #56]	@ (8000f50 <__aeabi_d2iz+0x6c>)
 8000f18:	1a64      	subs	r4, r4, r1
 8000f1a:	2c1f      	cmp	r4, #31
 8000f1c:	dd08      	ble.n	8000f30 <__aeabi_d2iz+0x4c>
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f54 <__aeabi_d2iz+0x70>)
 8000f20:	1a5b      	subs	r3, r3, r1
 8000f22:	40d8      	lsrs	r0, r3
 8000f24:	0003      	movs	r3, r0
 8000f26:	4258      	negs	r0, r3
 8000f28:	2e00      	cmp	r6, #0
 8000f2a:	d1ef      	bne.n	8000f0c <__aeabi_d2iz+0x28>
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	e7ed      	b.n	8000f0c <__aeabi_d2iz+0x28>
 8000f30:	4b09      	ldr	r3, [pc, #36]	@ (8000f58 <__aeabi_d2iz+0x74>)
 8000f32:	9a00      	ldr	r2, [sp, #0]
 8000f34:	469c      	mov	ip, r3
 8000f36:	0003      	movs	r3, r0
 8000f38:	4461      	add	r1, ip
 8000f3a:	408b      	lsls	r3, r1
 8000f3c:	40e2      	lsrs	r2, r4
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	e7f1      	b.n	8000f26 <__aeabi_d2iz+0x42>
 8000f42:	46c0      	nop			@ (mov r8, r8)
 8000f44:	000003fe 	.word	0x000003fe
 8000f48:	0000041d 	.word	0x0000041d
 8000f4c:	7fffffff 	.word	0x7fffffff
 8000f50:	00000433 	.word	0x00000433
 8000f54:	00000413 	.word	0x00000413
 8000f58:	fffffbed 	.word	0xfffffbed

08000f5c <__aeabi_i2d>:
 8000f5c:	b570      	push	{r4, r5, r6, lr}
 8000f5e:	2800      	cmp	r0, #0
 8000f60:	d016      	beq.n	8000f90 <__aeabi_i2d+0x34>
 8000f62:	17c3      	asrs	r3, r0, #31
 8000f64:	18c5      	adds	r5, r0, r3
 8000f66:	405d      	eors	r5, r3
 8000f68:	0fc4      	lsrs	r4, r0, #31
 8000f6a:	0028      	movs	r0, r5
 8000f6c:	f000 f824 	bl	8000fb8 <__clzsi2>
 8000f70:	4b10      	ldr	r3, [pc, #64]	@ (8000fb4 <__aeabi_i2d+0x58>)
 8000f72:	1a1b      	subs	r3, r3, r0
 8000f74:	055b      	lsls	r3, r3, #21
 8000f76:	0d5b      	lsrs	r3, r3, #21
 8000f78:	280a      	cmp	r0, #10
 8000f7a:	dc14      	bgt.n	8000fa6 <__aeabi_i2d+0x4a>
 8000f7c:	0002      	movs	r2, r0
 8000f7e:	002e      	movs	r6, r5
 8000f80:	3215      	adds	r2, #21
 8000f82:	4096      	lsls	r6, r2
 8000f84:	220b      	movs	r2, #11
 8000f86:	1a12      	subs	r2, r2, r0
 8000f88:	40d5      	lsrs	r5, r2
 8000f8a:	032d      	lsls	r5, r5, #12
 8000f8c:	0b2d      	lsrs	r5, r5, #12
 8000f8e:	e003      	b.n	8000f98 <__aeabi_i2d+0x3c>
 8000f90:	2400      	movs	r4, #0
 8000f92:	2300      	movs	r3, #0
 8000f94:	2500      	movs	r5, #0
 8000f96:	2600      	movs	r6, #0
 8000f98:	051b      	lsls	r3, r3, #20
 8000f9a:	432b      	orrs	r3, r5
 8000f9c:	07e4      	lsls	r4, r4, #31
 8000f9e:	4323      	orrs	r3, r4
 8000fa0:	0030      	movs	r0, r6
 8000fa2:	0019      	movs	r1, r3
 8000fa4:	bd70      	pop	{r4, r5, r6, pc}
 8000fa6:	380b      	subs	r0, #11
 8000fa8:	4085      	lsls	r5, r0
 8000faa:	032d      	lsls	r5, r5, #12
 8000fac:	2600      	movs	r6, #0
 8000fae:	0b2d      	lsrs	r5, r5, #12
 8000fb0:	e7f2      	b.n	8000f98 <__aeabi_i2d+0x3c>
 8000fb2:	46c0      	nop			@ (mov r8, r8)
 8000fb4:	0000041e 	.word	0x0000041e

08000fb8 <__clzsi2>:
 8000fb8:	211c      	movs	r1, #28
 8000fba:	2301      	movs	r3, #1
 8000fbc:	041b      	lsls	r3, r3, #16
 8000fbe:	4298      	cmp	r0, r3
 8000fc0:	d301      	bcc.n	8000fc6 <__clzsi2+0xe>
 8000fc2:	0c00      	lsrs	r0, r0, #16
 8000fc4:	3910      	subs	r1, #16
 8000fc6:	0a1b      	lsrs	r3, r3, #8
 8000fc8:	4298      	cmp	r0, r3
 8000fca:	d301      	bcc.n	8000fd0 <__clzsi2+0x18>
 8000fcc:	0a00      	lsrs	r0, r0, #8
 8000fce:	3908      	subs	r1, #8
 8000fd0:	091b      	lsrs	r3, r3, #4
 8000fd2:	4298      	cmp	r0, r3
 8000fd4:	d301      	bcc.n	8000fda <__clzsi2+0x22>
 8000fd6:	0900      	lsrs	r0, r0, #4
 8000fd8:	3904      	subs	r1, #4
 8000fda:	a202      	add	r2, pc, #8	@ (adr r2, 8000fe4 <__clzsi2+0x2c>)
 8000fdc:	5c10      	ldrb	r0, [r2, r0]
 8000fde:	1840      	adds	r0, r0, r1
 8000fe0:	4770      	bx	lr
 8000fe2:	46c0      	nop			@ (mov r8, r8)
 8000fe4:	02020304 	.word	0x02020304
 8000fe8:	01010101 	.word	0x01010101
	...

08000ff4 <HAL_GPIO_EXTI_Rising_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// EXTI Line9 External Interrupt ISR Handler CallBackFun
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	0002      	movs	r2, r0
 8000ffc:	1dbb      	adds	r3, r7, #6
 8000ffe:	801a      	strh	r2, [r3, #0]

	currentMillis = HAL_GetTick(); // debounce
 8001000:	f000 ff40 	bl	8001e84 <HAL_GetTick>
 8001004:	0002      	movs	r2, r0
 8001006:	4b0c      	ldr	r3, [pc, #48]	@ (8001038 <HAL_GPIO_EXTI_Rising_Callback+0x44>)
 8001008:	601a      	str	r2, [r3, #0]
//
	if (GPIO_Pin == GPIO_PIN_9 && (currentMillis - previousMillis > 20)) { // 20 ms debounce
 800100a:	1dbb      	adds	r3, r7, #6
 800100c:	881a      	ldrh	r2, [r3, #0]
 800100e:	2380      	movs	r3, #128	@ 0x80
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	429a      	cmp	r2, r3
 8001014:	d10c      	bne.n	8001030 <HAL_GPIO_EXTI_Rising_Callback+0x3c>
 8001016:	4b08      	ldr	r3, [pc, #32]	@ (8001038 <HAL_GPIO_EXTI_Rising_Callback+0x44>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	4b08      	ldr	r3, [pc, #32]	@ (800103c <HAL_GPIO_EXTI_Rising_Callback+0x48>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	2b14      	cmp	r3, #20
 8001022:	d905      	bls.n	8001030 <HAL_GPIO_EXTI_Rising_Callback+0x3c>
		decay_multiplier += 1;
 8001024:	4b06      	ldr	r3, [pc, #24]	@ (8001040 <HAL_GPIO_EXTI_Rising_Callback+0x4c>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	3301      	adds	r3, #1
 800102a:	b2da      	uxtb	r2, r3
 800102c:	4b04      	ldr	r3, [pc, #16]	@ (8001040 <HAL_GPIO_EXTI_Rising_Callback+0x4c>)
 800102e:	701a      	strb	r2, [r3, #0]
////
//	if (mode_sel > MODES) { // see defines
//		mode_sel = 1;
//
//	}
}
 8001030:	46c0      	nop			@ (mov r8, r8)
 8001032:	46bd      	mov	sp, r7
 8001034:	b002      	add	sp, #8
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20001244 	.word	0x20001244
 800103c:	20001240 	.word	0x20001240
 8001040:	2000123c 	.word	0x2000123c

08001044 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001044:	b590      	push	{r4, r7, lr}
 8001046:	b08d      	sub	sp, #52	@ 0x34
 8001048:	af00      	add	r7, sp, #0
 800104a:	2340      	movs	r3, #64	@ 0x40
 800104c:	18fb      	adds	r3, r7, r3
 800104e:	607b      	str	r3, [r7, #4]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001050:	f000 fe9c 	bl	8001d8c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001054:	f000 f980 	bl	8001358 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001058:	f000 fbc6 	bl	80017e8 <MX_GPIO_Init>
	MX_DMA_Init();
 800105c:	f000 fb9e 	bl	800179c <MX_DMA_Init>
	MX_TIM1_Init();
 8001060:	f000 fa58 	bl	8001514 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001064:	f000 fb20 	bl	80016a8 <MX_TIM2_Init>
	MX_ADC1_Init();
 8001068:	f000 f9d4 	bl	8001414 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */

////PWM test
//	TIM1->CCR1 = 128;
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800106c:	4b63      	ldr	r3, [pc, #396]	@ (80011fc <main+0x1b8>)
 800106e:	2100      	movs	r1, #0
 8001070:	0018      	movs	r0, r3
 8001072:	f003 fca9 	bl	80049c8 <HAL_TIM_PWM_Start>
	HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1);
 8001076:	4b62      	ldr	r3, [pc, #392]	@ (8001200 <main+0x1bc>)
 8001078:	2100      	movs	r1, #0
 800107a:	0018      	movs	r0, r3
 800107c:	f003 fb66 	bl	800474c <HAL_TIM_OC_Start>
	HAL_DMA_Start_IT(&hdma_tim2_ch1, (uint32_t) sine, DstAddress, NS);
 8001080:	4960      	ldr	r1, [pc, #384]	@ (8001204 <main+0x1c0>)
 8001082:	4b61      	ldr	r3, [pc, #388]	@ (8001208 <main+0x1c4>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	2380      	movs	r3, #128	@ 0x80
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	4860      	ldr	r0, [pc, #384]	@ (800120c <main+0x1c8>)
 800108c:	f002 f8e8 	bl	8003260 <HAL_DMA_Start_IT>
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 8001090:	4b5b      	ldr	r3, [pc, #364]	@ (8001200 <main+0x1bc>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	68da      	ldr	r2, [r3, #12]
 8001096:	4b5a      	ldr	r3, [pc, #360]	@ (8001200 <main+0x1bc>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2180      	movs	r1, #128	@ 0x80
 800109c:	0089      	lsls	r1, r1, #2
 800109e:	430a      	orrs	r2, r1
 80010a0:	60da      	str	r2, [r3, #12]
	// Calibrate The ADC On Power-Up For Better Accuracy
	HAL_ADCEx_Calibration_Start(&hadc1);
 80010a2:	4b5b      	ldr	r3, [pc, #364]	@ (8001210 <main+0x1cc>)
 80010a4:	0018      	movs	r0, r3
 80010a6:	f001 fe77 	bl	8002d98 <HAL_ADCEx_Calibration_Start>

	//set up variables
	memcpy(wave_LUT, sine, sizeof(sine));
 80010aa:	4a5a      	ldr	r2, [pc, #360]	@ (8001214 <main+0x1d0>)
 80010ac:	4b55      	ldr	r3, [pc, #340]	@ (8001204 <main+0x1c0>)
 80010ae:	0010      	movs	r0, r2
 80010b0:	0019      	movs	r1, r3
 80010b2:	2380      	movs	r3, #128	@ 0x80
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	001a      	movs	r2, r3
 80010b8:	f004 fe13 	bl	8005ce2 <memcpy>
	srand(time(NULL));
 80010bc:	2000      	movs	r0, #0
 80010be:	f004 fdb5 	bl	8005c2c <time>
 80010c2:	0003      	movs	r3, r0
 80010c4:	0018      	movs	r0, r3
 80010c6:	f004 fc77 	bl	80059b8 <srand>


	uint32_t random_number = rand();
 80010ca:	f004 fca5 	bl	8005a18 <rand>
 80010ce:	0003      	movs	r3, r0
 80010d0:	623b      	str	r3, [r7, #32]
	uint32_t decay_rate = 1 + random_number%DECAY_RANGE;
 80010d2:	6a3b      	ldr	r3, [r7, #32]
 80010d4:	2114      	movs	r1, #20
 80010d6:	0018      	movs	r0, r3
 80010d8:	f7ff f8a4 	bl	8000224 <__aeabi_uidivmod>
 80010dc:	000b      	movs	r3, r1
 80010de:	3301      	adds	r3, #1
 80010e0:	61fb      	str	r3, [r7, #28]
	uint32_t ctr = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t phase = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t phase_add = 15;
 80010ea:	230f      	movs	r3, #15
 80010ec:	61bb      	str	r3, [r7, #24]
	uint32_t freq = 1000;
 80010ee:	23fa      	movs	r3, #250	@ 0xfa
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t ctr_scale = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
	uint32_t table_lookup = 1000; // renamed
 80010f8:	23fa      	movs	r3, #250	@ 0xfa
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	613b      	str	r3, [r7, #16]
	uint32_t ad0_bitshift = 1000;
 80010fe:	23fa      	movs	r3, #250	@ 0xfa
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1) {

		if(decay_multiplier > 0){
 8001104:	4b44      	ldr	r3, [pc, #272]	@ (8001218 <main+0x1d4>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d02c      	beq.n	8001166 <main+0x122>
			int rate = decay_rate*decay_multiplier;
 800110c:	4b42      	ldr	r3, [pc, #264]	@ (8001218 <main+0x1d4>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	001a      	movs	r2, r3
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	4353      	muls	r3, r2
 8001116:	60bb      	str	r3, [r7, #8]
			// xor then rot -- goes to noise
//			inc_XOR(tmp_wav_1, sine, NS, rate);
//			rot(tmp_wav, tmp_wav_1, NS, rate);

			// rot then xor -- goes to 0
			rot(tmp_wav_1, sine, NS, rate);
 8001118:	68bc      	ldr	r4, [r7, #8]
 800111a:	2380      	movs	r3, #128	@ 0x80
 800111c:	005a      	lsls	r2, r3, #1
 800111e:	4939      	ldr	r1, [pc, #228]	@ (8001204 <main+0x1c0>)
 8001120:	483e      	ldr	r0, [pc, #248]	@ (800121c <main+0x1d8>)
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	469c      	mov	ip, r3
 8001126:	0023      	movs	r3, r4
 8001128:	f000 f882 	bl	8001230 <rot.0>
			inc_XOR(tmp_wav, tmp_wav_1, NS, rate);
 800112c:	68bc      	ldr	r4, [r7, #8]
 800112e:	2380      	movs	r3, #128	@ 0x80
 8001130:	005a      	lsls	r2, r3, #1
 8001132:	493a      	ldr	r1, [pc, #232]	@ (800121c <main+0x1d8>)
 8001134:	483a      	ldr	r0, [pc, #232]	@ (8001220 <main+0x1dc>)
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	469c      	mov	ip, r3
 800113a:	0023      	movs	r3, r4
 800113c:	f000 f8de 	bl	80012fc <inc_XOR.1>
			//			XOR_func(tmp_wav_1, sine, NS, decay_rate*decay_multiplier);
	//		clipper_func(tmp_wav, sine, NS, decay_rate*decay_multiplier);
//			noise_func(tmp_wav, tmp_wav_1, NS, decay_rate*decay_multiplier);

	//		shuffle_func(tmp_wav, sine, NS, decay_rate*decay_multiplier);
			memcpy(wave_LUT, tmp_wav, sizeof(tmp_wav)); // dest, src, size(src) - acts as a buffer for passing to DMA1
 8001140:	4a34      	ldr	r2, [pc, #208]	@ (8001214 <main+0x1d0>)
 8001142:	4b37      	ldr	r3, [pc, #220]	@ (8001220 <main+0x1dc>)
 8001144:	0010      	movs	r0, r2
 8001146:	0019      	movs	r1, r3
 8001148:	2380      	movs	r3, #128	@ 0x80
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	001a      	movs	r2, r3
 800114e:	f004 fdc8 	bl	8005ce2 <memcpy>
			DMA1_Channel1->CMAR = (uint32_t) wave_LUT; // SrcAddress
 8001152:	4b34      	ldr	r3, [pc, #208]	@ (8001224 <main+0x1e0>)
 8001154:	4a2f      	ldr	r2, [pc, #188]	@ (8001214 <main+0x1d0>)
 8001156:	60da      	str	r2, [r3, #12]

			if (rate > NS-1) decay_multiplier = 0;
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	2bff      	cmp	r3, #255	@ 0xff
 800115c:	dd06      	ble.n	800116c <main+0x128>
 800115e:	4b2e      	ldr	r3, [pc, #184]	@ (8001218 <main+0x1d4>)
 8001160:	2200      	movs	r2, #0
 8001162:	701a      	strb	r2, [r3, #0]
 8001164:	e002      	b.n	800116c <main+0x128>
		}

		else DMA1_Channel1->CMAR = (uint32_t) sine; // SrcAddress
 8001166:	4b2f      	ldr	r3, [pc, #188]	@ (8001224 <main+0x1e0>)
 8001168:	4a26      	ldr	r2, [pc, #152]	@ (8001204 <main+0x1c0>)
 800116a:	60da      	str	r2, [r3, #12]
//		freq = (adcResultsDMA[0] >> 3);

//		if ((adcResultsDMA[1] >> 50) > 10) ctr_scale =
//		else ctr_scale = 1;

		phase_add = (adcResultsDMA[1] >> 6);
 800116c:	4b2e      	ldr	r3, [pc, #184]	@ (8001228 <main+0x1e4>)
 800116e:	885b      	ldrh	r3, [r3, #2]
 8001170:	b29b      	uxth	r3, r3
 8001172:	099b      	lsrs	r3, r3, #6
 8001174:	b29b      	uxth	r3, r3
 8001176:	61bb      	str	r3, [r7, #24]

		ctr_scale = 1;
 8001178:	2301      	movs	r3, #1
 800117a:	617b      	str	r3, [r7, #20]

//		phase_add = 10;
		table_lookup = wave_LUT[phase];
 800117c:	4b25      	ldr	r3, [pc, #148]	@ (8001214 <main+0x1d0>)
 800117e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001180:	0092      	lsls	r2, r2, #2
 8001182:	58d3      	ldr	r3, [r2, r3]
 8001184:	613b      	str	r3, [r7, #16]
		ad0_bitshift = (adcResultsDMA[0] >> 3);
 8001186:	4b28      	ldr	r3, [pc, #160]	@ (8001228 <main+0x1e4>)
 8001188:	881b      	ldrh	r3, [r3, #0]
 800118a:	b29b      	uxth	r3, r3
 800118c:	08db      	lsrs	r3, r3, #3
 800118e:	b29b      	uxth	r3, r3
 8001190:	60fb      	str	r3, [r7, #12]
		freq = ad0_bitshift + (table_lookup) * 2;
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	68fa      	ldr	r2, [r7, #12]
 8001198:	18d3      	adds	r3, r2, r3
 800119a:	627b      	str	r3, [r7, #36]	@ 0x24


		if (freq <= 0) freq = 1;
 800119c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d101      	bne.n	80011a6 <main+0x162>
 80011a2:	2301      	movs	r3, #1
 80011a4:	627b      	str	r3, [r7, #36]	@ 0x24
		TIM2 -> ARR = freq;
 80011a6:	2380      	movs	r3, #128	@ 0x80
 80011a8:	05db      	lsls	r3, r3, #23
 80011aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011ac:	62da      	str	r2, [r3, #44]	@ 0x2c

		ctr += 1;
 80011ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011b0:	3301      	adds	r3, #1
 80011b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if(ctr%ctr_scale == 0){
 80011b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011b6:	6979      	ldr	r1, [r7, #20]
 80011b8:	0018      	movs	r0, r3
 80011ba:	f7ff f833 	bl	8000224 <__aeabi_uidivmod>
 80011be:	1e0b      	subs	r3, r1, #0
 80011c0:	d103      	bne.n	80011ca <main+0x186>
			phase += phase_add;
 80011c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	18d3      	adds	r3, r2, r3
 80011c8:	62bb      	str	r3, [r7, #40]	@ 0x28
		}

		phase = phase%NS;
 80011ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011cc:	22ff      	movs	r2, #255	@ 0xff
 80011ce:	4013      	ands	r3, r2
 80011d0:	62bb      	str	r3, [r7, #40]	@ 0x28
		ctr = ctr%NS;
 80011d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011d4:	22ff      	movs	r2, #255	@ 0xff
 80011d6:	4013      	ands	r3, r2
 80011d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* USER CODE BEGIN 3 */
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcResultsDMA, adcChannelCount);
 80011da:	2302      	movs	r3, #2
 80011dc:	001a      	movs	r2, r3
 80011de:	4912      	ldr	r1, [pc, #72]	@ (8001228 <main+0x1e4>)
 80011e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001210 <main+0x1cc>)
 80011e2:	0018      	movs	r0, r3
 80011e4:	f001 f958 	bl	8002498 <HAL_ADC_Start_DMA>
		while (adcConversionComplete == 0) {
 80011e8:	46c0      	nop			@ (mov r8, r8)
 80011ea:	4b10      	ldr	r3, [pc, #64]	@ (800122c <main+0x1e8>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d0fb      	beq.n	80011ea <main+0x1a6>

		}
		adcConversionComplete = 0;
 80011f2:	4b0e      	ldr	r3, [pc, #56]	@ (800122c <main+0x1e8>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
		if(decay_multiplier > 0){
 80011f8:	e784      	b.n	8001104 <main+0xc0>
 80011fa:	46c0      	nop			@ (mov r8, r8)
 80011fc:	20001148 	.word	0x20001148
 8001200:	20001194 	.word	0x20001194
 8001204:	20000004 	.word	0x20000004
 8001208:	20000000 	.word	0x20000000
 800120c:	200011e0 	.word	0x200011e0
 8001210:	20001088 	.word	0x20001088
 8001214:	20000488 	.word	0x20000488
 8001218:	2000123c 	.word	0x2000123c
 800121c:	20000888 	.word	0x20000888
 8001220:	20000c88 	.word	0x20000c88
 8001224:	40020008 	.word	0x40020008
 8001228:	20001248 	.word	0x20001248
 800122c:	2000124c 	.word	0x2000124c

08001230 <rot.0>:
	void rot(uint32_t dest[], uint32_t src[], uint32_t length, int decay) {
 8001230:	b590      	push	{r4, r7, lr}
 8001232:	b08b      	sub	sp, #44	@ 0x2c
 8001234:	af00      	add	r7, sp, #0
 8001236:	6178      	str	r0, [r7, #20]
 8001238:	6139      	str	r1, [r7, #16]
 800123a:	60fa      	str	r2, [r7, #12]
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	4663      	mov	r3, ip
 8001240:	607b      	str	r3, [r7, #4]
		int decay_adj = round(decay*0.6);
 8001242:	68b8      	ldr	r0, [r7, #8]
 8001244:	f7ff fe8a 	bl	8000f5c <__aeabi_i2d>
 8001248:	4a29      	ldr	r2, [pc, #164]	@ (80012f0 <rot.0+0xc0>)
 800124a:	4b2a      	ldr	r3, [pc, #168]	@ (80012f4 <rot.0+0xc4>)
 800124c:	f7ff fb82 	bl	8000954 <__aeabi_dmul>
 8001250:	0002      	movs	r2, r0
 8001252:	000b      	movs	r3, r1
 8001254:	0010      	movs	r0, r2
 8001256:	0019      	movs	r1, r3
 8001258:	f005 fc2e 	bl	8006ab8 <round>
 800125c:	0002      	movs	r2, r0
 800125e:	000b      	movs	r3, r1
 8001260:	0010      	movs	r0, r2
 8001262:	0019      	movs	r1, r3
 8001264:	f7ff fe3e 	bl	8000ee4 <__aeabi_d2iz>
 8001268:	0003      	movs	r3, r0
 800126a:	627b      	str	r3, [r7, #36]	@ 0x24
		for (int i = 0; i < length; i++) {
 800126c:	2300      	movs	r3, #0
 800126e:	623b      	str	r3, [r7, #32]
 8001270:	e00c      	b.n	800128c <rot.0+0x5c>
			dest[i] = src[i];
 8001272:	6a3b      	ldr	r3, [r7, #32]
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	18d2      	adds	r2, r2, r3
 800127a:	6a3b      	ldr	r3, [r7, #32]
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	6979      	ldr	r1, [r7, #20]
 8001280:	18cb      	adds	r3, r1, r3
 8001282:	6812      	ldr	r2, [r2, #0]
 8001284:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < length; i++) {
 8001286:	6a3b      	ldr	r3, [r7, #32]
 8001288:	3301      	adds	r3, #1
 800128a:	623b      	str	r3, [r7, #32]
 800128c:	6a3b      	ldr	r3, [r7, #32]
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	429a      	cmp	r2, r3
 8001292:	d8ee      	bhi.n	8001272 <rot.0+0x42>
		if(decay_adj > length) decay_adj = length;
 8001294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001296:	68fa      	ldr	r2, [r7, #12]
 8001298:	429a      	cmp	r2, r3
 800129a:	d201      	bcs.n	80012a0 <rot.0+0x70>
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	627b      	str	r3, [r7, #36]	@ 0x24
		for (int i = 0; i < decay_adj; i++)
 80012a0:	2300      	movs	r3, #0
 80012a2:	61fb      	str	r3, [r7, #28]
 80012a4:	e01a      	b.n	80012dc <rot.0+0xac>
			dest[i] = (dest[i] + rand() % 128) % 256;
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	697a      	ldr	r2, [r7, #20]
 80012ac:	18d3      	adds	r3, r2, r3
 80012ae:	681c      	ldr	r4, [r3, #0]
 80012b0:	f004 fbb2 	bl	8005a18 <rand>
 80012b4:	0003      	movs	r3, r0
 80012b6:	4a10      	ldr	r2, [pc, #64]	@ (80012f8 <rot.0+0xc8>)
 80012b8:	4013      	ands	r3, r2
 80012ba:	d504      	bpl.n	80012c6 <rot.0+0x96>
 80012bc:	3b01      	subs	r3, #1
 80012be:	2280      	movs	r2, #128	@ 0x80
 80012c0:	4252      	negs	r2, r2
 80012c2:	4313      	orrs	r3, r2
 80012c4:	3301      	adds	r3, #1
 80012c6:	18e2      	adds	r2, r4, r3
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	6979      	ldr	r1, [r7, #20]
 80012ce:	18cb      	adds	r3, r1, r3
 80012d0:	21ff      	movs	r1, #255	@ 0xff
 80012d2:	400a      	ands	r2, r1
 80012d4:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < decay_adj; i++)
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	3301      	adds	r3, #1
 80012da:	61fb      	str	r3, [r7, #28]
 80012dc:	69fa      	ldr	r2, [r7, #28]
 80012de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e0:	429a      	cmp	r2, r3
 80012e2:	dbe0      	blt.n	80012a6 <rot.0+0x76>
	}
 80012e4:	46c0      	nop			@ (mov r8, r8)
 80012e6:	46c0      	nop			@ (mov r8, r8)
 80012e8:	46bd      	mov	sp, r7
 80012ea:	b00b      	add	sp, #44	@ 0x2c
 80012ec:	bd90      	pop	{r4, r7, pc}
 80012ee:	46c0      	nop			@ (mov r8, r8)
 80012f0:	33333333 	.word	0x33333333
 80012f4:	3fe33333 	.word	0x3fe33333
 80012f8:	8000007f 	.word	0x8000007f

080012fc <inc_XOR.1>:
		void inc_XOR(uint32_t dest[], uint32_t src[], int length, int decay) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b088      	sub	sp, #32
 8001300:	af00      	add	r7, sp, #0
 8001302:	6178      	str	r0, [r7, #20]
 8001304:	6139      	str	r1, [r7, #16]
 8001306:	60fa      	str	r2, [r7, #12]
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	4663      	mov	r3, ip
 800130c:	607b      	str	r3, [r7, #4]
			for (int i = 0; i < length; i++) {
 800130e:	2300      	movs	r3, #0
 8001310:	61fb      	str	r3, [r7, #28]
 8001312:	e018      	b.n	8001346 <inc_XOR.1+0x4a>
				dest[i] = src[i];
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	18d2      	adds	r2, r2, r3
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	6979      	ldr	r1, [r7, #20]
 8001322:	18cb      	adds	r3, r1, r3
 8001324:	6812      	ldr	r2, [r2, #0]
 8001326:	601a      	str	r2, [r3, #0]
				dest[i] |= decay;
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	697a      	ldr	r2, [r7, #20]
 800132e:	18d3      	adds	r3, r2, r3
 8001330:	6819      	ldr	r1, [r3, #0]
 8001332:	68ba      	ldr	r2, [r7, #8]
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	6978      	ldr	r0, [r7, #20]
 800133a:	18c3      	adds	r3, r0, r3
 800133c:	430a      	orrs	r2, r1
 800133e:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < length; i++) {
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	3301      	adds	r3, #1
 8001344:	61fb      	str	r3, [r7, #28]
 8001346:	69fa      	ldr	r2, [r7, #28]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	429a      	cmp	r2, r3
 800134c:	dbe2      	blt.n	8001314 <inc_XOR.1+0x18>
		}
 800134e:	46c0      	nop			@ (mov r8, r8)
 8001350:	46c0      	nop			@ (mov r8, r8)
 8001352:	46bd      	mov	sp, r7
 8001354:	b008      	add	sp, #32
 8001356:	bd80      	pop	{r7, pc}

08001358 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001358:	b590      	push	{r4, r7, lr}
 800135a:	b093      	sub	sp, #76	@ 0x4c
 800135c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800135e:	2410      	movs	r4, #16
 8001360:	193b      	adds	r3, r7, r4
 8001362:	0018      	movs	r0, r3
 8001364:	2338      	movs	r3, #56	@ 0x38
 8001366:	001a      	movs	r2, r3
 8001368:	2100      	movs	r1, #0
 800136a:	f004 fc57 	bl	8005c1c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800136e:	003b      	movs	r3, r7
 8001370:	0018      	movs	r0, r3
 8001372:	2310      	movs	r3, #16
 8001374:	001a      	movs	r2, r3
 8001376:	2100      	movs	r1, #0
 8001378:	f004 fc50 	bl	8005c1c <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800137c:	2380      	movs	r3, #128	@ 0x80
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	0018      	movs	r0, r3
 8001382:	f002 facd 	bl	8003920 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001386:	193b      	adds	r3, r7, r4
 8001388:	2202      	movs	r2, #2
 800138a:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800138c:	193b      	adds	r3, r7, r4
 800138e:	2280      	movs	r2, #128	@ 0x80
 8001390:	0052      	lsls	r2, r2, #1
 8001392:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001394:	0021      	movs	r1, r4
 8001396:	187b      	adds	r3, r7, r1
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800139c:	187b      	adds	r3, r7, r1
 800139e:	2240      	movs	r2, #64	@ 0x40
 80013a0:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013a2:	187b      	adds	r3, r7, r1
 80013a4:	2202      	movs	r2, #2
 80013a6:	61da      	str	r2, [r3, #28]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013a8:	187b      	adds	r3, r7, r1
 80013aa:	2202      	movs	r2, #2
 80013ac:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80013ae:	187b      	adds	r3, r7, r1
 80013b0:	2200      	movs	r2, #0
 80013b2:	625a      	str	r2, [r3, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLN = 16;
 80013b4:	187b      	adds	r3, r7, r1
 80013b6:	2210      	movs	r2, #16
 80013b8:	629a      	str	r2, [r3, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013ba:	187b      	adds	r3, r7, r1
 80013bc:	2280      	movs	r2, #128	@ 0x80
 80013be:	0292      	lsls	r2, r2, #10
 80013c0:	62da      	str	r2, [r3, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013c2:	187b      	adds	r3, r7, r1
 80013c4:	2280      	movs	r2, #128	@ 0x80
 80013c6:	0492      	lsls	r2, r2, #18
 80013c8:	631a      	str	r2, [r3, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80013ca:	187b      	adds	r3, r7, r1
 80013cc:	22c0      	movs	r2, #192	@ 0xc0
 80013ce:	05d2      	lsls	r2, r2, #23
 80013d0:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80013d2:	187b      	adds	r3, r7, r1
 80013d4:	0018      	movs	r0, r3
 80013d6:	f002 fae3 	bl	80039a0 <HAL_RCC_OscConfig>
 80013da:	1e03      	subs	r3, r0, #0
 80013dc:	d001      	beq.n	80013e2 <SystemClock_Config+0x8a>
		Error_Handler();
 80013de:	f000 fa55 	bl	800188c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80013e2:	003b      	movs	r3, r7
 80013e4:	2207      	movs	r2, #7
 80013e6:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013e8:	003b      	movs	r3, r7
 80013ea:	2202      	movs	r2, #2
 80013ec:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ee:	003b      	movs	r3, r7
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013f4:	003b      	movs	r3, r7
 80013f6:	2200      	movs	r2, #0
 80013f8:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80013fa:	003b      	movs	r3, r7
 80013fc:	2102      	movs	r1, #2
 80013fe:	0018      	movs	r0, r3
 8001400:	f002 fde8 	bl	8003fd4 <HAL_RCC_ClockConfig>
 8001404:	1e03      	subs	r3, r0, #0
 8001406:	d001      	beq.n	800140c <SystemClock_Config+0xb4>
		Error_Handler();
 8001408:	f000 fa40 	bl	800188c <Error_Handler>
	}
}
 800140c:	46c0      	nop			@ (mov r8, r8)
 800140e:	46bd      	mov	sp, r7
 8001410:	b013      	add	sp, #76	@ 0x4c
 8001412:	bd90      	pop	{r4, r7, pc}

08001414 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800141a:	1d3b      	adds	r3, r7, #4
 800141c:	0018      	movs	r0, r3
 800141e:	230c      	movs	r3, #12
 8001420:	001a      	movs	r2, r3
 8001422:	2100      	movs	r1, #0
 8001424:	f004 fbfa 	bl	8005c1c <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8001428:	4b36      	ldr	r3, [pc, #216]	@ (8001504 <MX_ADC1_Init+0xf0>)
 800142a:	4a37      	ldr	r2, [pc, #220]	@ (8001508 <MX_ADC1_Init+0xf4>)
 800142c:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800142e:	4b35      	ldr	r3, [pc, #212]	@ (8001504 <MX_ADC1_Init+0xf0>)
 8001430:	2280      	movs	r2, #128	@ 0x80
 8001432:	05d2      	lsls	r2, r2, #23
 8001434:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001436:	4b33      	ldr	r3, [pc, #204]	@ (8001504 <MX_ADC1_Init+0xf0>)
 8001438:	2200      	movs	r2, #0
 800143a:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800143c:	4b31      	ldr	r3, [pc, #196]	@ (8001504 <MX_ADC1_Init+0xf0>)
 800143e:	2200      	movs	r2, #0
 8001440:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 8001442:	4b30      	ldr	r3, [pc, #192]	@ (8001504 <MX_ADC1_Init+0xf0>)
 8001444:	2280      	movs	r2, #128	@ 0x80
 8001446:	0612      	lsls	r2, r2, #24
 8001448:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800144a:	4b2e      	ldr	r3, [pc, #184]	@ (8001504 <MX_ADC1_Init+0xf0>)
 800144c:	2204      	movs	r2, #4
 800144e:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8001450:	4b2c      	ldr	r3, [pc, #176]	@ (8001504 <MX_ADC1_Init+0xf0>)
 8001452:	2200      	movs	r2, #0
 8001454:	761a      	strb	r2, [r3, #24]
	hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001456:	4b2b      	ldr	r3, [pc, #172]	@ (8001504 <MX_ADC1_Init+0xf0>)
 8001458:	2200      	movs	r2, #0
 800145a:	765a      	strb	r2, [r3, #25]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800145c:	4b29      	ldr	r3, [pc, #164]	@ (8001504 <MX_ADC1_Init+0xf0>)
 800145e:	2200      	movs	r2, #0
 8001460:	769a      	strb	r2, [r3, #26]
	hadc1.Init.NbrOfConversion = 1;
 8001462:	4b28      	ldr	r3, [pc, #160]	@ (8001504 <MX_ADC1_Init+0xf0>)
 8001464:	2201      	movs	r2, #1
 8001466:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001468:	4b26      	ldr	r3, [pc, #152]	@ (8001504 <MX_ADC1_Init+0xf0>)
 800146a:	2220      	movs	r2, #32
 800146c:	2100      	movs	r1, #0
 800146e:	5499      	strb	r1, [r3, r2]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001470:	4b24      	ldr	r3, [pc, #144]	@ (8001504 <MX_ADC1_Init+0xf0>)
 8001472:	2200      	movs	r2, #0
 8001474:	625a      	str	r2, [r3, #36]	@ 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001476:	4b23      	ldr	r3, [pc, #140]	@ (8001504 <MX_ADC1_Init+0xf0>)
 8001478:	2200      	movs	r2, #0
 800147a:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800147c:	4b21      	ldr	r3, [pc, #132]	@ (8001504 <MX_ADC1_Init+0xf0>)
 800147e:	222c      	movs	r2, #44	@ 0x2c
 8001480:	2100      	movs	r1, #0
 8001482:	5499      	strb	r1, [r3, r2]
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001484:	4b1f      	ldr	r3, [pc, #124]	@ (8001504 <MX_ADC1_Init+0xf0>)
 8001486:	2200      	movs	r2, #0
 8001488:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800148a:	4b1e      	ldr	r3, [pc, #120]	@ (8001504 <MX_ADC1_Init+0xf0>)
 800148c:	2200      	movs	r2, #0
 800148e:	635a      	str	r2, [r3, #52]	@ 0x34
	hadc1.Init.OversamplingMode = ENABLE;
 8001490:	4b1c      	ldr	r3, [pc, #112]	@ (8001504 <MX_ADC1_Init+0xf0>)
 8001492:	223c      	movs	r2, #60	@ 0x3c
 8001494:	2101      	movs	r1, #1
 8001496:	5499      	strb	r1, [r3, r2]
	hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 8001498:	4b1a      	ldr	r3, [pc, #104]	@ (8001504 <MX_ADC1_Init+0xf0>)
 800149a:	221c      	movs	r2, #28
 800149c:	641a      	str	r2, [r3, #64]	@ 0x40
	hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 800149e:	4b19      	ldr	r3, [pc, #100]	@ (8001504 <MX_ADC1_Init+0xf0>)
 80014a0:	2280      	movs	r2, #128	@ 0x80
 80014a2:	645a      	str	r2, [r3, #68]	@ 0x44
	hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80014a4:	4b17      	ldr	r3, [pc, #92]	@ (8001504 <MX_ADC1_Init+0xf0>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	649a      	str	r2, [r3, #72]	@ 0x48
	hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80014aa:	4b16      	ldr	r3, [pc, #88]	@ (8001504 <MX_ADC1_Init+0xf0>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	64da      	str	r2, [r3, #76]	@ 0x4c
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80014b0:	4b14      	ldr	r3, [pc, #80]	@ (8001504 <MX_ADC1_Init+0xf0>)
 80014b2:	0018      	movs	r0, r3
 80014b4:	f000 fe48 	bl	8002148 <HAL_ADC_Init>
 80014b8:	1e03      	subs	r3, r0, #0
 80014ba:	d001      	beq.n	80014c0 <MX_ADC1_Init+0xac>
		Error_Handler();
 80014bc:	f000 f9e6 	bl	800188c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_16;
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	4a12      	ldr	r2, [pc, #72]	@ (800150c <MX_ADC1_Init+0xf8>)
 80014c4:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	2201      	movs	r2, #1
 80014ca:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80014cc:	1d3a      	adds	r2, r7, #4
 80014ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001504 <MX_ADC1_Init+0xf0>)
 80014d0:	0011      	movs	r1, r2
 80014d2:	0018      	movs	r0, r3
 80014d4:	f001 f87e 	bl	80025d4 <HAL_ADC_ConfigChannel>
 80014d8:	1e03      	subs	r3, r0, #0
 80014da:	d001      	beq.n	80014e0 <MX_ADC1_Init+0xcc>
		Error_Handler();
 80014dc:	f000 f9d6 	bl	800188c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_17;
 80014e0:	1d3b      	adds	r3, r7, #4
 80014e2:	4a0b      	ldr	r2, [pc, #44]	@ (8001510 <MX_ADC1_Init+0xfc>)
 80014e4:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80014e6:	1d3a      	adds	r2, r7, #4
 80014e8:	4b06      	ldr	r3, [pc, #24]	@ (8001504 <MX_ADC1_Init+0xf0>)
 80014ea:	0011      	movs	r1, r2
 80014ec:	0018      	movs	r0, r3
 80014ee:	f001 f871 	bl	80025d4 <HAL_ADC_ConfigChannel>
 80014f2:	1e03      	subs	r3, r0, #0
 80014f4:	d001      	beq.n	80014fa <MX_ADC1_Init+0xe6>
		Error_Handler();
 80014f6:	f000 f9c9 	bl	800188c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80014fa:	46c0      	nop			@ (mov r8, r8)
 80014fc:	46bd      	mov	sp, r7
 80014fe:	b004      	add	sp, #16
 8001500:	bd80      	pop	{r7, pc}
 8001502:	46c0      	nop			@ (mov r8, r8)
 8001504:	20001088 	.word	0x20001088
 8001508:	40012400 	.word	0x40012400
 800150c:	40010000 	.word	0x40010000
 8001510:	44020000 	.word	0x44020000

08001514 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001514:	b580      	push	{r7, lr}
 8001516:	b09c      	sub	sp, #112	@ 0x70
 8001518:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800151a:	2360      	movs	r3, #96	@ 0x60
 800151c:	18fb      	adds	r3, r7, r3
 800151e:	0018      	movs	r0, r3
 8001520:	2310      	movs	r3, #16
 8001522:	001a      	movs	r2, r3
 8001524:	2100      	movs	r1, #0
 8001526:	f004 fb79 	bl	8005c1c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800152a:	2354      	movs	r3, #84	@ 0x54
 800152c:	18fb      	adds	r3, r7, r3
 800152e:	0018      	movs	r0, r3
 8001530:	230c      	movs	r3, #12
 8001532:	001a      	movs	r2, r3
 8001534:	2100      	movs	r1, #0
 8001536:	f004 fb71 	bl	8005c1c <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800153a:	2338      	movs	r3, #56	@ 0x38
 800153c:	18fb      	adds	r3, r7, r3
 800153e:	0018      	movs	r0, r3
 8001540:	231c      	movs	r3, #28
 8001542:	001a      	movs	r2, r3
 8001544:	2100      	movs	r1, #0
 8001546:	f004 fb69 	bl	8005c1c <memset>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	0018      	movs	r0, r3
 800154e:	2334      	movs	r3, #52	@ 0x34
 8001550:	001a      	movs	r2, r3
 8001552:	2100      	movs	r1, #0
 8001554:	f004 fb62 	bl	8005c1c <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001558:	4b51      	ldr	r3, [pc, #324]	@ (80016a0 <MX_TIM1_Init+0x18c>)
 800155a:	4a52      	ldr	r2, [pc, #328]	@ (80016a4 <MX_TIM1_Init+0x190>)
 800155c:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 800155e:	4b50      	ldr	r3, [pc, #320]	@ (80016a0 <MX_TIM1_Init+0x18c>)
 8001560:	2200      	movs	r2, #0
 8001562:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001564:	4b4e      	ldr	r3, [pc, #312]	@ (80016a0 <MX_TIM1_Init+0x18c>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 256 - 1;
 800156a:	4b4d      	ldr	r3, [pc, #308]	@ (80016a0 <MX_TIM1_Init+0x18c>)
 800156c:	22ff      	movs	r2, #255	@ 0xff
 800156e:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001570:	4b4b      	ldr	r3, [pc, #300]	@ (80016a0 <MX_TIM1_Init+0x18c>)
 8001572:	2200      	movs	r2, #0
 8001574:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001576:	4b4a      	ldr	r3, [pc, #296]	@ (80016a0 <MX_TIM1_Init+0x18c>)
 8001578:	2200      	movs	r2, #0
 800157a:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800157c:	4b48      	ldr	r3, [pc, #288]	@ (80016a0 <MX_TIM1_Init+0x18c>)
 800157e:	2280      	movs	r2, #128	@ 0x80
 8001580:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001582:	4b47      	ldr	r3, [pc, #284]	@ (80016a0 <MX_TIM1_Init+0x18c>)
 8001584:	0018      	movs	r0, r3
 8001586:	f003 f829 	bl	80045dc <HAL_TIM_Base_Init>
 800158a:	1e03      	subs	r3, r0, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM1_Init+0x7e>
		Error_Handler();
 800158e:	f000 f97d 	bl	800188c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001592:	2160      	movs	r1, #96	@ 0x60
 8001594:	187b      	adds	r3, r7, r1
 8001596:	2280      	movs	r2, #128	@ 0x80
 8001598:	0152      	lsls	r2, r2, #5
 800159a:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800159c:	187a      	adds	r2, r7, r1
 800159e:	4b40      	ldr	r3, [pc, #256]	@ (80016a0 <MX_TIM1_Init+0x18c>)
 80015a0:	0011      	movs	r1, r2
 80015a2:	0018      	movs	r0, r3
 80015a4:	f003 fc4e 	bl	8004e44 <HAL_TIM_ConfigClockSource>
 80015a8:	1e03      	subs	r3, r0, #0
 80015aa:	d001      	beq.n	80015b0 <MX_TIM1_Init+0x9c>
		Error_Handler();
 80015ac:	f000 f96e 	bl	800188c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 80015b0:	4b3b      	ldr	r3, [pc, #236]	@ (80016a0 <MX_TIM1_Init+0x18c>)
 80015b2:	0018      	movs	r0, r3
 80015b4:	f003 f9a8 	bl	8004908 <HAL_TIM_PWM_Init>
 80015b8:	1e03      	subs	r3, r0, #0
 80015ba:	d001      	beq.n	80015c0 <MX_TIM1_Init+0xac>
		Error_Handler();
 80015bc:	f000 f966 	bl	800188c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015c0:	2154      	movs	r1, #84	@ 0x54
 80015c2:	187b      	adds	r3, r7, r1
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015c8:	187b      	adds	r3, r7, r1
 80015ca:	2200      	movs	r2, #0
 80015cc:	605a      	str	r2, [r3, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ce:	187b      	adds	r3, r7, r1
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80015d4:	187a      	adds	r2, r7, r1
 80015d6:	4b32      	ldr	r3, [pc, #200]	@ (80016a0 <MX_TIM1_Init+0x18c>)
 80015d8:	0011      	movs	r1, r2
 80015da:	0018      	movs	r0, r3
 80015dc:	f004 f8e8 	bl	80057b0 <HAL_TIMEx_MasterConfigSynchronization>
 80015e0:	1e03      	subs	r3, r0, #0
 80015e2:	d001      	beq.n	80015e8 <MX_TIM1_Init+0xd4>
			!= HAL_OK) {
		Error_Handler();
 80015e4:	f000 f952 	bl	800188c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015e8:	2138      	movs	r1, #56	@ 0x38
 80015ea:	187b      	adds	r3, r7, r1
 80015ec:	2260      	movs	r2, #96	@ 0x60
 80015ee:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 80015f0:	187b      	adds	r3, r7, r1
 80015f2:	2200      	movs	r2, #0
 80015f4:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015f6:	187b      	adds	r3, r7, r1
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015fc:	187b      	adds	r3, r7, r1
 80015fe:	2200      	movs	r2, #0
 8001600:	60da      	str	r2, [r3, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001602:	187b      	adds	r3, r7, r1
 8001604:	2200      	movs	r2, #0
 8001606:	611a      	str	r2, [r3, #16]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001608:	187b      	adds	r3, r7, r1
 800160a:	2200      	movs	r2, #0
 800160c:	615a      	str	r2, [r3, #20]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800160e:	187b      	adds	r3, r7, r1
 8001610:	2200      	movs	r2, #0
 8001612:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8001614:	1879      	adds	r1, r7, r1
 8001616:	4b22      	ldr	r3, [pc, #136]	@ (80016a0 <MX_TIM1_Init+0x18c>)
 8001618:	2200      	movs	r2, #0
 800161a:	0018      	movs	r0, r3
 800161c:	f003 fb12 	bl	8004c44 <HAL_TIM_PWM_ConfigChannel>
 8001620:	1e03      	subs	r3, r0, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM1_Init+0x114>
			!= HAL_OK) {
		Error_Handler();
 8001624:	f000 f932 	bl	800188c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001628:	1d3b      	adds	r3, r7, #4
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	2200      	movs	r2, #0
 8001632:	605a      	str	r2, [r3, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001634:	1d3b      	adds	r3, r7, #4
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 800163a:	1d3b      	adds	r3, r7, #4
 800163c:	2200      	movs	r2, #0
 800163e:	60da      	str	r2, [r3, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001640:	1d3b      	adds	r3, r7, #4
 8001642:	2200      	movs	r2, #0
 8001644:	611a      	str	r2, [r3, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	2280      	movs	r2, #128	@ 0x80
 800164a:	0192      	lsls	r2, r2, #6
 800164c:	615a      	str	r2, [r3, #20]
	sBreakDeadTimeConfig.BreakFilter = 0;
 800164e:	1d3b      	adds	r3, r7, #4
 8001650:	2200      	movs	r2, #0
 8001652:	619a      	str	r2, [r3, #24]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001654:	1d3b      	adds	r3, r7, #4
 8001656:	2200      	movs	r2, #0
 8001658:	61da      	str	r2, [r3, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	2200      	movs	r2, #0
 800165e:	621a      	str	r2, [r3, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001660:	1d3b      	adds	r3, r7, #4
 8001662:	2280      	movs	r2, #128	@ 0x80
 8001664:	0492      	lsls	r2, r2, #18
 8001666:	625a      	str	r2, [r3, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001668:	1d3b      	adds	r3, r7, #4
 800166a:	2200      	movs	r2, #0
 800166c:	629a      	str	r2, [r3, #40]	@ 0x28
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	2200      	movs	r2, #0
 8001672:	62da      	str	r2, [r3, #44]	@ 0x2c
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001674:	1d3b      	adds	r3, r7, #4
 8001676:	2200      	movs	r2, #0
 8001678:	631a      	str	r2, [r3, #48]	@ 0x30
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 800167a:	1d3a      	adds	r2, r7, #4
 800167c:	4b08      	ldr	r3, [pc, #32]	@ (80016a0 <MX_TIM1_Init+0x18c>)
 800167e:	0011      	movs	r1, r2
 8001680:	0018      	movs	r0, r3
 8001682:	f004 f8fd 	bl	8005880 <HAL_TIMEx_ConfigBreakDeadTime>
 8001686:	1e03      	subs	r3, r0, #0
 8001688:	d001      	beq.n	800168e <MX_TIM1_Init+0x17a>
			!= HAL_OK) {
		Error_Handler();
 800168a:	f000 f8ff 	bl	800188c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 800168e:	4b04      	ldr	r3, [pc, #16]	@ (80016a0 <MX_TIM1_Init+0x18c>)
 8001690:	0018      	movs	r0, r3
 8001692:	f000 fa13 	bl	8001abc <HAL_TIM_MspPostInit>

}
 8001696:	46c0      	nop			@ (mov r8, r8)
 8001698:	46bd      	mov	sp, r7
 800169a:	b01c      	add	sp, #112	@ 0x70
 800169c:	bd80      	pop	{r7, pc}
 800169e:	46c0      	nop			@ (mov r8, r8)
 80016a0:	20001148 	.word	0x20001148
 80016a4:	40012c00 	.word	0x40012c00

080016a8 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08e      	sub	sp, #56	@ 0x38
 80016ac:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80016ae:	2328      	movs	r3, #40	@ 0x28
 80016b0:	18fb      	adds	r3, r7, r3
 80016b2:	0018      	movs	r0, r3
 80016b4:	2310      	movs	r3, #16
 80016b6:	001a      	movs	r2, r3
 80016b8:	2100      	movs	r1, #0
 80016ba:	f004 faaf 	bl	8005c1c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80016be:	231c      	movs	r3, #28
 80016c0:	18fb      	adds	r3, r7, r3
 80016c2:	0018      	movs	r0, r3
 80016c4:	230c      	movs	r3, #12
 80016c6:	001a      	movs	r2, r3
 80016c8:	2100      	movs	r1, #0
 80016ca:	f004 faa7 	bl	8005c1c <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80016ce:	003b      	movs	r3, r7
 80016d0:	0018      	movs	r0, r3
 80016d2:	231c      	movs	r3, #28
 80016d4:	001a      	movs	r2, r3
 80016d6:	2100      	movs	r1, #0
 80016d8:	f004 faa0 	bl	8005c1c <memset>

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80016dc:	4b2e      	ldr	r3, [pc, #184]	@ (8001798 <MX_TIM2_Init+0xf0>)
 80016de:	2280      	movs	r2, #128	@ 0x80
 80016e0:	05d2      	lsls	r2, r2, #23
 80016e2:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80016e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001798 <MX_TIM2_Init+0xf0>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ea:	4b2b      	ldr	r3, [pc, #172]	@ (8001798 <MX_TIM2_Init+0xf0>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000;
 80016f0:	4b29      	ldr	r3, [pc, #164]	@ (8001798 <MX_TIM2_Init+0xf0>)
 80016f2:	22fa      	movs	r2, #250	@ 0xfa
 80016f4:	0092      	lsls	r2, r2, #2
 80016f6:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f8:	4b27      	ldr	r3, [pc, #156]	@ (8001798 <MX_TIM2_Init+0xf0>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016fe:	4b26      	ldr	r3, [pc, #152]	@ (8001798 <MX_TIM2_Init+0xf0>)
 8001700:	2280      	movs	r2, #128	@ 0x80
 8001702:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001704:	4b24      	ldr	r3, [pc, #144]	@ (8001798 <MX_TIM2_Init+0xf0>)
 8001706:	0018      	movs	r0, r3
 8001708:	f002 ff68 	bl	80045dc <HAL_TIM_Base_Init>
 800170c:	1e03      	subs	r3, r0, #0
 800170e:	d001      	beq.n	8001714 <MX_TIM2_Init+0x6c>
		Error_Handler();
 8001710:	f000 f8bc 	bl	800188c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001714:	2128      	movs	r1, #40	@ 0x28
 8001716:	187b      	adds	r3, r7, r1
 8001718:	2280      	movs	r2, #128	@ 0x80
 800171a:	0152      	lsls	r2, r2, #5
 800171c:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800171e:	187a      	adds	r2, r7, r1
 8001720:	4b1d      	ldr	r3, [pc, #116]	@ (8001798 <MX_TIM2_Init+0xf0>)
 8001722:	0011      	movs	r1, r2
 8001724:	0018      	movs	r0, r3
 8001726:	f003 fb8d 	bl	8004e44 <HAL_TIM_ConfigClockSource>
 800172a:	1e03      	subs	r3, r0, #0
 800172c:	d001      	beq.n	8001732 <MX_TIM2_Init+0x8a>
		Error_Handler();
 800172e:	f000 f8ad 	bl	800188c <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim2) != HAL_OK) {
 8001732:	4b19      	ldr	r3, [pc, #100]	@ (8001798 <MX_TIM2_Init+0xf0>)
 8001734:	0018      	movs	r0, r3
 8001736:	f002 ffa9 	bl	800468c <HAL_TIM_OC_Init>
 800173a:	1e03      	subs	r3, r0, #0
 800173c:	d001      	beq.n	8001742 <MX_TIM2_Init+0x9a>
		Error_Handler();
 800173e:	f000 f8a5 	bl	800188c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001742:	211c      	movs	r1, #28
 8001744:	187b      	adds	r3, r7, r1
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800174a:	187b      	adds	r3, r7, r1
 800174c:	2200      	movs	r2, #0
 800174e:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001750:	187a      	adds	r2, r7, r1
 8001752:	4b11      	ldr	r3, [pc, #68]	@ (8001798 <MX_TIM2_Init+0xf0>)
 8001754:	0011      	movs	r1, r2
 8001756:	0018      	movs	r0, r3
 8001758:	f004 f82a 	bl	80057b0 <HAL_TIMEx_MasterConfigSynchronization>
 800175c:	1e03      	subs	r3, r0, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM2_Init+0xbc>
			!= HAL_OK) {
		Error_Handler();
 8001760:	f000 f894 	bl	800188c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001764:	003b      	movs	r3, r7
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 800176a:	003b      	movs	r3, r7
 800176c:	2200      	movs	r2, #0
 800176e:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001770:	003b      	movs	r3, r7
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001776:	003b      	movs	r3, r7
 8001778:	2200      	movs	r2, #0
 800177a:	611a      	str	r2, [r3, #16]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 800177c:	0039      	movs	r1, r7
 800177e:	4b06      	ldr	r3, [pc, #24]	@ (8001798 <MX_TIM2_Init+0xf0>)
 8001780:	2200      	movs	r2, #0
 8001782:	0018      	movs	r0, r3
 8001784:	f003 f9fe 	bl	8004b84 <HAL_TIM_OC_ConfigChannel>
 8001788:	1e03      	subs	r3, r0, #0
 800178a:	d001      	beq.n	8001790 <MX_TIM2_Init+0xe8>
		Error_Handler();
 800178c:	f000 f87e 	bl	800188c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001790:	46c0      	nop			@ (mov r8, r8)
 8001792:	46bd      	mov	sp, r7
 8001794:	b00e      	add	sp, #56	@ 0x38
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20001194 	.word	0x20001194

0800179c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80017a2:	4b10      	ldr	r3, [pc, #64]	@ (80017e4 <MX_DMA_Init+0x48>)
 80017a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80017a6:	4b0f      	ldr	r3, [pc, #60]	@ (80017e4 <MX_DMA_Init+0x48>)
 80017a8:	2101      	movs	r1, #1
 80017aa:	430a      	orrs	r2, r1
 80017ac:	639a      	str	r2, [r3, #56]	@ 0x38
 80017ae:	4b0d      	ldr	r3, [pc, #52]	@ (80017e4 <MX_DMA_Init+0x48>)
 80017b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017b2:	2201      	movs	r2, #1
 80017b4:	4013      	ands	r3, r2
 80017b6:	607b      	str	r3, [r7, #4]
 80017b8:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80017ba:	2200      	movs	r2, #0
 80017bc:	2100      	movs	r1, #0
 80017be:	2009      	movs	r0, #9
 80017c0:	f001 fc92 	bl	80030e8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80017c4:	2009      	movs	r0, #9
 80017c6:	f001 fca4 	bl	8003112 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80017ca:	2200      	movs	r2, #0
 80017cc:	2100      	movs	r1, #0
 80017ce:	200a      	movs	r0, #10
 80017d0:	f001 fc8a 	bl	80030e8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80017d4:	200a      	movs	r0, #10
 80017d6:	f001 fc9c 	bl	8003112 <HAL_NVIC_EnableIRQ>

}
 80017da:	46c0      	nop			@ (mov r8, r8)
 80017dc:	46bd      	mov	sp, r7
 80017de:	b002      	add	sp, #8
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	46c0      	nop			@ (mov r8, r8)
 80017e4:	40021000 	.word	0x40021000

080017e8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80017e8:	b590      	push	{r4, r7, lr}
 80017ea:	b089      	sub	sp, #36	@ 0x24
 80017ec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80017ee:	240c      	movs	r4, #12
 80017f0:	193b      	adds	r3, r7, r4
 80017f2:	0018      	movs	r0, r3
 80017f4:	2314      	movs	r3, #20
 80017f6:	001a      	movs	r2, r3
 80017f8:	2100      	movs	r1, #0
 80017fa:	f004 fa0f 	bl	8005c1c <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80017fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001868 <MX_GPIO_Init+0x80>)
 8001800:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001802:	4b19      	ldr	r3, [pc, #100]	@ (8001868 <MX_GPIO_Init+0x80>)
 8001804:	2102      	movs	r1, #2
 8001806:	430a      	orrs	r2, r1
 8001808:	635a      	str	r2, [r3, #52]	@ 0x34
 800180a:	4b17      	ldr	r3, [pc, #92]	@ (8001868 <MX_GPIO_Init+0x80>)
 800180c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800180e:	2202      	movs	r2, #2
 8001810:	4013      	ands	r3, r2
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001816:	4b14      	ldr	r3, [pc, #80]	@ (8001868 <MX_GPIO_Init+0x80>)
 8001818:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800181a:	4b13      	ldr	r3, [pc, #76]	@ (8001868 <MX_GPIO_Init+0x80>)
 800181c:	2101      	movs	r1, #1
 800181e:	430a      	orrs	r2, r1
 8001820:	635a      	str	r2, [r3, #52]	@ 0x34
 8001822:	4b11      	ldr	r3, [pc, #68]	@ (8001868 <MX_GPIO_Init+0x80>)
 8001824:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001826:	2201      	movs	r2, #1
 8001828:	4013      	ands	r3, r2
 800182a:	607b      	str	r3, [r7, #4]
 800182c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin : PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 800182e:	193b      	adds	r3, r7, r4
 8001830:	2280      	movs	r2, #128	@ 0x80
 8001832:	0092      	lsls	r2, r2, #2
 8001834:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001836:	193b      	adds	r3, r7, r4
 8001838:	2288      	movs	r2, #136	@ 0x88
 800183a:	0352      	lsls	r2, r2, #13
 800183c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	193b      	adds	r3, r7, r4
 8001840:	2200      	movs	r2, #0
 8001842:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001844:	193b      	adds	r3, r7, r4
 8001846:	4a09      	ldr	r2, [pc, #36]	@ (800186c <MX_GPIO_Init+0x84>)
 8001848:	0019      	movs	r1, r3
 800184a:	0010      	movs	r0, r2
 800184c:	f001 fed0 	bl	80035f0 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001850:	2200      	movs	r2, #0
 8001852:	2100      	movs	r1, #0
 8001854:	2007      	movs	r0, #7
 8001856:	f001 fc47 	bl	80030e8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800185a:	2007      	movs	r0, #7
 800185c:	f001 fc59 	bl	8003112 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001860:	46c0      	nop			@ (mov r8, r8)
 8001862:	46bd      	mov	sp, r7
 8001864:	b009      	add	sp, #36	@ 0x24
 8001866:	bd90      	pop	{r4, r7, pc}
 8001868:	40021000 	.word	0x40021000
 800186c:	50000400 	.word	0x50000400

08001870 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
	// Conversion Complete & DMA Transfer Complete As Well
	adcConversionComplete = 1;
 8001878:	4b03      	ldr	r3, [pc, #12]	@ (8001888 <HAL_ADC_ConvCpltCallback+0x18>)
 800187a:	2201      	movs	r2, #1
 800187c:	601a      	str	r2, [r3, #0]
}
 800187e:	46c0      	nop			@ (mov r8, r8)
 8001880:	46bd      	mov	sp, r7
 8001882:	b002      	add	sp, #8
 8001884:	bd80      	pop	{r7, pc}
 8001886:	46c0      	nop			@ (mov r8, r8)
 8001888:	2000124c 	.word	0x2000124c

0800188c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001890:	b672      	cpsid	i
}
 8001892:	46c0      	nop			@ (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001894:	46c0      	nop			@ (mov r8, r8)
 8001896:	e7fd      	b.n	8001894 <Error_Handler+0x8>

08001898 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800189e:	4b0f      	ldr	r3, [pc, #60]	@ (80018dc <HAL_MspInit+0x44>)
 80018a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018a2:	4b0e      	ldr	r3, [pc, #56]	@ (80018dc <HAL_MspInit+0x44>)
 80018a4:	2101      	movs	r1, #1
 80018a6:	430a      	orrs	r2, r1
 80018a8:	641a      	str	r2, [r3, #64]	@ 0x40
 80018aa:	4b0c      	ldr	r3, [pc, #48]	@ (80018dc <HAL_MspInit+0x44>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ae:	2201      	movs	r2, #1
 80018b0:	4013      	ands	r3, r2
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018b6:	4b09      	ldr	r3, [pc, #36]	@ (80018dc <HAL_MspInit+0x44>)
 80018b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80018ba:	4b08      	ldr	r3, [pc, #32]	@ (80018dc <HAL_MspInit+0x44>)
 80018bc:	2180      	movs	r1, #128	@ 0x80
 80018be:	0549      	lsls	r1, r1, #21
 80018c0:	430a      	orrs	r2, r1
 80018c2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80018c4:	4b05      	ldr	r3, [pc, #20]	@ (80018dc <HAL_MspInit+0x44>)
 80018c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80018c8:	2380      	movs	r3, #128	@ 0x80
 80018ca:	055b      	lsls	r3, r3, #21
 80018cc:	4013      	ands	r3, r2
 80018ce:	603b      	str	r3, [r7, #0]
 80018d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018d2:	46c0      	nop			@ (mov r8, r8)
 80018d4:	46bd      	mov	sp, r7
 80018d6:	b002      	add	sp, #8
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	46c0      	nop			@ (mov r8, r8)
 80018dc:	40021000 	.word	0x40021000

080018e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018e0:	b590      	push	{r4, r7, lr}
 80018e2:	b08b      	sub	sp, #44	@ 0x2c
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	2414      	movs	r4, #20
 80018ea:	193b      	adds	r3, r7, r4
 80018ec:	0018      	movs	r0, r3
 80018ee:	2314      	movs	r3, #20
 80018f0:	001a      	movs	r2, r3
 80018f2:	2100      	movs	r1, #0
 80018f4:	f004 f992 	bl	8005c1c <memset>
  if(hadc->Instance==ADC1)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a2e      	ldr	r2, [pc, #184]	@ (80019b8 <HAL_ADC_MspInit+0xd8>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d155      	bne.n	80019ae <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001902:	4b2e      	ldr	r3, [pc, #184]	@ (80019bc <HAL_ADC_MspInit+0xdc>)
 8001904:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001906:	4b2d      	ldr	r3, [pc, #180]	@ (80019bc <HAL_ADC_MspInit+0xdc>)
 8001908:	2180      	movs	r1, #128	@ 0x80
 800190a:	0349      	lsls	r1, r1, #13
 800190c:	430a      	orrs	r2, r1
 800190e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001910:	4b2a      	ldr	r3, [pc, #168]	@ (80019bc <HAL_ADC_MspInit+0xdc>)
 8001912:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001914:	2380      	movs	r3, #128	@ 0x80
 8001916:	035b      	lsls	r3, r3, #13
 8001918:	4013      	ands	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
 800191c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191e:	4b27      	ldr	r3, [pc, #156]	@ (80019bc <HAL_ADC_MspInit+0xdc>)
 8001920:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001922:	4b26      	ldr	r3, [pc, #152]	@ (80019bc <HAL_ADC_MspInit+0xdc>)
 8001924:	2101      	movs	r1, #1
 8001926:	430a      	orrs	r2, r1
 8001928:	635a      	str	r2, [r3, #52]	@ 0x34
 800192a:	4b24      	ldr	r3, [pc, #144]	@ (80019bc <HAL_ADC_MspInit+0xdc>)
 800192c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800192e:	2201      	movs	r2, #1
 8001930:	4013      	ands	r3, r2
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA12 [PA10]     ------> ADC1_IN16
    PA13     ------> ADC1_IN17
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001936:	193b      	adds	r3, r7, r4
 8001938:	22c0      	movs	r2, #192	@ 0xc0
 800193a:	0192      	lsls	r2, r2, #6
 800193c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800193e:	193b      	adds	r3, r7, r4
 8001940:	2203      	movs	r2, #3
 8001942:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	193b      	adds	r3, r7, r4
 8001946:	2200      	movs	r2, #0
 8001948:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194a:	193a      	adds	r2, r7, r4
 800194c:	23a0      	movs	r3, #160	@ 0xa0
 800194e:	05db      	lsls	r3, r3, #23
 8001950:	0011      	movs	r1, r2
 8001952:	0018      	movs	r0, r3
 8001954:	f001 fe4c 	bl	80035f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 8001958:	4b19      	ldr	r3, [pc, #100]	@ (80019c0 <HAL_ADC_MspInit+0xe0>)
 800195a:	4a1a      	ldr	r2, [pc, #104]	@ (80019c4 <HAL_ADC_MspInit+0xe4>)
 800195c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800195e:	4b18      	ldr	r3, [pc, #96]	@ (80019c0 <HAL_ADC_MspInit+0xe0>)
 8001960:	2205      	movs	r2, #5
 8001962:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001964:	4b16      	ldr	r3, [pc, #88]	@ (80019c0 <HAL_ADC_MspInit+0xe0>)
 8001966:	2200      	movs	r2, #0
 8001968:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800196a:	4b15      	ldr	r3, [pc, #84]	@ (80019c0 <HAL_ADC_MspInit+0xe0>)
 800196c:	2200      	movs	r2, #0
 800196e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001970:	4b13      	ldr	r3, [pc, #76]	@ (80019c0 <HAL_ADC_MspInit+0xe0>)
 8001972:	2280      	movs	r2, #128	@ 0x80
 8001974:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001976:	4b12      	ldr	r3, [pc, #72]	@ (80019c0 <HAL_ADC_MspInit+0xe0>)
 8001978:	2280      	movs	r2, #128	@ 0x80
 800197a:	0052      	lsls	r2, r2, #1
 800197c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800197e:	4b10      	ldr	r3, [pc, #64]	@ (80019c0 <HAL_ADC_MspInit+0xe0>)
 8001980:	2280      	movs	r2, #128	@ 0x80
 8001982:	00d2      	lsls	r2, r2, #3
 8001984:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001986:	4b0e      	ldr	r3, [pc, #56]	@ (80019c0 <HAL_ADC_MspInit+0xe0>)
 8001988:	2200      	movs	r2, #0
 800198a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800198c:	4b0c      	ldr	r3, [pc, #48]	@ (80019c0 <HAL_ADC_MspInit+0xe0>)
 800198e:	2200      	movs	r2, #0
 8001990:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001992:	4b0b      	ldr	r3, [pc, #44]	@ (80019c0 <HAL_ADC_MspInit+0xe0>)
 8001994:	0018      	movs	r0, r3
 8001996:	f001 fbd9 	bl	800314c <HAL_DMA_Init>
 800199a:	1e03      	subs	r3, r0, #0
 800199c:	d001      	beq.n	80019a2 <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 800199e:	f7ff ff75 	bl	800188c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a06      	ldr	r2, [pc, #24]	@ (80019c0 <HAL_ADC_MspInit+0xe0>)
 80019a6:	651a      	str	r2, [r3, #80]	@ 0x50
 80019a8:	4b05      	ldr	r3, [pc, #20]	@ (80019c0 <HAL_ADC_MspInit+0xe0>)
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	629a      	str	r2, [r3, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019ae:	46c0      	nop			@ (mov r8, r8)
 80019b0:	46bd      	mov	sp, r7
 80019b2:	b00b      	add	sp, #44	@ 0x2c
 80019b4:	bd90      	pop	{r4, r7, pc}
 80019b6:	46c0      	nop			@ (mov r8, r8)
 80019b8:	40012400 	.word	0x40012400
 80019bc:	40021000 	.word	0x40021000
 80019c0:	200010ec 	.word	0x200010ec
 80019c4:	4002001c 	.word	0x4002001c

080019c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019c8:	b590      	push	{r4, r7, lr}
 80019ca:	b08f      	sub	sp, #60	@ 0x3c
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019d0:	2410      	movs	r4, #16
 80019d2:	193b      	adds	r3, r7, r4
 80019d4:	0018      	movs	r0, r3
 80019d6:	2328      	movs	r3, #40	@ 0x28
 80019d8:	001a      	movs	r2, r3
 80019da:	2100      	movs	r1, #0
 80019dc:	f004 f91e 	bl	8005c1c <memset>
  if(htim_base->Instance==TIM1)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a31      	ldr	r2, [pc, #196]	@ (8001aac <HAL_TIM_Base_MspInit+0xe4>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d11e      	bne.n	8001a28 <HAL_TIM_Base_MspInit+0x60>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80019ea:	193b      	adds	r3, r7, r4
 80019ec:	2280      	movs	r2, #128	@ 0x80
 80019ee:	0392      	lsls	r2, r2, #14
 80019f0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PLL;
 80019f2:	193b      	adds	r3, r7, r4
 80019f4:	2280      	movs	r2, #128	@ 0x80
 80019f6:	03d2      	lsls	r2, r2, #15
 80019f8:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019fa:	193b      	adds	r3, r7, r4
 80019fc:	0018      	movs	r0, r3
 80019fe:	f002 fc73 	bl	80042e8 <HAL_RCCEx_PeriphCLKConfig>
 8001a02:	1e03      	subs	r3, r0, #0
 8001a04:	d001      	beq.n	8001a0a <HAL_TIM_Base_MspInit+0x42>
    {
      Error_Handler();
 8001a06:	f7ff ff41 	bl	800188c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a0a:	4b29      	ldr	r3, [pc, #164]	@ (8001ab0 <HAL_TIM_Base_MspInit+0xe8>)
 8001a0c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a0e:	4b28      	ldr	r3, [pc, #160]	@ (8001ab0 <HAL_TIM_Base_MspInit+0xe8>)
 8001a10:	2180      	movs	r1, #128	@ 0x80
 8001a12:	0109      	lsls	r1, r1, #4
 8001a14:	430a      	orrs	r2, r1
 8001a16:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a18:	4b25      	ldr	r3, [pc, #148]	@ (8001ab0 <HAL_TIM_Base_MspInit+0xe8>)
 8001a1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a1c:	2380      	movs	r3, #128	@ 0x80
 8001a1e:	011b      	lsls	r3, r3, #4
 8001a20:	4013      	ands	r3, r2
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a26:	e03d      	b.n	8001aa4 <HAL_TIM_Base_MspInit+0xdc>
  else if(htim_base->Instance==TIM2)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	2380      	movs	r3, #128	@ 0x80
 8001a2e:	05db      	lsls	r3, r3, #23
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d137      	bne.n	8001aa4 <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a34:	4b1e      	ldr	r3, [pc, #120]	@ (8001ab0 <HAL_TIM_Base_MspInit+0xe8>)
 8001a36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a38:	4b1d      	ldr	r3, [pc, #116]	@ (8001ab0 <HAL_TIM_Base_MspInit+0xe8>)
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001a40:	4b1b      	ldr	r3, [pc, #108]	@ (8001ab0 <HAL_TIM_Base_MspInit+0xe8>)
 8001a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a44:	2201      	movs	r2, #1
 8001a46:	4013      	ands	r3, r2
 8001a48:	60bb      	str	r3, [r7, #8]
 8001a4a:	68bb      	ldr	r3, [r7, #8]
    hdma_tim2_ch1.Instance = DMA1_Channel1;
 8001a4c:	4b19      	ldr	r3, [pc, #100]	@ (8001ab4 <HAL_TIM_Base_MspInit+0xec>)
 8001a4e:	4a1a      	ldr	r2, [pc, #104]	@ (8001ab8 <HAL_TIM_Base_MspInit+0xf0>)
 8001a50:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 8001a52:	4b18      	ldr	r3, [pc, #96]	@ (8001ab4 <HAL_TIM_Base_MspInit+0xec>)
 8001a54:	221a      	movs	r2, #26
 8001a56:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a58:	4b16      	ldr	r3, [pc, #88]	@ (8001ab4 <HAL_TIM_Base_MspInit+0xec>)
 8001a5a:	2210      	movs	r2, #16
 8001a5c:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a5e:	4b15      	ldr	r3, [pc, #84]	@ (8001ab4 <HAL_TIM_Base_MspInit+0xec>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001a64:	4b13      	ldr	r3, [pc, #76]	@ (8001ab4 <HAL_TIM_Base_MspInit+0xec>)
 8001a66:	2280      	movs	r2, #128	@ 0x80
 8001a68:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a6a:	4b12      	ldr	r3, [pc, #72]	@ (8001ab4 <HAL_TIM_Base_MspInit+0xec>)
 8001a6c:	2280      	movs	r2, #128	@ 0x80
 8001a6e:	0092      	lsls	r2, r2, #2
 8001a70:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a72:	4b10      	ldr	r3, [pc, #64]	@ (8001ab4 <HAL_TIM_Base_MspInit+0xec>)
 8001a74:	2280      	movs	r2, #128	@ 0x80
 8001a76:	0112      	lsls	r2, r2, #4
 8001a78:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8001a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab4 <HAL_TIM_Base_MspInit+0xec>)
 8001a7c:	2220      	movs	r2, #32
 8001a7e:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001a80:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab4 <HAL_TIM_Base_MspInit+0xec>)
 8001a82:	2280      	movs	r2, #128	@ 0x80
 8001a84:	0192      	lsls	r2, r2, #6
 8001a86:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001a88:	4b0a      	ldr	r3, [pc, #40]	@ (8001ab4 <HAL_TIM_Base_MspInit+0xec>)
 8001a8a:	0018      	movs	r0, r3
 8001a8c:	f001 fb5e 	bl	800314c <HAL_DMA_Init>
 8001a90:	1e03      	subs	r3, r0, #0
 8001a92:	d001      	beq.n	8001a98 <HAL_TIM_Base_MspInit+0xd0>
      Error_Handler();
 8001a94:	f7ff fefa 	bl	800188c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	4a06      	ldr	r2, [pc, #24]	@ (8001ab4 <HAL_TIM_Base_MspInit+0xec>)
 8001a9c:	625a      	str	r2, [r3, #36]	@ 0x24
 8001a9e:	4b05      	ldr	r3, [pc, #20]	@ (8001ab4 <HAL_TIM_Base_MspInit+0xec>)
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001aa4:	46c0      	nop			@ (mov r8, r8)
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	b00f      	add	sp, #60	@ 0x3c
 8001aaa:	bd90      	pop	{r4, r7, pc}
 8001aac:	40012c00 	.word	0x40012c00
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	200011e0 	.word	0x200011e0
 8001ab8:	40020008 	.word	0x40020008

08001abc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001abc:	b590      	push	{r4, r7, lr}
 8001abe:	b089      	sub	sp, #36	@ 0x24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac4:	240c      	movs	r4, #12
 8001ac6:	193b      	adds	r3, r7, r4
 8001ac8:	0018      	movs	r0, r3
 8001aca:	2314      	movs	r3, #20
 8001acc:	001a      	movs	r2, r3
 8001ace:	2100      	movs	r1, #0
 8001ad0:	f004 f8a4 	bl	8005c1c <memset>
  if(htim->Instance==TIM1)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a15      	ldr	r2, [pc, #84]	@ (8001b30 <HAL_TIM_MspPostInit+0x74>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d123      	bne.n	8001b26 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ade:	4b15      	ldr	r3, [pc, #84]	@ (8001b34 <HAL_TIM_MspPostInit+0x78>)
 8001ae0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ae2:	4b14      	ldr	r3, [pc, #80]	@ (8001b34 <HAL_TIM_MspPostInit+0x78>)
 8001ae4:	2101      	movs	r1, #1
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001aea:	4b12      	ldr	r3, [pc, #72]	@ (8001b34 <HAL_TIM_MspPostInit+0x78>)
 8001aec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001aee:	2201      	movs	r2, #1
 8001af0:	4013      	ands	r3, r2
 8001af2:	60bb      	str	r3, [r7, #8]
 8001af4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001af6:	193b      	adds	r3, r7, r4
 8001af8:	2280      	movs	r2, #128	@ 0x80
 8001afa:	0052      	lsls	r2, r2, #1
 8001afc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afe:	0021      	movs	r1, r4
 8001b00:	187b      	adds	r3, r7, r1
 8001b02:	2202      	movs	r2, #2
 8001b04:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	187b      	adds	r3, r7, r1
 8001b08:	2200      	movs	r2, #0
 8001b0a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0c:	187b      	adds	r3, r7, r1
 8001b0e:	2200      	movs	r2, #0
 8001b10:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001b12:	187b      	adds	r3, r7, r1
 8001b14:	2202      	movs	r2, #2
 8001b16:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b18:	187a      	adds	r2, r7, r1
 8001b1a:	23a0      	movs	r3, #160	@ 0xa0
 8001b1c:	05db      	lsls	r3, r3, #23
 8001b1e:	0011      	movs	r1, r2
 8001b20:	0018      	movs	r0, r3
 8001b22:	f001 fd65 	bl	80035f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001b26:	46c0      	nop			@ (mov r8, r8)
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	b009      	add	sp, #36	@ 0x24
 8001b2c:	bd90      	pop	{r4, r7, pc}
 8001b2e:	46c0      	nop			@ (mov r8, r8)
 8001b30:	40012c00 	.word	0x40012c00
 8001b34:	40021000 	.word	0x40021000

08001b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b3c:	46c0      	nop			@ (mov r8, r8)
 8001b3e:	e7fd      	b.n	8001b3c <NMI_Handler+0x4>

08001b40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b44:	46c0      	nop			@ (mov r8, r8)
 8001b46:	e7fd      	b.n	8001b44 <HardFault_Handler+0x4>

08001b48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001b4c:	46c0      	nop			@ (mov r8, r8)
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b56:	46c0      	nop			@ (mov r8, r8)
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b60:	f000 f97e 	bl	8001e60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b64:	46c0      	nop			@ (mov r8, r8)
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001b6e:	2380      	movs	r3, #128	@ 0x80
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	0018      	movs	r0, r3
 8001b74:	f001 fea0 	bl	80038b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001b78:	46c0      	nop			@ (mov r8, r8)
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
	...

08001b80 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001b84:	4b03      	ldr	r3, [pc, #12]	@ (8001b94 <DMA1_Channel1_IRQHandler+0x14>)
 8001b86:	0018      	movs	r0, r3
 8001b88:	f001 fbf0 	bl	800336c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b8c:	46c0      	nop			@ (mov r8, r8)
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	46c0      	nop			@ (mov r8, r8)
 8001b94:	200011e0 	.word	0x200011e0

08001b98 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b9c:	4b03      	ldr	r3, [pc, #12]	@ (8001bac <DMA1_Channel2_3_IRQHandler+0x14>)
 8001b9e:	0018      	movs	r0, r3
 8001ba0:	f001 fbe4 	bl	800336c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001ba4:	46c0      	nop			@ (mov r8, r8)
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	46c0      	nop			@ (mov r8, r8)
 8001bac:	200010ec 	.word	0x200010ec

08001bb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  return 1;
 8001bb4:	2301      	movs	r3, #1
}
 8001bb6:	0018      	movs	r0, r3
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <_kill>:

int _kill(int pid, int sig)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bc6:	f004 f85f 	bl	8005c88 <__errno>
 8001bca:	0003      	movs	r3, r0
 8001bcc:	2216      	movs	r2, #22
 8001bce:	601a      	str	r2, [r3, #0]
  return -1;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	425b      	negs	r3, r3
}
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	b002      	add	sp, #8
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <_exit>:

void _exit (int status)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001be4:	2301      	movs	r3, #1
 8001be6:	425a      	negs	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	0011      	movs	r1, r2
 8001bec:	0018      	movs	r0, r3
 8001bee:	f7ff ffe5 	bl	8001bbc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bf2:	46c0      	nop			@ (mov r8, r8)
 8001bf4:	e7fd      	b.n	8001bf2 <_exit+0x16>

08001bf6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b086      	sub	sp, #24
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	60f8      	str	r0, [r7, #12]
 8001bfe:	60b9      	str	r1, [r7, #8]
 8001c00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c02:	2300      	movs	r3, #0
 8001c04:	617b      	str	r3, [r7, #20]
 8001c06:	e00a      	b.n	8001c1e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c08:	e000      	b.n	8001c0c <_read+0x16>
 8001c0a:	bf00      	nop
 8001c0c:	0001      	movs	r1, r0
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	1c5a      	adds	r2, r3, #1
 8001c12:	60ba      	str	r2, [r7, #8]
 8001c14:	b2ca      	uxtb	r2, r1
 8001c16:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	617b      	str	r3, [r7, #20]
 8001c1e:	697a      	ldr	r2, [r7, #20]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	dbf0      	blt.n	8001c08 <_read+0x12>
  }

  return len;
 8001c26:	687b      	ldr	r3, [r7, #4]
}
 8001c28:	0018      	movs	r0, r3
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	b006      	add	sp, #24
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]
 8001c40:	e009      	b.n	8001c56 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	1c5a      	adds	r2, r3, #1
 8001c46:	60ba      	str	r2, [r7, #8]
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	0018      	movs	r0, r3
 8001c4c:	e000      	b.n	8001c50 <_write+0x20>
 8001c4e:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	3301      	adds	r3, #1
 8001c54:	617b      	str	r3, [r7, #20]
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	dbf1      	blt.n	8001c42 <_write+0x12>
  }
  return len;
 8001c5e:	687b      	ldr	r3, [r7, #4]
}
 8001c60:	0018      	movs	r0, r3
 8001c62:	46bd      	mov	sp, r7
 8001c64:	b006      	add	sp, #24
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <_close>:

int _close(int file)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c70:	2301      	movs	r3, #1
 8001c72:	425b      	negs	r3, r3
}
 8001c74:	0018      	movs	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	b002      	add	sp, #8
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	2280      	movs	r2, #128	@ 0x80
 8001c8a:	0192      	lsls	r2, r2, #6
 8001c8c:	605a      	str	r2, [r3, #4]
  return 0;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	0018      	movs	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	b002      	add	sp, #8
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <_isatty>:

int _isatty(int file)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ca0:	2301      	movs	r3, #1
}
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	b002      	add	sp, #8
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b084      	sub	sp, #16
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	60f8      	str	r0, [r7, #12]
 8001cb2:	60b9      	str	r1, [r7, #8]
 8001cb4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	0018      	movs	r0, r3
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	b004      	add	sp, #16
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cc8:	4a14      	ldr	r2, [pc, #80]	@ (8001d1c <_sbrk+0x5c>)
 8001cca:	4b15      	ldr	r3, [pc, #84]	@ (8001d20 <_sbrk+0x60>)
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cd4:	4b13      	ldr	r3, [pc, #76]	@ (8001d24 <_sbrk+0x64>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d102      	bne.n	8001ce2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cdc:	4b11      	ldr	r3, [pc, #68]	@ (8001d24 <_sbrk+0x64>)
 8001cde:	4a12      	ldr	r2, [pc, #72]	@ (8001d28 <_sbrk+0x68>)
 8001ce0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ce2:	4b10      	ldr	r3, [pc, #64]	@ (8001d24 <_sbrk+0x64>)
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	18d3      	adds	r3, r2, r3
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d207      	bcs.n	8001d00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cf0:	f003 ffca 	bl	8005c88 <__errno>
 8001cf4:	0003      	movs	r3, r0
 8001cf6:	220c      	movs	r2, #12
 8001cf8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	425b      	negs	r3, r3
 8001cfe:	e009      	b.n	8001d14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d00:	4b08      	ldr	r3, [pc, #32]	@ (8001d24 <_sbrk+0x64>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d06:	4b07      	ldr	r3, [pc, #28]	@ (8001d24 <_sbrk+0x64>)
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	18d2      	adds	r2, r2, r3
 8001d0e:	4b05      	ldr	r3, [pc, #20]	@ (8001d24 <_sbrk+0x64>)
 8001d10:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001d12:	68fb      	ldr	r3, [r7, #12]
}
 8001d14:	0018      	movs	r0, r3
 8001d16:	46bd      	mov	sp, r7
 8001d18:	b006      	add	sp, #24
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	20002000 	.word	0x20002000
 8001d20:	00000400 	.word	0x00000400
 8001d24:	20001250 	.word	0x20001250
 8001d28:	200013a8 	.word	0x200013a8

08001d2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d30:	46c0      	nop			@ (mov r8, r8)
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
	...

08001d38 <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

  ldr   r0, =_estack
 8001d38:	480d      	ldr	r0, [pc, #52]	@ (8001d70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d3a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d3c:	f7ff fff6 	bl	8001d2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d40:	480c      	ldr	r0, [pc, #48]	@ (8001d74 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d42:	490d      	ldr	r1, [pc, #52]	@ (8001d78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d44:	4a0d      	ldr	r2, [pc, #52]	@ (8001d7c <LoopForever+0xe>)
  movs r3, #0
 8001d46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d48:	e002      	b.n	8001d50 <LoopCopyDataInit>

08001d4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d4e:	3304      	adds	r3, #4

08001d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d54:	d3f9      	bcc.n	8001d4a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d56:	4a0a      	ldr	r2, [pc, #40]	@ (8001d80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d58:	4c0a      	ldr	r4, [pc, #40]	@ (8001d84 <LoopForever+0x16>)
  movs r3, #0
 8001d5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d5c:	e001      	b.n	8001d62 <LoopFillZerobss>

08001d5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d60:	3204      	adds	r2, #4

08001d62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d64:	d3fb      	bcc.n	8001d5e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d66:	f003 ff95 	bl	8005c94 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001d6a:	f7ff f96b 	bl	8001044 <main>

08001d6e <LoopForever>:

LoopForever:
  b LoopForever
 8001d6e:	e7fe      	b.n	8001d6e <LoopForever>
  ldr   r0, =_estack
 8001d70:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d78:	2000046c 	.word	0x2000046c
  ldr r2, =_sidata
 8001d7c:	08006d40 	.word	0x08006d40
  ldr r2, =_sbss
 8001d80:	2000046c 	.word	0x2000046c
  ldr r4, =_ebss
 8001d84:	200013a4 	.word	0x200013a4

08001d88 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d88:	e7fe      	b.n	8001d88 <ADC1_IRQHandler>
	...

08001d8c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d92:	1dfb      	adds	r3, r7, #7
 8001d94:	2200      	movs	r2, #0
 8001d96:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d98:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc8 <HAL_Init+0x3c>)
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001dc8 <HAL_Init+0x3c>)
 8001d9e:	2180      	movs	r1, #128	@ 0x80
 8001da0:	0049      	lsls	r1, r1, #1
 8001da2:	430a      	orrs	r2, r1
 8001da4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001da6:	2000      	movs	r0, #0
 8001da8:	f000 f810 	bl	8001dcc <HAL_InitTick>
 8001dac:	1e03      	subs	r3, r0, #0
 8001dae:	d003      	beq.n	8001db8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001db0:	1dfb      	adds	r3, r7, #7
 8001db2:	2201      	movs	r2, #1
 8001db4:	701a      	strb	r2, [r3, #0]
 8001db6:	e001      	b.n	8001dbc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001db8:	f7ff fd6e 	bl	8001898 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001dbc:	1dfb      	adds	r3, r7, #7
 8001dbe:	781b      	ldrb	r3, [r3, #0]
}
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	b002      	add	sp, #8
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40022000 	.word	0x40022000

08001dcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dcc:	b590      	push	{r4, r7, lr}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001dd4:	230f      	movs	r3, #15
 8001dd6:	18fb      	adds	r3, r7, r3
 8001dd8:	2200      	movs	r2, #0
 8001dda:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001ddc:	4b1d      	ldr	r3, [pc, #116]	@ (8001e54 <HAL_InitTick+0x88>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d02b      	beq.n	8001e3c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001de4:	4b1c      	ldr	r3, [pc, #112]	@ (8001e58 <HAL_InitTick+0x8c>)
 8001de6:	681c      	ldr	r4, [r3, #0]
 8001de8:	4b1a      	ldr	r3, [pc, #104]	@ (8001e54 <HAL_InitTick+0x88>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	0019      	movs	r1, r3
 8001dee:	23fa      	movs	r3, #250	@ 0xfa
 8001df0:	0098      	lsls	r0, r3, #2
 8001df2:	f7fe f991 	bl	8000118 <__udivsi3>
 8001df6:	0003      	movs	r3, r0
 8001df8:	0019      	movs	r1, r3
 8001dfa:	0020      	movs	r0, r4
 8001dfc:	f7fe f98c 	bl	8000118 <__udivsi3>
 8001e00:	0003      	movs	r3, r0
 8001e02:	0018      	movs	r0, r3
 8001e04:	f001 f995 	bl	8003132 <HAL_SYSTICK_Config>
 8001e08:	1e03      	subs	r3, r0, #0
 8001e0a:	d112      	bne.n	8001e32 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b03      	cmp	r3, #3
 8001e10:	d80a      	bhi.n	8001e28 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e12:	6879      	ldr	r1, [r7, #4]
 8001e14:	2301      	movs	r3, #1
 8001e16:	425b      	negs	r3, r3
 8001e18:	2200      	movs	r2, #0
 8001e1a:	0018      	movs	r0, r3
 8001e1c:	f001 f964 	bl	80030e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e20:	4b0e      	ldr	r3, [pc, #56]	@ (8001e5c <HAL_InitTick+0x90>)
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	e00d      	b.n	8001e44 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001e28:	230f      	movs	r3, #15
 8001e2a:	18fb      	adds	r3, r7, r3
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	701a      	strb	r2, [r3, #0]
 8001e30:	e008      	b.n	8001e44 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e32:	230f      	movs	r3, #15
 8001e34:	18fb      	adds	r3, r7, r3
 8001e36:	2201      	movs	r2, #1
 8001e38:	701a      	strb	r2, [r3, #0]
 8001e3a:	e003      	b.n	8001e44 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e3c:	230f      	movs	r3, #15
 8001e3e:	18fb      	adds	r3, r7, r3
 8001e40:	2201      	movs	r2, #1
 8001e42:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001e44:	230f      	movs	r3, #15
 8001e46:	18fb      	adds	r3, r7, r3
 8001e48:	781b      	ldrb	r3, [r3, #0]
}
 8001e4a:	0018      	movs	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	b005      	add	sp, #20
 8001e50:	bd90      	pop	{r4, r7, pc}
 8001e52:	46c0      	nop			@ (mov r8, r8)
 8001e54:	2000040c 	.word	0x2000040c
 8001e58:	20000404 	.word	0x20000404
 8001e5c:	20000408 	.word	0x20000408

08001e60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e64:	4b05      	ldr	r3, [pc, #20]	@ (8001e7c <HAL_IncTick+0x1c>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	001a      	movs	r2, r3
 8001e6a:	4b05      	ldr	r3, [pc, #20]	@ (8001e80 <HAL_IncTick+0x20>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	18d2      	adds	r2, r2, r3
 8001e70:	4b03      	ldr	r3, [pc, #12]	@ (8001e80 <HAL_IncTick+0x20>)
 8001e72:	601a      	str	r2, [r3, #0]
}
 8001e74:	46c0      	nop			@ (mov r8, r8)
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	46c0      	nop			@ (mov r8, r8)
 8001e7c:	2000040c 	.word	0x2000040c
 8001e80:	20001254 	.word	0x20001254

08001e84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  return uwTick;
 8001e88:	4b02      	ldr	r3, [pc, #8]	@ (8001e94 <HAL_GetTick+0x10>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
}
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	46c0      	nop			@ (mov r8, r8)
 8001e94:	20001254 	.word	0x20001254

08001e98 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a05      	ldr	r2, [pc, #20]	@ (8001ebc <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001ea8:	401a      	ands	r2, r3
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	431a      	orrs	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	601a      	str	r2, [r3, #0]
}
 8001eb2:	46c0      	nop			@ (mov r8, r8)
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	b002      	add	sp, #8
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	46c0      	nop			@ (mov r8, r8)
 8001ebc:	fe3fffff 	.word	0xfe3fffff

08001ec0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	23e0      	movs	r3, #224	@ 0xe0
 8001ece:	045b      	lsls	r3, r3, #17
 8001ed0:	4013      	ands	r3, r2
}
 8001ed2:	0018      	movs	r0, r3
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	b002      	add	sp, #8
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b084      	sub	sp, #16
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	60f8      	str	r0, [r7, #12]
 8001ee2:	60b9      	str	r1, [r7, #8]
 8001ee4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	68ba      	ldr	r2, [r7, #8]
 8001eec:	2104      	movs	r1, #4
 8001eee:	400a      	ands	r2, r1
 8001ef0:	2107      	movs	r1, #7
 8001ef2:	4091      	lsls	r1, r2
 8001ef4:	000a      	movs	r2, r1
 8001ef6:	43d2      	mvns	r2, r2
 8001ef8:	401a      	ands	r2, r3
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	2104      	movs	r1, #4
 8001efe:	400b      	ands	r3, r1
 8001f00:	6879      	ldr	r1, [r7, #4]
 8001f02:	4099      	lsls	r1, r3
 8001f04:	000b      	movs	r3, r1
 8001f06:	431a      	orrs	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001f0c:	46c0      	nop			@ (mov r8, r8)
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	b004      	add	sp, #16
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	2104      	movs	r1, #4
 8001f26:	400a      	ands	r2, r1
 8001f28:	2107      	movs	r1, #7
 8001f2a:	4091      	lsls	r1, r2
 8001f2c:	000a      	movs	r2, r1
 8001f2e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	2104      	movs	r1, #4
 8001f34:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001f36:	40da      	lsrs	r2, r3
 8001f38:	0013      	movs	r3, r2
}
 8001f3a:	0018      	movs	r0, r3
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	b002      	add	sp, #8
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b082      	sub	sp, #8
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68da      	ldr	r2, [r3, #12]
 8001f4e:	23c0      	movs	r3, #192	@ 0xc0
 8001f50:	011b      	lsls	r3, r3, #4
 8001f52:	4013      	ands	r3, r2
 8001f54:	d101      	bne.n	8001f5a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001f56:	2301      	movs	r3, #1
 8001f58:	e000      	b.n	8001f5c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	b002      	add	sp, #8
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f74:	68ba      	ldr	r2, [r7, #8]
 8001f76:	211f      	movs	r1, #31
 8001f78:	400a      	ands	r2, r1
 8001f7a:	210f      	movs	r1, #15
 8001f7c:	4091      	lsls	r1, r2
 8001f7e:	000a      	movs	r2, r1
 8001f80:	43d2      	mvns	r2, r2
 8001f82:	401a      	ands	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	0e9b      	lsrs	r3, r3, #26
 8001f88:	210f      	movs	r1, #15
 8001f8a:	4019      	ands	r1, r3
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	201f      	movs	r0, #31
 8001f90:	4003      	ands	r3, r0
 8001f92:	4099      	lsls	r1, r3
 8001f94:	000b      	movs	r3, r1
 8001f96:	431a      	orrs	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f9c:	46c0      	nop			@ (mov r8, r8)
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	b004      	add	sp, #16
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	035b      	lsls	r3, r3, #13
 8001fb6:	0b5b      	lsrs	r3, r3, #13
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001fbe:	46c0      	nop			@ (mov r8, r8)
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	b002      	add	sp, #8
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b082      	sub	sp, #8
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
 8001fce:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	0352      	lsls	r2, r2, #13
 8001fd8:	0b52      	lsrs	r2, r2, #13
 8001fda:	43d2      	mvns	r2, r2
 8001fdc:	401a      	ands	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001fe2:	46c0      	nop			@ (mov r8, r8)
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	b002      	add	sp, #8
 8001fe8:	bd80      	pop	{r7, pc}
	...

08001fec <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	695b      	ldr	r3, [r3, #20]
 8001ffc:	68ba      	ldr	r2, [r7, #8]
 8001ffe:	0212      	lsls	r2, r2, #8
 8002000:	43d2      	mvns	r2, r2
 8002002:	401a      	ands	r2, r3
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	021b      	lsls	r3, r3, #8
 8002008:	6879      	ldr	r1, [r7, #4]
 800200a:	400b      	ands	r3, r1
 800200c:	4904      	ldr	r1, [pc, #16]	@ (8002020 <LL_ADC_SetChannelSamplingTime+0x34>)
 800200e:	400b      	ands	r3, r1
 8002010:	431a      	orrs	r2, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002016:	46c0      	nop			@ (mov r8, r8)
 8002018:	46bd      	mov	sp, r7
 800201a:	b004      	add	sp, #16
 800201c:	bd80      	pop	{r7, pc}
 800201e:	46c0      	nop			@ (mov r8, r8)
 8002020:	07ffff00 	.word	0x07ffff00

08002024 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	4a05      	ldr	r2, [pc, #20]	@ (8002048 <LL_ADC_EnableInternalRegulator+0x24>)
 8002032:	4013      	ands	r3, r2
 8002034:	2280      	movs	r2, #128	@ 0x80
 8002036:	0552      	lsls	r2, r2, #21
 8002038:	431a      	orrs	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800203e:	46c0      	nop			@ (mov r8, r8)
 8002040:	46bd      	mov	sp, r7
 8002042:	b002      	add	sp, #8
 8002044:	bd80      	pop	{r7, pc}
 8002046:	46c0      	nop			@ (mov r8, r8)
 8002048:	6fffffe8 	.word	0x6fffffe8

0800204c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	2380      	movs	r3, #128	@ 0x80
 800205a:	055b      	lsls	r3, r3, #21
 800205c:	401a      	ands	r2, r3
 800205e:	2380      	movs	r3, #128	@ 0x80
 8002060:	055b      	lsls	r3, r3, #21
 8002062:	429a      	cmp	r2, r3
 8002064:	d101      	bne.n	800206a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8002066:	2301      	movs	r3, #1
 8002068:	e000      	b.n	800206c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800206a:	2300      	movs	r3, #0
}
 800206c:	0018      	movs	r0, r3
 800206e:	46bd      	mov	sp, r7
 8002070:	b002      	add	sp, #8
 8002072:	bd80      	pop	{r7, pc}

08002074 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	4a04      	ldr	r2, [pc, #16]	@ (8002094 <LL_ADC_Enable+0x20>)
 8002082:	4013      	ands	r3, r2
 8002084:	2201      	movs	r2, #1
 8002086:	431a      	orrs	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800208c:	46c0      	nop			@ (mov r8, r8)
 800208e:	46bd      	mov	sp, r7
 8002090:	b002      	add	sp, #8
 8002092:	bd80      	pop	{r7, pc}
 8002094:	7fffffe8 	.word	0x7fffffe8

08002098 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	4a04      	ldr	r2, [pc, #16]	@ (80020b8 <LL_ADC_Disable+0x20>)
 80020a6:	4013      	ands	r3, r2
 80020a8:	2202      	movs	r2, #2
 80020aa:	431a      	orrs	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80020b0:	46c0      	nop			@ (mov r8, r8)
 80020b2:	46bd      	mov	sp, r7
 80020b4:	b002      	add	sp, #8
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	7fffffe8 	.word	0x7fffffe8

080020bc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	2201      	movs	r2, #1
 80020ca:	4013      	ands	r3, r2
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d101      	bne.n	80020d4 <LL_ADC_IsEnabled+0x18>
 80020d0:	2301      	movs	r3, #1
 80020d2:	e000      	b.n	80020d6 <LL_ADC_IsEnabled+0x1a>
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	0018      	movs	r0, r3
 80020d8:	46bd      	mov	sp, r7
 80020da:	b002      	add	sp, #8
 80020dc:	bd80      	pop	{r7, pc}

080020de <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b082      	sub	sp, #8
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	2202      	movs	r2, #2
 80020ec:	4013      	ands	r3, r2
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d101      	bne.n	80020f6 <LL_ADC_IsDisableOngoing+0x18>
 80020f2:	2301      	movs	r3, #1
 80020f4:	e000      	b.n	80020f8 <LL_ADC_IsDisableOngoing+0x1a>
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	0018      	movs	r0, r3
 80020fa:	46bd      	mov	sp, r7
 80020fc:	b002      	add	sp, #8
 80020fe:	bd80      	pop	{r7, pc}

08002100 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	4a04      	ldr	r2, [pc, #16]	@ (8002120 <LL_ADC_REG_StartConversion+0x20>)
 800210e:	4013      	ands	r3, r2
 8002110:	2204      	movs	r2, #4
 8002112:	431a      	orrs	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002118:	46c0      	nop			@ (mov r8, r8)
 800211a:	46bd      	mov	sp, r7
 800211c:	b002      	add	sp, #8
 800211e:	bd80      	pop	{r7, pc}
 8002120:	7fffffe8 	.word	0x7fffffe8

08002124 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	2204      	movs	r2, #4
 8002132:	4013      	ands	r3, r2
 8002134:	2b04      	cmp	r3, #4
 8002136:	d101      	bne.n	800213c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002138:	2301      	movs	r3, #1
 800213a:	e000      	b.n	800213e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800213c:	2300      	movs	r3, #0
}
 800213e:	0018      	movs	r0, r3
 8002140:	46bd      	mov	sp, r7
 8002142:	b002      	add	sp, #8
 8002144:	bd80      	pop	{r7, pc}
	...

08002148 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b088      	sub	sp, #32
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002150:	231f      	movs	r3, #31
 8002152:	18fb      	adds	r3, r7, r3
 8002154:	2200      	movs	r2, #0
 8002156:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8002158:	2300      	movs	r3, #0
 800215a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 800215c:	2300      	movs	r3, #0
 800215e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002160:	2300      	movs	r3, #0
 8002162:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e17f      	b.n	800246e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002172:	2b00      	cmp	r3, #0
 8002174:	d10a      	bne.n	800218c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	0018      	movs	r0, r3
 800217a:	f7ff fbb1 	bl	80018e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2254      	movs	r2, #84	@ 0x54
 8002188:	2100      	movs	r1, #0
 800218a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	0018      	movs	r0, r3
 8002192:	f7ff ff5b 	bl	800204c <LL_ADC_IsInternalRegulatorEnabled>
 8002196:	1e03      	subs	r3, r0, #0
 8002198:	d115      	bne.n	80021c6 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	0018      	movs	r0, r3
 80021a0:	f7ff ff40 	bl	8002024 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021a4:	4bb4      	ldr	r3, [pc, #720]	@ (8002478 <HAL_ADC_Init+0x330>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	49b4      	ldr	r1, [pc, #720]	@ (800247c <HAL_ADC_Init+0x334>)
 80021aa:	0018      	movs	r0, r3
 80021ac:	f7fd ffb4 	bl	8000118 <__udivsi3>
 80021b0:	0003      	movs	r3, r0
 80021b2:	3301      	adds	r3, #1
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80021b8:	e002      	b.n	80021c0 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	3b01      	subs	r3, #1
 80021be:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1f9      	bne.n	80021ba <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	0018      	movs	r0, r3
 80021cc:	f7ff ff3e 	bl	800204c <LL_ADC_IsInternalRegulatorEnabled>
 80021d0:	1e03      	subs	r3, r0, #0
 80021d2:	d10f      	bne.n	80021f4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021d8:	2210      	movs	r2, #16
 80021da:	431a      	orrs	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021e4:	2201      	movs	r2, #1
 80021e6:	431a      	orrs	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80021ec:	231f      	movs	r3, #31
 80021ee:	18fb      	adds	r3, r7, r3
 80021f0:	2201      	movs	r2, #1
 80021f2:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	0018      	movs	r0, r3
 80021fa:	f7ff ff93 	bl	8002124 <LL_ADC_REG_IsConversionOngoing>
 80021fe:	0003      	movs	r3, r0
 8002200:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002206:	2210      	movs	r2, #16
 8002208:	4013      	ands	r3, r2
 800220a:	d000      	beq.n	800220e <HAL_ADC_Init+0xc6>
 800220c:	e122      	b.n	8002454 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d000      	beq.n	8002216 <HAL_ADC_Init+0xce>
 8002214:	e11e      	b.n	8002454 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800221a:	4a99      	ldr	r2, [pc, #612]	@ (8002480 <HAL_ADC_Init+0x338>)
 800221c:	4013      	ands	r3, r2
 800221e:	2202      	movs	r2, #2
 8002220:	431a      	orrs	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	0018      	movs	r0, r3
 800222c:	f7ff ff46 	bl	80020bc <LL_ADC_IsEnabled>
 8002230:	1e03      	subs	r3, r0, #0
 8002232:	d000      	beq.n	8002236 <HAL_ADC_Init+0xee>
 8002234:	e0ad      	b.n	8002392 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	7e1b      	ldrb	r3, [r3, #24]
 800223e:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002240:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	7e5b      	ldrb	r3, [r3, #25]
 8002246:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002248:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	7e9b      	ldrb	r3, [r3, #26]
 800224e:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002250:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002256:	2b00      	cmp	r3, #0
 8002258:	d002      	beq.n	8002260 <HAL_ADC_Init+0x118>
 800225a:	2380      	movs	r3, #128	@ 0x80
 800225c:	015b      	lsls	r3, r3, #5
 800225e:	e000      	b.n	8002262 <HAL_ADC_Init+0x11a>
 8002260:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002262:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002268:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	2b00      	cmp	r3, #0
 8002270:	da04      	bge.n	800227c <HAL_ADC_Init+0x134>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	085b      	lsrs	r3, r3, #1
 800227a:	e001      	b.n	8002280 <HAL_ADC_Init+0x138>
 800227c:	2380      	movs	r3, #128	@ 0x80
 800227e:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8002280:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	212c      	movs	r1, #44	@ 0x2c
 8002286:	5c5b      	ldrb	r3, [r3, r1]
 8002288:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800228a:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4313      	orrs	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2220      	movs	r2, #32
 8002296:	5c9b      	ldrb	r3, [r3, r2]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d115      	bne.n	80022c8 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	7e9b      	ldrb	r3, [r3, #26]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d105      	bne.n	80022b0 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	2280      	movs	r2, #128	@ 0x80
 80022a8:	0252      	lsls	r2, r2, #9
 80022aa:	4313      	orrs	r3, r2
 80022ac:	61bb      	str	r3, [r7, #24]
 80022ae:	e00b      	b.n	80022c8 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b4:	2220      	movs	r2, #32
 80022b6:	431a      	orrs	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022c0:	2201      	movs	r2, #1
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d00a      	beq.n	80022e6 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022d4:	23e0      	movs	r3, #224	@ 0xe0
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80022de:	4313      	orrs	r3, r2
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	4a65      	ldr	r2, [pc, #404]	@ (8002484 <HAL_ADC_Init+0x33c>)
 80022ee:	4013      	ands	r3, r2
 80022f0:	0019      	movs	r1, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	430a      	orrs	r2, r1
 80022fa:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	0f9b      	lsrs	r3, r3, #30
 8002302:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002308:	4313      	orrs	r3, r2
 800230a:	697a      	ldr	r2, [r7, #20]
 800230c:	4313      	orrs	r3, r2
 800230e:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	223c      	movs	r2, #60	@ 0x3c
 8002314:	5c9b      	ldrb	r3, [r3, r2]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d111      	bne.n	800233e <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	0f9b      	lsrs	r3, r3, #30
 8002320:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002326:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 800232c:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8002332:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	4313      	orrs	r3, r2
 8002338:	2201      	movs	r2, #1
 800233a:	4313      	orrs	r3, r2
 800233c:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	4a50      	ldr	r2, [pc, #320]	@ (8002488 <HAL_ADC_Init+0x340>)
 8002346:	4013      	ands	r3, r2
 8002348:	0019      	movs	r1, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	430a      	orrs	r2, r1
 8002352:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685a      	ldr	r2, [r3, #4]
 8002358:	23c0      	movs	r3, #192	@ 0xc0
 800235a:	061b      	lsls	r3, r3, #24
 800235c:	429a      	cmp	r2, r3
 800235e:	d018      	beq.n	8002392 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002364:	2380      	movs	r3, #128	@ 0x80
 8002366:	05db      	lsls	r3, r3, #23
 8002368:	429a      	cmp	r2, r3
 800236a:	d012      	beq.n	8002392 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002370:	2380      	movs	r3, #128	@ 0x80
 8002372:	061b      	lsls	r3, r3, #24
 8002374:	429a      	cmp	r2, r3
 8002376:	d00c      	beq.n	8002392 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002378:	4b44      	ldr	r3, [pc, #272]	@ (800248c <HAL_ADC_Init+0x344>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a44      	ldr	r2, [pc, #272]	@ (8002490 <HAL_ADC_Init+0x348>)
 800237e:	4013      	ands	r3, r2
 8002380:	0019      	movs	r1, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685a      	ldr	r2, [r3, #4]
 8002386:	23f0      	movs	r3, #240	@ 0xf0
 8002388:	039b      	lsls	r3, r3, #14
 800238a:	401a      	ands	r2, r3
 800238c:	4b3f      	ldr	r3, [pc, #252]	@ (800248c <HAL_ADC_Init+0x344>)
 800238e:	430a      	orrs	r2, r1
 8002390:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6818      	ldr	r0, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800239a:	001a      	movs	r2, r3
 800239c:	2100      	movs	r1, #0
 800239e:	f7ff fd9c 	bl	8001eda <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6818      	ldr	r0, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023aa:	493a      	ldr	r1, [pc, #232]	@ (8002494 <HAL_ADC_Init+0x34c>)
 80023ac:	001a      	movs	r2, r3
 80023ae:	f7ff fd94 	bl	8001eda <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d109      	bne.n	80023ce <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2110      	movs	r1, #16
 80023c6:	4249      	negs	r1, r1
 80023c8:	430a      	orrs	r2, r1
 80023ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80023cc:	e018      	b.n	8002400 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	691a      	ldr	r2, [r3, #16]
 80023d2:	2380      	movs	r3, #128	@ 0x80
 80023d4:	039b      	lsls	r3, r3, #14
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d112      	bne.n	8002400 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	69db      	ldr	r3, [r3, #28]
 80023e4:	3b01      	subs	r3, #1
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	221c      	movs	r2, #28
 80023ea:	4013      	ands	r3, r2
 80023ec:	2210      	movs	r2, #16
 80023ee:	4252      	negs	r2, r2
 80023f0:	409a      	lsls	r2, r3
 80023f2:	0011      	movs	r1, r2
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	430a      	orrs	r2, r1
 80023fe:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2100      	movs	r1, #0
 8002406:	0018      	movs	r0, r3
 8002408:	f7ff fd84 	bl	8001f14 <LL_ADC_GetSamplingTimeCommonChannels>
 800240c:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002412:	429a      	cmp	r2, r3
 8002414:	d10b      	bne.n	800242e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002420:	2203      	movs	r2, #3
 8002422:	4393      	bics	r3, r2
 8002424:	2201      	movs	r2, #1
 8002426:	431a      	orrs	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800242c:	e01c      	b.n	8002468 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002432:	2212      	movs	r2, #18
 8002434:	4393      	bics	r3, r2
 8002436:	2210      	movs	r2, #16
 8002438:	431a      	orrs	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002442:	2201      	movs	r2, #1
 8002444:	431a      	orrs	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 800244a:	231f      	movs	r3, #31
 800244c:	18fb      	adds	r3, r7, r3
 800244e:	2201      	movs	r2, #1
 8002450:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002452:	e009      	b.n	8002468 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002458:	2210      	movs	r2, #16
 800245a:	431a      	orrs	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002460:	231f      	movs	r3, #31
 8002462:	18fb      	adds	r3, r7, r3
 8002464:	2201      	movs	r2, #1
 8002466:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002468:	231f      	movs	r3, #31
 800246a:	18fb      	adds	r3, r7, r3
 800246c:	781b      	ldrb	r3, [r3, #0]
}
 800246e:	0018      	movs	r0, r3
 8002470:	46bd      	mov	sp, r7
 8002472:	b008      	add	sp, #32
 8002474:	bd80      	pop	{r7, pc}
 8002476:	46c0      	nop			@ (mov r8, r8)
 8002478:	20000404 	.word	0x20000404
 800247c:	00030d40 	.word	0x00030d40
 8002480:	fffffefd 	.word	0xfffffefd
 8002484:	ffde0201 	.word	0xffde0201
 8002488:	1ffffc02 	.word	0x1ffffc02
 800248c:	40012708 	.word	0x40012708
 8002490:	ffc3ffff 	.word	0xffc3ffff
 8002494:	07ffff04 	.word	0x07ffff04

08002498 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002498:	b5b0      	push	{r4, r5, r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	0018      	movs	r0, r3
 80024aa:	f7ff fe3b 	bl	8002124 <LL_ADC_REG_IsConversionOngoing>
 80024ae:	1e03      	subs	r3, r0, #0
 80024b0:	d16c      	bne.n	800258c <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2254      	movs	r2, #84	@ 0x54
 80024b6:	5c9b      	ldrb	r3, [r3, r2]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d101      	bne.n	80024c0 <HAL_ADC_Start_DMA+0x28>
 80024bc:	2302      	movs	r3, #2
 80024be:	e06c      	b.n	800259a <HAL_ADC_Start_DMA+0x102>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2254      	movs	r2, #84	@ 0x54
 80024c4:	2101      	movs	r1, #1
 80024c6:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	2201      	movs	r2, #1
 80024d0:	4013      	ands	r3, r2
 80024d2:	d113      	bne.n	80024fc <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	0018      	movs	r0, r3
 80024da:	f7ff fdef 	bl	80020bc <LL_ADC_IsEnabled>
 80024de:	1e03      	subs	r3, r0, #0
 80024e0:	d004      	beq.n	80024ec <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	0018      	movs	r0, r3
 80024e8:	f7ff fdd6 	bl	8002098 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68da      	ldr	r2, [r3, #12]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2101      	movs	r1, #1
 80024f8:	430a      	orrs	r2, r1
 80024fa:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80024fc:	2517      	movs	r5, #23
 80024fe:	197c      	adds	r4, r7, r5
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	0018      	movs	r0, r3
 8002504:	f000 fa3e 	bl	8002984 <ADC_Enable>
 8002508:	0003      	movs	r3, r0
 800250a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800250c:	002c      	movs	r4, r5
 800250e:	193b      	adds	r3, r7, r4
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d13e      	bne.n	8002594 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800251a:	4a22      	ldr	r2, [pc, #136]	@ (80025a4 <HAL_ADC_Start_DMA+0x10c>)
 800251c:	4013      	ands	r3, r2
 800251e:	2280      	movs	r2, #128	@ 0x80
 8002520:	0052      	lsls	r2, r2, #1
 8002522:	431a      	orrs	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2200      	movs	r2, #0
 800252c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002532:	4a1d      	ldr	r2, [pc, #116]	@ (80025a8 <HAL_ADC_Start_DMA+0x110>)
 8002534:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800253a:	4a1c      	ldr	r2, [pc, #112]	@ (80025ac <HAL_ADC_Start_DMA+0x114>)
 800253c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002542:	4a1b      	ldr	r2, [pc, #108]	@ (80025b0 <HAL_ADC_Start_DMA+0x118>)
 8002544:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	221c      	movs	r2, #28
 800254c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2254      	movs	r2, #84	@ 0x54
 8002552:	2100      	movs	r1, #0
 8002554:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2110      	movs	r1, #16
 8002562:	430a      	orrs	r2, r1
 8002564:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	3340      	adds	r3, #64	@ 0x40
 8002570:	0019      	movs	r1, r3
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	193c      	adds	r4, r7, r4
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f000 fe72 	bl	8003260 <HAL_DMA_Start_IT>
 800257c:	0003      	movs	r3, r0
 800257e:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	0018      	movs	r0, r3
 8002586:	f7ff fdbb 	bl	8002100 <LL_ADC_REG_StartConversion>
 800258a:	e003      	b.n	8002594 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800258c:	2317      	movs	r3, #23
 800258e:	18fb      	adds	r3, r7, r3
 8002590:	2202      	movs	r2, #2
 8002592:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002594:	2317      	movs	r3, #23
 8002596:	18fb      	adds	r3, r7, r3
 8002598:	781b      	ldrb	r3, [r3, #0]
}
 800259a:	0018      	movs	r0, r3
 800259c:	46bd      	mov	sp, r7
 800259e:	b006      	add	sp, #24
 80025a0:	bdb0      	pop	{r4, r5, r7, pc}
 80025a2:	46c0      	nop			@ (mov r8, r8)
 80025a4:	fffff0fe 	.word	0xfffff0fe
 80025a8:	08002b4d 	.word	0x08002b4d
 80025ac:	08002c15 	.word	0x08002c15
 80025b0:	08002c33 	.word	0x08002c33

080025b4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80025bc:	46c0      	nop			@ (mov r8, r8)
 80025be:	46bd      	mov	sp, r7
 80025c0:	b002      	add	sp, #8
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80025cc:	46c0      	nop			@ (mov r8, r8)
 80025ce:	46bd      	mov	sp, r7
 80025d0:	b002      	add	sp, #8
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025de:	2317      	movs	r3, #23
 80025e0:	18fb      	adds	r3, r7, r3
 80025e2:	2200      	movs	r2, #0
 80025e4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80025e6:	2300      	movs	r3, #0
 80025e8:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2254      	movs	r2, #84	@ 0x54
 80025ee:	5c9b      	ldrb	r3, [r3, r2]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d101      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x24>
 80025f4:	2302      	movs	r3, #2
 80025f6:	e1c0      	b.n	800297a <HAL_ADC_ConfigChannel+0x3a6>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2254      	movs	r2, #84	@ 0x54
 80025fc:	2101      	movs	r1, #1
 80025fe:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	0018      	movs	r0, r3
 8002606:	f7ff fd8d 	bl	8002124 <LL_ADC_REG_IsConversionOngoing>
 800260a:	1e03      	subs	r3, r0, #0
 800260c:	d000      	beq.n	8002610 <HAL_ADC_ConfigChannel+0x3c>
 800260e:	e1a3      	b.n	8002958 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	2b02      	cmp	r3, #2
 8002616:	d100      	bne.n	800261a <HAL_ADC_ConfigChannel+0x46>
 8002618:	e143      	b.n	80028a2 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	691a      	ldr	r2, [r3, #16]
 800261e:	2380      	movs	r3, #128	@ 0x80
 8002620:	061b      	lsls	r3, r3, #24
 8002622:	429a      	cmp	r2, r3
 8002624:	d004      	beq.n	8002630 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800262a:	4ac1      	ldr	r2, [pc, #772]	@ (8002930 <HAL_ADC_ConfigChannel+0x35c>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d108      	bne.n	8002642 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	0019      	movs	r1, r3
 800263a:	0010      	movs	r0, r2
 800263c:	f7ff fcb2 	bl	8001fa4 <LL_ADC_REG_SetSequencerChAdd>
 8002640:	e0c9      	b.n	80027d6 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	211f      	movs	r1, #31
 800264c:	400b      	ands	r3, r1
 800264e:	210f      	movs	r1, #15
 8002650:	4099      	lsls	r1, r3
 8002652:	000b      	movs	r3, r1
 8002654:	43db      	mvns	r3, r3
 8002656:	4013      	ands	r3, r2
 8002658:	0019      	movs	r1, r3
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	035b      	lsls	r3, r3, #13
 8002660:	0b5b      	lsrs	r3, r3, #13
 8002662:	d105      	bne.n	8002670 <HAL_ADC_ConfigChannel+0x9c>
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	0e9b      	lsrs	r3, r3, #26
 800266a:	221f      	movs	r2, #31
 800266c:	4013      	ands	r3, r2
 800266e:	e098      	b.n	80027a2 <HAL_ADC_ConfigChannel+0x1ce>
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2201      	movs	r2, #1
 8002676:	4013      	ands	r3, r2
 8002678:	d000      	beq.n	800267c <HAL_ADC_ConfigChannel+0xa8>
 800267a:	e091      	b.n	80027a0 <HAL_ADC_ConfigChannel+0x1cc>
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2202      	movs	r2, #2
 8002682:	4013      	ands	r3, r2
 8002684:	d000      	beq.n	8002688 <HAL_ADC_ConfigChannel+0xb4>
 8002686:	e089      	b.n	800279c <HAL_ADC_ConfigChannel+0x1c8>
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2204      	movs	r2, #4
 800268e:	4013      	ands	r3, r2
 8002690:	d000      	beq.n	8002694 <HAL_ADC_ConfigChannel+0xc0>
 8002692:	e081      	b.n	8002798 <HAL_ADC_ConfigChannel+0x1c4>
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2208      	movs	r2, #8
 800269a:	4013      	ands	r3, r2
 800269c:	d000      	beq.n	80026a0 <HAL_ADC_ConfigChannel+0xcc>
 800269e:	e079      	b.n	8002794 <HAL_ADC_ConfigChannel+0x1c0>
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2210      	movs	r2, #16
 80026a6:	4013      	ands	r3, r2
 80026a8:	d000      	beq.n	80026ac <HAL_ADC_ConfigChannel+0xd8>
 80026aa:	e071      	b.n	8002790 <HAL_ADC_ConfigChannel+0x1bc>
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2220      	movs	r2, #32
 80026b2:	4013      	ands	r3, r2
 80026b4:	d000      	beq.n	80026b8 <HAL_ADC_ConfigChannel+0xe4>
 80026b6:	e069      	b.n	800278c <HAL_ADC_ConfigChannel+0x1b8>
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2240      	movs	r2, #64	@ 0x40
 80026be:	4013      	ands	r3, r2
 80026c0:	d000      	beq.n	80026c4 <HAL_ADC_ConfigChannel+0xf0>
 80026c2:	e061      	b.n	8002788 <HAL_ADC_ConfigChannel+0x1b4>
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2280      	movs	r2, #128	@ 0x80
 80026ca:	4013      	ands	r3, r2
 80026cc:	d000      	beq.n	80026d0 <HAL_ADC_ConfigChannel+0xfc>
 80026ce:	e059      	b.n	8002784 <HAL_ADC_ConfigChannel+0x1b0>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	2380      	movs	r3, #128	@ 0x80
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	4013      	ands	r3, r2
 80026da:	d151      	bne.n	8002780 <HAL_ADC_ConfigChannel+0x1ac>
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	2380      	movs	r3, #128	@ 0x80
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4013      	ands	r3, r2
 80026e6:	d149      	bne.n	800277c <HAL_ADC_ConfigChannel+0x1a8>
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	2380      	movs	r3, #128	@ 0x80
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	4013      	ands	r3, r2
 80026f2:	d141      	bne.n	8002778 <HAL_ADC_ConfigChannel+0x1a4>
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	2380      	movs	r3, #128	@ 0x80
 80026fa:	011b      	lsls	r3, r3, #4
 80026fc:	4013      	ands	r3, r2
 80026fe:	d139      	bne.n	8002774 <HAL_ADC_ConfigChannel+0x1a0>
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	2380      	movs	r3, #128	@ 0x80
 8002706:	015b      	lsls	r3, r3, #5
 8002708:	4013      	ands	r3, r2
 800270a:	d131      	bne.n	8002770 <HAL_ADC_ConfigChannel+0x19c>
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	2380      	movs	r3, #128	@ 0x80
 8002712:	019b      	lsls	r3, r3, #6
 8002714:	4013      	ands	r3, r2
 8002716:	d129      	bne.n	800276c <HAL_ADC_ConfigChannel+0x198>
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	2380      	movs	r3, #128	@ 0x80
 800271e:	01db      	lsls	r3, r3, #7
 8002720:	4013      	ands	r3, r2
 8002722:	d121      	bne.n	8002768 <HAL_ADC_ConfigChannel+0x194>
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	2380      	movs	r3, #128	@ 0x80
 800272a:	021b      	lsls	r3, r3, #8
 800272c:	4013      	ands	r3, r2
 800272e:	d119      	bne.n	8002764 <HAL_ADC_ConfigChannel+0x190>
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	2380      	movs	r3, #128	@ 0x80
 8002736:	025b      	lsls	r3, r3, #9
 8002738:	4013      	ands	r3, r2
 800273a:	d111      	bne.n	8002760 <HAL_ADC_ConfigChannel+0x18c>
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	2380      	movs	r3, #128	@ 0x80
 8002742:	029b      	lsls	r3, r3, #10
 8002744:	4013      	ands	r3, r2
 8002746:	d109      	bne.n	800275c <HAL_ADC_ConfigChannel+0x188>
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	2380      	movs	r3, #128	@ 0x80
 800274e:	02db      	lsls	r3, r3, #11
 8002750:	4013      	ands	r3, r2
 8002752:	d001      	beq.n	8002758 <HAL_ADC_ConfigChannel+0x184>
 8002754:	2312      	movs	r3, #18
 8002756:	e024      	b.n	80027a2 <HAL_ADC_ConfigChannel+0x1ce>
 8002758:	2300      	movs	r3, #0
 800275a:	e022      	b.n	80027a2 <HAL_ADC_ConfigChannel+0x1ce>
 800275c:	2311      	movs	r3, #17
 800275e:	e020      	b.n	80027a2 <HAL_ADC_ConfigChannel+0x1ce>
 8002760:	2310      	movs	r3, #16
 8002762:	e01e      	b.n	80027a2 <HAL_ADC_ConfigChannel+0x1ce>
 8002764:	230f      	movs	r3, #15
 8002766:	e01c      	b.n	80027a2 <HAL_ADC_ConfigChannel+0x1ce>
 8002768:	230e      	movs	r3, #14
 800276a:	e01a      	b.n	80027a2 <HAL_ADC_ConfigChannel+0x1ce>
 800276c:	230d      	movs	r3, #13
 800276e:	e018      	b.n	80027a2 <HAL_ADC_ConfigChannel+0x1ce>
 8002770:	230c      	movs	r3, #12
 8002772:	e016      	b.n	80027a2 <HAL_ADC_ConfigChannel+0x1ce>
 8002774:	230b      	movs	r3, #11
 8002776:	e014      	b.n	80027a2 <HAL_ADC_ConfigChannel+0x1ce>
 8002778:	230a      	movs	r3, #10
 800277a:	e012      	b.n	80027a2 <HAL_ADC_ConfigChannel+0x1ce>
 800277c:	2309      	movs	r3, #9
 800277e:	e010      	b.n	80027a2 <HAL_ADC_ConfigChannel+0x1ce>
 8002780:	2308      	movs	r3, #8
 8002782:	e00e      	b.n	80027a2 <HAL_ADC_ConfigChannel+0x1ce>
 8002784:	2307      	movs	r3, #7
 8002786:	e00c      	b.n	80027a2 <HAL_ADC_ConfigChannel+0x1ce>
 8002788:	2306      	movs	r3, #6
 800278a:	e00a      	b.n	80027a2 <HAL_ADC_ConfigChannel+0x1ce>
 800278c:	2305      	movs	r3, #5
 800278e:	e008      	b.n	80027a2 <HAL_ADC_ConfigChannel+0x1ce>
 8002790:	2304      	movs	r3, #4
 8002792:	e006      	b.n	80027a2 <HAL_ADC_ConfigChannel+0x1ce>
 8002794:	2303      	movs	r3, #3
 8002796:	e004      	b.n	80027a2 <HAL_ADC_ConfigChannel+0x1ce>
 8002798:	2302      	movs	r3, #2
 800279a:	e002      	b.n	80027a2 <HAL_ADC_ConfigChannel+0x1ce>
 800279c:	2301      	movs	r3, #1
 800279e:	e000      	b.n	80027a2 <HAL_ADC_ConfigChannel+0x1ce>
 80027a0:	2300      	movs	r3, #0
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	6852      	ldr	r2, [r2, #4]
 80027a6:	201f      	movs	r0, #31
 80027a8:	4002      	ands	r2, r0
 80027aa:	4093      	lsls	r3, r2
 80027ac:	000a      	movs	r2, r1
 80027ae:	431a      	orrs	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	089b      	lsrs	r3, r3, #2
 80027ba:	1c5a      	adds	r2, r3, #1
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	69db      	ldr	r3, [r3, #28]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d808      	bhi.n	80027d6 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6818      	ldr	r0, [r3, #0]
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	6859      	ldr	r1, [r3, #4]
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	001a      	movs	r2, r3
 80027d2:	f7ff fbc7 	bl	8001f64 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6818      	ldr	r0, [r3, #0]
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	6819      	ldr	r1, [r3, #0]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	001a      	movs	r2, r3
 80027e4:	f7ff fc02 	bl	8001fec <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	db00      	blt.n	80027f2 <HAL_ADC_ConfigChannel+0x21e>
 80027f0:	e0bc      	b.n	800296c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027f2:	4b50      	ldr	r3, [pc, #320]	@ (8002934 <HAL_ADC_ConfigChannel+0x360>)
 80027f4:	0018      	movs	r0, r3
 80027f6:	f7ff fb63 	bl	8001ec0 <LL_ADC_GetCommonPathInternalCh>
 80027fa:	0003      	movs	r3, r0
 80027fc:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a4d      	ldr	r2, [pc, #308]	@ (8002938 <HAL_ADC_ConfigChannel+0x364>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d122      	bne.n	800284e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	2380      	movs	r3, #128	@ 0x80
 800280c:	041b      	lsls	r3, r3, #16
 800280e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002810:	d11d      	bne.n	800284e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	2280      	movs	r2, #128	@ 0x80
 8002816:	0412      	lsls	r2, r2, #16
 8002818:	4313      	orrs	r3, r2
 800281a:	4a46      	ldr	r2, [pc, #280]	@ (8002934 <HAL_ADC_ConfigChannel+0x360>)
 800281c:	0019      	movs	r1, r3
 800281e:	0010      	movs	r0, r2
 8002820:	f7ff fb3a 	bl	8001e98 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002824:	4b45      	ldr	r3, [pc, #276]	@ (800293c <HAL_ADC_ConfigChannel+0x368>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4945      	ldr	r1, [pc, #276]	@ (8002940 <HAL_ADC_ConfigChannel+0x36c>)
 800282a:	0018      	movs	r0, r3
 800282c:	f7fd fc74 	bl	8000118 <__udivsi3>
 8002830:	0003      	movs	r3, r0
 8002832:	1c5a      	adds	r2, r3, #1
 8002834:	0013      	movs	r3, r2
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	189b      	adds	r3, r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800283e:	e002      	b.n	8002846 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	3b01      	subs	r3, #1
 8002844:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1f9      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800284c:	e08e      	b.n	800296c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a3c      	ldr	r2, [pc, #240]	@ (8002944 <HAL_ADC_ConfigChannel+0x370>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d10e      	bne.n	8002876 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	2380      	movs	r3, #128	@ 0x80
 800285c:	045b      	lsls	r3, r3, #17
 800285e:	4013      	ands	r3, r2
 8002860:	d109      	bne.n	8002876 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	2280      	movs	r2, #128	@ 0x80
 8002866:	0452      	lsls	r2, r2, #17
 8002868:	4313      	orrs	r3, r2
 800286a:	4a32      	ldr	r2, [pc, #200]	@ (8002934 <HAL_ADC_ConfigChannel+0x360>)
 800286c:	0019      	movs	r1, r3
 800286e:	0010      	movs	r0, r2
 8002870:	f7ff fb12 	bl	8001e98 <LL_ADC_SetCommonPathInternalCh>
 8002874:	e07a      	b.n	800296c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a33      	ldr	r2, [pc, #204]	@ (8002948 <HAL_ADC_ConfigChannel+0x374>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d000      	beq.n	8002882 <HAL_ADC_ConfigChannel+0x2ae>
 8002880:	e074      	b.n	800296c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	2380      	movs	r3, #128	@ 0x80
 8002886:	03db      	lsls	r3, r3, #15
 8002888:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800288a:	d000      	beq.n	800288e <HAL_ADC_ConfigChannel+0x2ba>
 800288c:	e06e      	b.n	800296c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	2280      	movs	r2, #128	@ 0x80
 8002892:	03d2      	lsls	r2, r2, #15
 8002894:	4313      	orrs	r3, r2
 8002896:	4a27      	ldr	r2, [pc, #156]	@ (8002934 <HAL_ADC_ConfigChannel+0x360>)
 8002898:	0019      	movs	r1, r3
 800289a:	0010      	movs	r0, r2
 800289c:	f7ff fafc 	bl	8001e98 <LL_ADC_SetCommonPathInternalCh>
 80028a0:	e064      	b.n	800296c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	691a      	ldr	r2, [r3, #16]
 80028a6:	2380      	movs	r3, #128	@ 0x80
 80028a8:	061b      	lsls	r3, r3, #24
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d004      	beq.n	80028b8 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80028b2:	4a1f      	ldr	r2, [pc, #124]	@ (8002930 <HAL_ADC_ConfigChannel+0x35c>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d107      	bne.n	80028c8 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	0019      	movs	r1, r3
 80028c2:	0010      	movs	r0, r2
 80028c4:	f7ff fb7f 	bl	8001fc6 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	da4d      	bge.n	800296c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028d0:	4b18      	ldr	r3, [pc, #96]	@ (8002934 <HAL_ADC_ConfigChannel+0x360>)
 80028d2:	0018      	movs	r0, r3
 80028d4:	f7ff faf4 	bl	8001ec0 <LL_ADC_GetCommonPathInternalCh>
 80028d8:	0003      	movs	r3, r0
 80028da:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a15      	ldr	r2, [pc, #84]	@ (8002938 <HAL_ADC_ConfigChannel+0x364>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d108      	bne.n	80028f8 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	4a18      	ldr	r2, [pc, #96]	@ (800294c <HAL_ADC_ConfigChannel+0x378>)
 80028ea:	4013      	ands	r3, r2
 80028ec:	4a11      	ldr	r2, [pc, #68]	@ (8002934 <HAL_ADC_ConfigChannel+0x360>)
 80028ee:	0019      	movs	r1, r3
 80028f0:	0010      	movs	r0, r2
 80028f2:	f7ff fad1 	bl	8001e98 <LL_ADC_SetCommonPathInternalCh>
 80028f6:	e039      	b.n	800296c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a11      	ldr	r2, [pc, #68]	@ (8002944 <HAL_ADC_ConfigChannel+0x370>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d108      	bne.n	8002914 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	4a12      	ldr	r2, [pc, #72]	@ (8002950 <HAL_ADC_ConfigChannel+0x37c>)
 8002906:	4013      	ands	r3, r2
 8002908:	4a0a      	ldr	r2, [pc, #40]	@ (8002934 <HAL_ADC_ConfigChannel+0x360>)
 800290a:	0019      	movs	r1, r3
 800290c:	0010      	movs	r0, r2
 800290e:	f7ff fac3 	bl	8001e98 <LL_ADC_SetCommonPathInternalCh>
 8002912:	e02b      	b.n	800296c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a0b      	ldr	r2, [pc, #44]	@ (8002948 <HAL_ADC_ConfigChannel+0x374>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d126      	bne.n	800296c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	4a0c      	ldr	r2, [pc, #48]	@ (8002954 <HAL_ADC_ConfigChannel+0x380>)
 8002922:	4013      	ands	r3, r2
 8002924:	4a03      	ldr	r2, [pc, #12]	@ (8002934 <HAL_ADC_ConfigChannel+0x360>)
 8002926:	0019      	movs	r1, r3
 8002928:	0010      	movs	r0, r2
 800292a:	f7ff fab5 	bl	8001e98 <LL_ADC_SetCommonPathInternalCh>
 800292e:	e01d      	b.n	800296c <HAL_ADC_ConfigChannel+0x398>
 8002930:	80000004 	.word	0x80000004
 8002934:	40012708 	.word	0x40012708
 8002938:	b0001000 	.word	0xb0001000
 800293c:	20000404 	.word	0x20000404
 8002940:	00030d40 	.word	0x00030d40
 8002944:	b8004000 	.word	0xb8004000
 8002948:	b4002000 	.word	0xb4002000
 800294c:	ff7fffff 	.word	0xff7fffff
 8002950:	feffffff 	.word	0xfeffffff
 8002954:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800295c:	2220      	movs	r2, #32
 800295e:	431a      	orrs	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002964:	2317      	movs	r3, #23
 8002966:	18fb      	adds	r3, r7, r3
 8002968:	2201      	movs	r2, #1
 800296a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2254      	movs	r2, #84	@ 0x54
 8002970:	2100      	movs	r1, #0
 8002972:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002974:	2317      	movs	r3, #23
 8002976:	18fb      	adds	r3, r7, r3
 8002978:	781b      	ldrb	r3, [r3, #0]
}
 800297a:	0018      	movs	r0, r3
 800297c:	46bd      	mov	sp, r7
 800297e:	b006      	add	sp, #24
 8002980:	bd80      	pop	{r7, pc}
 8002982:	46c0      	nop			@ (mov r8, r8)

08002984 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800298c:	2300      	movs	r3, #0
 800298e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	0018      	movs	r0, r3
 8002996:	f7ff fb91 	bl	80020bc <LL_ADC_IsEnabled>
 800299a:	1e03      	subs	r3, r0, #0
 800299c:	d000      	beq.n	80029a0 <ADC_Enable+0x1c>
 800299e:	e069      	b.n	8002a74 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	4a36      	ldr	r2, [pc, #216]	@ (8002a80 <ADC_Enable+0xfc>)
 80029a8:	4013      	ands	r3, r2
 80029aa:	d00d      	beq.n	80029c8 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029b0:	2210      	movs	r2, #16
 80029b2:	431a      	orrs	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029bc:	2201      	movs	r2, #1
 80029be:	431a      	orrs	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e056      	b.n	8002a76 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	0018      	movs	r0, r3
 80029ce:	f7ff fb51 	bl	8002074 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 80029d2:	4b2c      	ldr	r3, [pc, #176]	@ (8002a84 <ADC_Enable+0x100>)
 80029d4:	0018      	movs	r0, r3
 80029d6:	f7ff fa73 	bl	8001ec0 <LL_ADC_GetCommonPathInternalCh>
 80029da:	0002      	movs	r2, r0
 80029dc:	2380      	movs	r3, #128	@ 0x80
 80029de:	041b      	lsls	r3, r3, #16
 80029e0:	4013      	ands	r3, r2
 80029e2:	d00f      	beq.n	8002a04 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029e4:	4b28      	ldr	r3, [pc, #160]	@ (8002a88 <ADC_Enable+0x104>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4928      	ldr	r1, [pc, #160]	@ (8002a8c <ADC_Enable+0x108>)
 80029ea:	0018      	movs	r0, r3
 80029ec:	f7fd fb94 	bl	8000118 <__udivsi3>
 80029f0:	0003      	movs	r3, r0
 80029f2:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 80029f4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80029f6:	e002      	b.n	80029fe <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	3b01      	subs	r3, #1
 80029fc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1f9      	bne.n	80029f8 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	7e5b      	ldrb	r3, [r3, #25]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d033      	beq.n	8002a74 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002a0c:	f7ff fa3a 	bl	8001e84 <HAL_GetTick>
 8002a10:	0003      	movs	r3, r0
 8002a12:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a14:	e027      	b.n	8002a66 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	f7ff fb4e 	bl	80020bc <LL_ADC_IsEnabled>
 8002a20:	1e03      	subs	r3, r0, #0
 8002a22:	d104      	bne.n	8002a2e <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	0018      	movs	r0, r3
 8002a2a:	f7ff fb23 	bl	8002074 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a2e:	f7ff fa29 	bl	8001e84 <HAL_GetTick>
 8002a32:	0002      	movs	r2, r0
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d914      	bls.n	8002a66 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2201      	movs	r2, #1
 8002a44:	4013      	ands	r3, r2
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d00d      	beq.n	8002a66 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a4e:	2210      	movs	r2, #16
 8002a50:	431a      	orrs	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	431a      	orrs	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e007      	b.n	8002a76 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	4013      	ands	r3, r2
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d1d0      	bne.n	8002a16 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	0018      	movs	r0, r3
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	b004      	add	sp, #16
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	46c0      	nop			@ (mov r8, r8)
 8002a80:	80000017 	.word	0x80000017
 8002a84:	40012708 	.word	0x40012708
 8002a88:	20000404 	.word	0x20000404
 8002a8c:	00030d40 	.word	0x00030d40

08002a90 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	f7ff fb1e 	bl	80020de <LL_ADC_IsDisableOngoing>
 8002aa2:	0003      	movs	r3, r0
 8002aa4:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	0018      	movs	r0, r3
 8002aac:	f7ff fb06 	bl	80020bc <LL_ADC_IsEnabled>
 8002ab0:	1e03      	subs	r3, r0, #0
 8002ab2:	d046      	beq.n	8002b42 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d143      	bne.n	8002b42 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	2205      	movs	r2, #5
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d10d      	bne.n	8002ae4 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	0018      	movs	r0, r3
 8002ace:	f7ff fae3 	bl	8002098 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2203      	movs	r2, #3
 8002ad8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002ada:	f7ff f9d3 	bl	8001e84 <HAL_GetTick>
 8002ade:	0003      	movs	r3, r0
 8002ae0:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ae2:	e028      	b.n	8002b36 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ae8:	2210      	movs	r2, #16
 8002aea:	431a      	orrs	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002af4:	2201      	movs	r2, #1
 8002af6:	431a      	orrs	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e021      	b.n	8002b44 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b00:	f7ff f9c0 	bl	8001e84 <HAL_GetTick>
 8002b04:	0002      	movs	r2, r0
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d913      	bls.n	8002b36 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	2201      	movs	r2, #1
 8002b16:	4013      	ands	r3, r2
 8002b18:	d00d      	beq.n	8002b36 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b1e:	2210      	movs	r2, #16
 8002b20:	431a      	orrs	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e006      	b.n	8002b44 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	4013      	ands	r3, r2
 8002b40:	d1de      	bne.n	8002b00 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	0018      	movs	r0, r3
 8002b46:	46bd      	mov	sp, r7
 8002b48:	b004      	add	sp, #16
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b58:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b5e:	2250      	movs	r2, #80	@ 0x50
 8002b60:	4013      	ands	r3, r2
 8002b62:	d141      	bne.n	8002be8 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b68:	2280      	movs	r2, #128	@ 0x80
 8002b6a:	0092      	lsls	r2, r2, #2
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	0018      	movs	r0, r3
 8002b78:	f7ff f9e3 	bl	8001f42 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b7c:	1e03      	subs	r3, r0, #0
 8002b7e:	d02e      	beq.n	8002bde <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	7e9b      	ldrb	r3, [r3, #26]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d12a      	bne.n	8002bde <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2208      	movs	r2, #8
 8002b90:	4013      	ands	r3, r2
 8002b92:	2b08      	cmp	r3, #8
 8002b94:	d123      	bne.n	8002bde <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	0018      	movs	r0, r3
 8002b9c:	f7ff fac2 	bl	8002124 <LL_ADC_REG_IsConversionOngoing>
 8002ba0:	1e03      	subs	r3, r0, #0
 8002ba2:	d110      	bne.n	8002bc6 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	685a      	ldr	r2, [r3, #4]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	210c      	movs	r1, #12
 8002bb0:	438a      	bics	r2, r1
 8002bb2:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bb8:	4a15      	ldr	r2, [pc, #84]	@ (8002c10 <ADC_DMAConvCplt+0xc4>)
 8002bba:	4013      	ands	r3, r2
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	659a      	str	r2, [r3, #88]	@ 0x58
 8002bc4:	e00b      	b.n	8002bde <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bca:	2220      	movs	r2, #32
 8002bcc:	431a      	orrs	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	0018      	movs	r0, r3
 8002be2:	f7fe fe45 	bl	8001870 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002be6:	e00f      	b.n	8002c08 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bec:	2210      	movs	r2, #16
 8002bee:	4013      	ands	r3, r2
 8002bf0:	d004      	beq.n	8002bfc <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	0018      	movs	r0, r3
 8002bf6:	f7ff fce5 	bl	80025c4 <HAL_ADC_ErrorCallback>
}
 8002bfa:	e005      	b.n	8002c08 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	0010      	movs	r0, r2
 8002c06:	4798      	blx	r3
}
 8002c08:	46c0      	nop			@ (mov r8, r8)
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	b004      	add	sp, #16
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	fffffefe 	.word	0xfffffefe

08002c14 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c20:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	0018      	movs	r0, r3
 8002c26:	f7ff fcc5 	bl	80025b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c2a:	46c0      	nop			@ (mov r8, r8)
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	b004      	add	sp, #16
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b084      	sub	sp, #16
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c3e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c44:	2240      	movs	r2, #64	@ 0x40
 8002c46:	431a      	orrs	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c50:	2204      	movs	r2, #4
 8002c52:	431a      	orrs	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	f7ff fcb2 	bl	80025c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c60:	46c0      	nop			@ (mov r8, r8)
 8002c62:	46bd      	mov	sp, r7
 8002c64:	b004      	add	sp, #16
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <LL_ADC_GetCommonClock>:
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	23f0      	movs	r3, #240	@ 0xf0
 8002c76:	039b      	lsls	r3, r3, #14
 8002c78:	4013      	ands	r3, r2
}
 8002c7a:	0018      	movs	r0, r3
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	b002      	add	sp, #8
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <LL_ADC_GetClock>:
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b082      	sub	sp, #8
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	0f9b      	lsrs	r3, r3, #30
 8002c90:	079b      	lsls	r3, r3, #30
}
 8002c92:	0018      	movs	r0, r3
 8002c94:	46bd      	mov	sp, r7
 8002c96:	b002      	add	sp, #8
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <LL_ADC_SetCalibrationFactor>:
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b082      	sub	sp, #8
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
 8002ca2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	22b4      	movs	r2, #180	@ 0xb4
 8002ca8:	589b      	ldr	r3, [r3, r2]
 8002caa:	227f      	movs	r2, #127	@ 0x7f
 8002cac:	4393      	bics	r3, r2
 8002cae:	001a      	movs	r2, r3
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	21b4      	movs	r1, #180	@ 0xb4
 8002cb8:	505a      	str	r2, [r3, r1]
}
 8002cba:	46c0      	nop			@ (mov r8, r8)
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	b002      	add	sp, #8
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <LL_ADC_GetCalibrationFactor>:
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b082      	sub	sp, #8
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	22b4      	movs	r2, #180	@ 0xb4
 8002cce:	589b      	ldr	r3, [r3, r2]
 8002cd0:	227f      	movs	r2, #127	@ 0x7f
 8002cd2:	4013      	ands	r3, r2
}
 8002cd4:	0018      	movs	r0, r3
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	b002      	add	sp, #8
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <LL_ADC_Enable>:
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	4a04      	ldr	r2, [pc, #16]	@ (8002cfc <LL_ADC_Enable+0x20>)
 8002cea:	4013      	ands	r3, r2
 8002cec:	2201      	movs	r2, #1
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	609a      	str	r2, [r3, #8]
}
 8002cf4:	46c0      	nop			@ (mov r8, r8)
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	b002      	add	sp, #8
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	7fffffe8 	.word	0x7fffffe8

08002d00 <LL_ADC_Disable>:
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	4a04      	ldr	r2, [pc, #16]	@ (8002d20 <LL_ADC_Disable+0x20>)
 8002d0e:	4013      	ands	r3, r2
 8002d10:	2202      	movs	r2, #2
 8002d12:	431a      	orrs	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	609a      	str	r2, [r3, #8]
}
 8002d18:	46c0      	nop			@ (mov r8, r8)
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	b002      	add	sp, #8
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	7fffffe8 	.word	0x7fffffe8

08002d24 <LL_ADC_IsEnabled>:
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	2201      	movs	r2, #1
 8002d32:	4013      	ands	r3, r2
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d101      	bne.n	8002d3c <LL_ADC_IsEnabled+0x18>
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e000      	b.n	8002d3e <LL_ADC_IsEnabled+0x1a>
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	0018      	movs	r0, r3
 8002d40:	46bd      	mov	sp, r7
 8002d42:	b002      	add	sp, #8
 8002d44:	bd80      	pop	{r7, pc}
	...

08002d48 <LL_ADC_StartCalibration>:
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	4a05      	ldr	r2, [pc, #20]	@ (8002d6c <LL_ADC_StartCalibration+0x24>)
 8002d56:	4013      	ands	r3, r2
 8002d58:	2280      	movs	r2, #128	@ 0x80
 8002d5a:	0612      	lsls	r2, r2, #24
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	609a      	str	r2, [r3, #8]
}
 8002d62:	46c0      	nop			@ (mov r8, r8)
 8002d64:	46bd      	mov	sp, r7
 8002d66:	b002      	add	sp, #8
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	46c0      	nop			@ (mov r8, r8)
 8002d6c:	7fffffe8 	.word	0x7fffffe8

08002d70 <LL_ADC_IsCalibrationOnGoing>:
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	0fdb      	lsrs	r3, r3, #31
 8002d7e:	07da      	lsls	r2, r3, #31
 8002d80:	2380      	movs	r3, #128	@ 0x80
 8002d82:	061b      	lsls	r3, r3, #24
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d101      	bne.n	8002d8c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e000      	b.n	8002d8e <LL_ADC_IsCalibrationOnGoing+0x1e>
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	0018      	movs	r0, r3
 8002d90:	46bd      	mov	sp, r7
 8002d92:	b002      	add	sp, #8
 8002d94:	bd80      	pop	{r7, pc}
	...

08002d98 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8002d98:	b590      	push	{r4, r7, lr}
 8002d9a:	b08b      	sub	sp, #44	@ 0x2c
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002da0:	2300      	movs	r3, #0
 8002da2:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8002da4:	2300      	movs	r3, #0
 8002da6:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2254      	movs	r2, #84	@ 0x54
 8002dac:	5c9b      	ldrb	r3, [r3, r2]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d101      	bne.n	8002db6 <HAL_ADCEx_Calibration_Start+0x1e>
 8002db2:	2302      	movs	r3, #2
 8002db4:	e0dd      	b.n	8002f72 <HAL_ADCEx_Calibration_Start+0x1da>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2254      	movs	r2, #84	@ 0x54
 8002dba:	2101      	movs	r1, #1
 8002dbc:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002dbe:	231f      	movs	r3, #31
 8002dc0:	18fc      	adds	r4, r7, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	f7ff fe63 	bl	8002a90 <ADC_Disable>
 8002dca:	0003      	movs	r3, r0
 8002dcc:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	0018      	movs	r0, r3
 8002dd4:	f7ff ffa6 	bl	8002d24 <LL_ADC_IsEnabled>
 8002dd8:	1e03      	subs	r3, r0, #0
 8002dda:	d000      	beq.n	8002dde <HAL_ADCEx_Calibration_Start+0x46>
 8002ddc:	e0bc      	b.n	8002f58 <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de2:	4a66      	ldr	r2, [pc, #408]	@ (8002f7c <HAL_ADCEx_Calibration_Start+0x1e4>)
 8002de4:	4013      	ands	r3, r2
 8002de6:	2202      	movs	r2, #2
 8002de8:	431a      	orrs	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	4a62      	ldr	r2, [pc, #392]	@ (8002f80 <HAL_ADCEx_Calibration_Start+0x1e8>)
 8002df6:	4013      	ands	r3, r2
 8002df8:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68da      	ldr	r2, [r3, #12]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	495f      	ldr	r1, [pc, #380]	@ (8002f84 <HAL_ADCEx_Calibration_Start+0x1ec>)
 8002e06:	400a      	ands	r2, r1
 8002e08:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e0e:	e02d      	b.n	8002e6c <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	0018      	movs	r0, r3
 8002e16:	f7ff ff97 	bl	8002d48 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002e1a:	e014      	b.n	8002e46 <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	3301      	adds	r3, #1
 8002e20:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	4a58      	ldr	r2, [pc, #352]	@ (8002f88 <HAL_ADCEx_Calibration_Start+0x1f0>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d90d      	bls.n	8002e46 <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e2e:	2212      	movs	r2, #18
 8002e30:	4393      	bics	r3, r2
 8002e32:	2210      	movs	r2, #16
 8002e34:	431a      	orrs	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2254      	movs	r2, #84	@ 0x54
 8002e3e:	2100      	movs	r1, #0
 8002e40:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e095      	b.n	8002f72 <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	0018      	movs	r0, r3
 8002e4c:	f7ff ff90 	bl	8002d70 <LL_ADC_IsCalibrationOnGoing>
 8002e50:	1e03      	subs	r3, r0, #0
 8002e52:	d1e3      	bne.n	8002e1c <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	0018      	movs	r0, r3
 8002e5a:	f7ff ff32 	bl	8002cc2 <LL_ADC_GetCalibrationFactor>
 8002e5e:	0002      	movs	r2, r0
 8002e60:	6a3b      	ldr	r3, [r7, #32]
 8002e62:	189b      	adds	r3, r3, r2
 8002e64:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8002e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e68:	3301      	adds	r3, #1
 8002e6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e6e:	2b07      	cmp	r3, #7
 8002e70:	d9ce      	bls.n	8002e10 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8002e72:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e74:	6a38      	ldr	r0, [r7, #32]
 8002e76:	f7fd f94f 	bl	8000118 <__udivsi3>
 8002e7a:	0003      	movs	r3, r0
 8002e7c:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	0018      	movs	r0, r3
 8002e84:	f7ff ff2a 	bl	8002cdc <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	f7ff fef8 	bl	8002c82 <LL_ADC_GetClock>
 8002e92:	1e03      	subs	r3, r0, #0
 8002e94:	d11b      	bne.n	8002ece <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e96:	4b3d      	ldr	r3, [pc, #244]	@ (8002f8c <HAL_ADCEx_Calibration_Start+0x1f4>)
 8002e98:	0018      	movs	r0, r3
 8002e9a:	f7ff fee5 	bl	8002c68 <LL_ADC_GetCommonClock>
 8002e9e:	0003      	movs	r3, r0
 8002ea0:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	23e0      	movs	r3, #224	@ 0xe0
 8002ea6:	035b      	lsls	r3, r3, #13
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d310      	bcc.n	8002ece <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	0c9b      	lsrs	r3, r3, #18
 8002eb0:	3b03      	subs	r3, #3
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	409a      	lsls	r2, r3
 8002eb6:	0013      	movs	r3, r2
 8002eb8:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	085b      	lsrs	r3, r3, #1
 8002ebe:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 8002ec0:	e002      	b.n	8002ec8 <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1f9      	bne.n	8002ec2 <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6a3a      	ldr	r2, [r7, #32]
 8002ed4:	0011      	movs	r1, r2
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	f7ff fedf 	bl	8002c9a <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	f7ff ff0d 	bl	8002d00 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002ee6:	f7fe ffcd 	bl	8001e84 <HAL_GetTick>
 8002eea:	0003      	movs	r3, r0
 8002eec:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002eee:	e01b      	b.n	8002f28 <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002ef0:	f7fe ffc8 	bl	8001e84 <HAL_GetTick>
 8002ef4:	0002      	movs	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d914      	bls.n	8002f28 <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	0018      	movs	r0, r3
 8002f04:	f7ff ff0e 	bl	8002d24 <LL_ADC_IsEnabled>
 8002f08:	1e03      	subs	r3, r0, #0
 8002f0a:	d00d      	beq.n	8002f28 <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f10:	2210      	movs	r2, #16
 8002f12:	431a      	orrs	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e024      	b.n	8002f72 <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	f7ff fef9 	bl	8002d24 <LL_ADC_IsEnabled>
 8002f32:	1e03      	subs	r3, r0, #0
 8002f34:	d1dc      	bne.n	8002ef0 <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68d9      	ldr	r1, [r3, #12]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	430a      	orrs	r2, r1
 8002f44:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f4a:	2203      	movs	r2, #3
 8002f4c:	4393      	bics	r3, r2
 8002f4e:	2201      	movs	r2, #1
 8002f50:	431a      	orrs	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	659a      	str	r2, [r3, #88]	@ 0x58
 8002f56:	e005      	b.n	8002f64 <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f5c:	2210      	movs	r2, #16
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2254      	movs	r2, #84	@ 0x54
 8002f68:	2100      	movs	r1, #0
 8002f6a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002f6c:	231f      	movs	r3, #31
 8002f6e:	18fb      	adds	r3, r7, r3
 8002f70:	781b      	ldrb	r3, [r3, #0]
}
 8002f72:	0018      	movs	r0, r3
 8002f74:	46bd      	mov	sp, r7
 8002f76:	b00b      	add	sp, #44	@ 0x2c
 8002f78:	bd90      	pop	{r4, r7, pc}
 8002f7a:	46c0      	nop			@ (mov r8, r8)
 8002f7c:	fffffefd 	.word	0xfffffefd
 8002f80:	00008003 	.word	0x00008003
 8002f84:	ffff7ffc 	.word	0xffff7ffc
 8002f88:	0002f1ff 	.word	0x0002f1ff
 8002f8c:	40012708 	.word	0x40012708

08002f90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	0002      	movs	r2, r0
 8002f98:	1dfb      	adds	r3, r7, #7
 8002f9a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002f9c:	1dfb      	adds	r3, r7, #7
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	2b7f      	cmp	r3, #127	@ 0x7f
 8002fa2:	d809      	bhi.n	8002fb8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fa4:	1dfb      	adds	r3, r7, #7
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	001a      	movs	r2, r3
 8002faa:	231f      	movs	r3, #31
 8002fac:	401a      	ands	r2, r3
 8002fae:	4b04      	ldr	r3, [pc, #16]	@ (8002fc0 <__NVIC_EnableIRQ+0x30>)
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	4091      	lsls	r1, r2
 8002fb4:	000a      	movs	r2, r1
 8002fb6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002fb8:	46c0      	nop			@ (mov r8, r8)
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	b002      	add	sp, #8
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	e000e100 	.word	0xe000e100

08002fc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fc4:	b590      	push	{r4, r7, lr}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	0002      	movs	r2, r0
 8002fcc:	6039      	str	r1, [r7, #0]
 8002fce:	1dfb      	adds	r3, r7, #7
 8002fd0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002fd2:	1dfb      	adds	r3, r7, #7
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	2b7f      	cmp	r3, #127	@ 0x7f
 8002fd8:	d828      	bhi.n	800302c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fda:	4a2f      	ldr	r2, [pc, #188]	@ (8003098 <__NVIC_SetPriority+0xd4>)
 8002fdc:	1dfb      	adds	r3, r7, #7
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	b25b      	sxtb	r3, r3
 8002fe2:	089b      	lsrs	r3, r3, #2
 8002fe4:	33c0      	adds	r3, #192	@ 0xc0
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	589b      	ldr	r3, [r3, r2]
 8002fea:	1dfa      	adds	r2, r7, #7
 8002fec:	7812      	ldrb	r2, [r2, #0]
 8002fee:	0011      	movs	r1, r2
 8002ff0:	2203      	movs	r2, #3
 8002ff2:	400a      	ands	r2, r1
 8002ff4:	00d2      	lsls	r2, r2, #3
 8002ff6:	21ff      	movs	r1, #255	@ 0xff
 8002ff8:	4091      	lsls	r1, r2
 8002ffa:	000a      	movs	r2, r1
 8002ffc:	43d2      	mvns	r2, r2
 8002ffe:	401a      	ands	r2, r3
 8003000:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	019b      	lsls	r3, r3, #6
 8003006:	22ff      	movs	r2, #255	@ 0xff
 8003008:	401a      	ands	r2, r3
 800300a:	1dfb      	adds	r3, r7, #7
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	0018      	movs	r0, r3
 8003010:	2303      	movs	r3, #3
 8003012:	4003      	ands	r3, r0
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003018:	481f      	ldr	r0, [pc, #124]	@ (8003098 <__NVIC_SetPriority+0xd4>)
 800301a:	1dfb      	adds	r3, r7, #7
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	b25b      	sxtb	r3, r3
 8003020:	089b      	lsrs	r3, r3, #2
 8003022:	430a      	orrs	r2, r1
 8003024:	33c0      	adds	r3, #192	@ 0xc0
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800302a:	e031      	b.n	8003090 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800302c:	4a1b      	ldr	r2, [pc, #108]	@ (800309c <__NVIC_SetPriority+0xd8>)
 800302e:	1dfb      	adds	r3, r7, #7
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	0019      	movs	r1, r3
 8003034:	230f      	movs	r3, #15
 8003036:	400b      	ands	r3, r1
 8003038:	3b08      	subs	r3, #8
 800303a:	089b      	lsrs	r3, r3, #2
 800303c:	3306      	adds	r3, #6
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	18d3      	adds	r3, r2, r3
 8003042:	3304      	adds	r3, #4
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	1dfa      	adds	r2, r7, #7
 8003048:	7812      	ldrb	r2, [r2, #0]
 800304a:	0011      	movs	r1, r2
 800304c:	2203      	movs	r2, #3
 800304e:	400a      	ands	r2, r1
 8003050:	00d2      	lsls	r2, r2, #3
 8003052:	21ff      	movs	r1, #255	@ 0xff
 8003054:	4091      	lsls	r1, r2
 8003056:	000a      	movs	r2, r1
 8003058:	43d2      	mvns	r2, r2
 800305a:	401a      	ands	r2, r3
 800305c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	019b      	lsls	r3, r3, #6
 8003062:	22ff      	movs	r2, #255	@ 0xff
 8003064:	401a      	ands	r2, r3
 8003066:	1dfb      	adds	r3, r7, #7
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	0018      	movs	r0, r3
 800306c:	2303      	movs	r3, #3
 800306e:	4003      	ands	r3, r0
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003074:	4809      	ldr	r0, [pc, #36]	@ (800309c <__NVIC_SetPriority+0xd8>)
 8003076:	1dfb      	adds	r3, r7, #7
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	001c      	movs	r4, r3
 800307c:	230f      	movs	r3, #15
 800307e:	4023      	ands	r3, r4
 8003080:	3b08      	subs	r3, #8
 8003082:	089b      	lsrs	r3, r3, #2
 8003084:	430a      	orrs	r2, r1
 8003086:	3306      	adds	r3, #6
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	18c3      	adds	r3, r0, r3
 800308c:	3304      	adds	r3, #4
 800308e:	601a      	str	r2, [r3, #0]
}
 8003090:	46c0      	nop			@ (mov r8, r8)
 8003092:	46bd      	mov	sp, r7
 8003094:	b003      	add	sp, #12
 8003096:	bd90      	pop	{r4, r7, pc}
 8003098:	e000e100 	.word	0xe000e100
 800309c:	e000ed00 	.word	0xe000ed00

080030a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	1e5a      	subs	r2, r3, #1
 80030ac:	2380      	movs	r3, #128	@ 0x80
 80030ae:	045b      	lsls	r3, r3, #17
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d301      	bcc.n	80030b8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030b4:	2301      	movs	r3, #1
 80030b6:	e010      	b.n	80030da <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030b8:	4b0a      	ldr	r3, [pc, #40]	@ (80030e4 <SysTick_Config+0x44>)
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	3a01      	subs	r2, #1
 80030be:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030c0:	2301      	movs	r3, #1
 80030c2:	425b      	negs	r3, r3
 80030c4:	2103      	movs	r1, #3
 80030c6:	0018      	movs	r0, r3
 80030c8:	f7ff ff7c 	bl	8002fc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030cc:	4b05      	ldr	r3, [pc, #20]	@ (80030e4 <SysTick_Config+0x44>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030d2:	4b04      	ldr	r3, [pc, #16]	@ (80030e4 <SysTick_Config+0x44>)
 80030d4:	2207      	movs	r2, #7
 80030d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030d8:	2300      	movs	r3, #0
}
 80030da:	0018      	movs	r0, r3
 80030dc:	46bd      	mov	sp, r7
 80030de:	b002      	add	sp, #8
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	46c0      	nop			@ (mov r8, r8)
 80030e4:	e000e010 	.word	0xe000e010

080030e8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60b9      	str	r1, [r7, #8]
 80030f0:	607a      	str	r2, [r7, #4]
 80030f2:	210f      	movs	r1, #15
 80030f4:	187b      	adds	r3, r7, r1
 80030f6:	1c02      	adds	r2, r0, #0
 80030f8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80030fa:	68ba      	ldr	r2, [r7, #8]
 80030fc:	187b      	adds	r3, r7, r1
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	b25b      	sxtb	r3, r3
 8003102:	0011      	movs	r1, r2
 8003104:	0018      	movs	r0, r3
 8003106:	f7ff ff5d 	bl	8002fc4 <__NVIC_SetPriority>
}
 800310a:	46c0      	nop			@ (mov r8, r8)
 800310c:	46bd      	mov	sp, r7
 800310e:	b004      	add	sp, #16
 8003110:	bd80      	pop	{r7, pc}

08003112 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b082      	sub	sp, #8
 8003116:	af00      	add	r7, sp, #0
 8003118:	0002      	movs	r2, r0
 800311a:	1dfb      	adds	r3, r7, #7
 800311c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800311e:	1dfb      	adds	r3, r7, #7
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	b25b      	sxtb	r3, r3
 8003124:	0018      	movs	r0, r3
 8003126:	f7ff ff33 	bl	8002f90 <__NVIC_EnableIRQ>
}
 800312a:	46c0      	nop			@ (mov r8, r8)
 800312c:	46bd      	mov	sp, r7
 800312e:	b002      	add	sp, #8
 8003130:	bd80      	pop	{r7, pc}

08003132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b082      	sub	sp, #8
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	0018      	movs	r0, r3
 800313e:	f7ff ffaf 	bl	80030a0 <SysTick_Config>
 8003142:	0003      	movs	r3, r0
}
 8003144:	0018      	movs	r0, r3
 8003146:	46bd      	mov	sp, r7
 8003148:	b002      	add	sp, #8
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e077      	b.n	800324e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a3d      	ldr	r2, [pc, #244]	@ (8003258 <HAL_DMA_Init+0x10c>)
 8003164:	4694      	mov	ip, r2
 8003166:	4463      	add	r3, ip
 8003168:	2114      	movs	r1, #20
 800316a:	0018      	movs	r0, r3
 800316c:	f7fc ffd4 	bl	8000118 <__udivsi3>
 8003170:	0003      	movs	r3, r0
 8003172:	009a      	lsls	r2, r3, #2
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2225      	movs	r2, #37	@ 0x25
 800317c:	2102      	movs	r1, #2
 800317e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4934      	ldr	r1, [pc, #208]	@ (800325c <HAL_DMA_Init+0x110>)
 800318c:	400a      	ands	r2, r1
 800318e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6819      	ldr	r1, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	689a      	ldr	r2, [r3, #8]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	431a      	orrs	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	431a      	orrs	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	431a      	orrs	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	431a      	orrs	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	431a      	orrs	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	431a      	orrs	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	0018      	movs	r0, r3
 80031ca:	f000 f9c1 	bl	8003550 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	689a      	ldr	r2, [r3, #8]
 80031d2:	2380      	movs	r3, #128	@ 0x80
 80031d4:	01db      	lsls	r3, r3, #7
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d102      	bne.n	80031e0 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031e8:	213f      	movs	r1, #63	@ 0x3f
 80031ea:	400a      	ands	r2, r1
 80031ec:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80031f6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d011      	beq.n	8003224 <HAL_DMA_Init+0xd8>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	2b04      	cmp	r3, #4
 8003206:	d80d      	bhi.n	8003224 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	0018      	movs	r0, r3
 800320c:	f000 f9cc 	bl	80035a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003220:	605a      	str	r2, [r3, #4]
 8003222:	e008      	b.n	8003236 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2225      	movs	r2, #37	@ 0x25
 8003240:	2101      	movs	r1, #1
 8003242:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2224      	movs	r2, #36	@ 0x24
 8003248:	2100      	movs	r1, #0
 800324a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	0018      	movs	r0, r3
 8003250:	46bd      	mov	sp, r7
 8003252:	b002      	add	sp, #8
 8003254:	bd80      	pop	{r7, pc}
 8003256:	46c0      	nop			@ (mov r8, r8)
 8003258:	bffdfff8 	.word	0xbffdfff8
 800325c:	ffff800f 	.word	0xffff800f

08003260 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
 800326c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800326e:	2317      	movs	r3, #23
 8003270:	18fb      	adds	r3, r7, r3
 8003272:	2200      	movs	r2, #0
 8003274:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2224      	movs	r2, #36	@ 0x24
 800327a:	5c9b      	ldrb	r3, [r3, r2]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d101      	bne.n	8003284 <HAL_DMA_Start_IT+0x24>
 8003280:	2302      	movs	r3, #2
 8003282:	e06f      	b.n	8003364 <HAL_DMA_Start_IT+0x104>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2224      	movs	r2, #36	@ 0x24
 8003288:	2101      	movs	r1, #1
 800328a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2225      	movs	r2, #37	@ 0x25
 8003290:	5c9b      	ldrb	r3, [r3, r2]
 8003292:	b2db      	uxtb	r3, r3
 8003294:	2b01      	cmp	r3, #1
 8003296:	d157      	bne.n	8003348 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2225      	movs	r2, #37	@ 0x25
 800329c:	2102      	movs	r1, #2
 800329e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2101      	movs	r1, #1
 80032b2:	438a      	bics	r2, r1
 80032b4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	68b9      	ldr	r1, [r7, #8]
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f000 f907 	bl	80034d0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d008      	beq.n	80032dc <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	210e      	movs	r1, #14
 80032d6:	430a      	orrs	r2, r1
 80032d8:	601a      	str	r2, [r3, #0]
 80032da:	e00f      	b.n	80032fc <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2104      	movs	r1, #4
 80032e8:	438a      	bics	r2, r1
 80032ea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	210a      	movs	r1, #10
 80032f8:	430a      	orrs	r2, r1
 80032fa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	2380      	movs	r3, #128	@ 0x80
 8003304:	025b      	lsls	r3, r3, #9
 8003306:	4013      	ands	r3, r2
 8003308:	d008      	beq.n	800331c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003314:	2180      	movs	r1, #128	@ 0x80
 8003316:	0049      	lsls	r1, r1, #1
 8003318:	430a      	orrs	r2, r1
 800331a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003320:	2b00      	cmp	r3, #0
 8003322:	d008      	beq.n	8003336 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800332e:	2180      	movs	r1, #128	@ 0x80
 8003330:	0049      	lsls	r1, r1, #1
 8003332:	430a      	orrs	r2, r1
 8003334:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2101      	movs	r1, #1
 8003342:	430a      	orrs	r2, r1
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	e00a      	b.n	800335e <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2280      	movs	r2, #128	@ 0x80
 800334c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2224      	movs	r2, #36	@ 0x24
 8003352:	2100      	movs	r1, #0
 8003354:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8003356:	2317      	movs	r3, #23
 8003358:	18fb      	adds	r3, r7, r3
 800335a:	2201      	movs	r2, #1
 800335c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800335e:	2317      	movs	r3, #23
 8003360:	18fb      	adds	r3, r7, r3
 8003362:	781b      	ldrb	r3, [r3, #0]
}
 8003364:	0018      	movs	r0, r3
 8003366:	46bd      	mov	sp, r7
 8003368:	b006      	add	sp, #24
 800336a:	bd80      	pop	{r7, pc}

0800336c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8003374:	4b55      	ldr	r3, [pc, #340]	@ (80034cc <HAL_DMA_IRQHandler+0x160>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003386:	221c      	movs	r2, #28
 8003388:	4013      	ands	r3, r2
 800338a:	2204      	movs	r2, #4
 800338c:	409a      	lsls	r2, r3
 800338e:	0013      	movs	r3, r2
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	4013      	ands	r3, r2
 8003394:	d027      	beq.n	80033e6 <HAL_DMA_IRQHandler+0x7a>
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	2204      	movs	r2, #4
 800339a:	4013      	ands	r3, r2
 800339c:	d023      	beq.n	80033e6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2220      	movs	r2, #32
 80033a6:	4013      	ands	r3, r2
 80033a8:	d107      	bne.n	80033ba <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2104      	movs	r1, #4
 80033b6:	438a      	bics	r2, r1
 80033b8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80033ba:	4b44      	ldr	r3, [pc, #272]	@ (80034cc <HAL_DMA_IRQHandler+0x160>)
 80033bc:	6859      	ldr	r1, [r3, #4]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c2:	221c      	movs	r2, #28
 80033c4:	4013      	ands	r3, r2
 80033c6:	2204      	movs	r2, #4
 80033c8:	409a      	lsls	r2, r3
 80033ca:	4b40      	ldr	r3, [pc, #256]	@ (80034cc <HAL_DMA_IRQHandler+0x160>)
 80033cc:	430a      	orrs	r2, r1
 80033ce:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d100      	bne.n	80033da <HAL_DMA_IRQHandler+0x6e>
 80033d8:	e073      	b.n	80034c2 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	0010      	movs	r0, r2
 80033e2:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80033e4:	e06d      	b.n	80034c2 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ea:	221c      	movs	r2, #28
 80033ec:	4013      	ands	r3, r2
 80033ee:	2202      	movs	r2, #2
 80033f0:	409a      	lsls	r2, r3
 80033f2:	0013      	movs	r3, r2
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	4013      	ands	r3, r2
 80033f8:	d02e      	beq.n	8003458 <HAL_DMA_IRQHandler+0xec>
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	2202      	movs	r2, #2
 80033fe:	4013      	ands	r3, r2
 8003400:	d02a      	beq.n	8003458 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2220      	movs	r2, #32
 800340a:	4013      	ands	r3, r2
 800340c:	d10b      	bne.n	8003426 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	210a      	movs	r1, #10
 800341a:	438a      	bics	r2, r1
 800341c:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2225      	movs	r2, #37	@ 0x25
 8003422:	2101      	movs	r1, #1
 8003424:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003426:	4b29      	ldr	r3, [pc, #164]	@ (80034cc <HAL_DMA_IRQHandler+0x160>)
 8003428:	6859      	ldr	r1, [r3, #4]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342e:	221c      	movs	r2, #28
 8003430:	4013      	ands	r3, r2
 8003432:	2202      	movs	r2, #2
 8003434:	409a      	lsls	r2, r3
 8003436:	4b25      	ldr	r3, [pc, #148]	@ (80034cc <HAL_DMA_IRQHandler+0x160>)
 8003438:	430a      	orrs	r2, r1
 800343a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2224      	movs	r2, #36	@ 0x24
 8003440:	2100      	movs	r1, #0
 8003442:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003448:	2b00      	cmp	r3, #0
 800344a:	d03a      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	0010      	movs	r0, r2
 8003454:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003456:	e034      	b.n	80034c2 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345c:	221c      	movs	r2, #28
 800345e:	4013      	ands	r3, r2
 8003460:	2208      	movs	r2, #8
 8003462:	409a      	lsls	r2, r3
 8003464:	0013      	movs	r3, r2
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	4013      	ands	r3, r2
 800346a:	d02b      	beq.n	80034c4 <HAL_DMA_IRQHandler+0x158>
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	2208      	movs	r2, #8
 8003470:	4013      	ands	r3, r2
 8003472:	d027      	beq.n	80034c4 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	210e      	movs	r1, #14
 8003480:	438a      	bics	r2, r1
 8003482:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003484:	4b11      	ldr	r3, [pc, #68]	@ (80034cc <HAL_DMA_IRQHandler+0x160>)
 8003486:	6859      	ldr	r1, [r3, #4]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348c:	221c      	movs	r2, #28
 800348e:	4013      	ands	r3, r2
 8003490:	2201      	movs	r2, #1
 8003492:	409a      	lsls	r2, r3
 8003494:	4b0d      	ldr	r3, [pc, #52]	@ (80034cc <HAL_DMA_IRQHandler+0x160>)
 8003496:	430a      	orrs	r2, r1
 8003498:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2225      	movs	r2, #37	@ 0x25
 80034a4:	2101      	movs	r1, #1
 80034a6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2224      	movs	r2, #36	@ 0x24
 80034ac:	2100      	movs	r1, #0
 80034ae:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d005      	beq.n	80034c4 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	0010      	movs	r0, r2
 80034c0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80034c2:	46c0      	nop			@ (mov r8, r8)
 80034c4:	46c0      	nop			@ (mov r8, r8)
}
 80034c6:	46bd      	mov	sp, r7
 80034c8:	b004      	add	sp, #16
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	40020000 	.word	0x40020000

080034d0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
 80034dc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80034e6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d004      	beq.n	80034fa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80034f8:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80034fa:	4b14      	ldr	r3, [pc, #80]	@ (800354c <DMA_SetConfig+0x7c>)
 80034fc:	6859      	ldr	r1, [r3, #4]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003502:	221c      	movs	r2, #28
 8003504:	4013      	ands	r3, r2
 8003506:	2201      	movs	r2, #1
 8003508:	409a      	lsls	r2, r3
 800350a:	4b10      	ldr	r3, [pc, #64]	@ (800354c <DMA_SetConfig+0x7c>)
 800350c:	430a      	orrs	r2, r1
 800350e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	2b10      	cmp	r3, #16
 800351e:	d108      	bne.n	8003532 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68ba      	ldr	r2, [r7, #8]
 800352e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003530:	e007      	b.n	8003542 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68ba      	ldr	r2, [r7, #8]
 8003538:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	60da      	str	r2, [r3, #12]
}
 8003542:	46c0      	nop			@ (mov r8, r8)
 8003544:	46bd      	mov	sp, r7
 8003546:	b004      	add	sp, #16
 8003548:	bd80      	pop	{r7, pc}
 800354a:	46c0      	nop			@ (mov r8, r8)
 800354c:	40020000 	.word	0x40020000

08003550 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355c:	089b      	lsrs	r3, r3, #2
 800355e:	4a10      	ldr	r2, [pc, #64]	@ (80035a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003560:	4694      	mov	ip, r2
 8003562:	4463      	add	r3, ip
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	001a      	movs	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	001a      	movs	r2, r3
 8003572:	23ff      	movs	r3, #255	@ 0xff
 8003574:	4013      	ands	r3, r2
 8003576:	3b08      	subs	r3, #8
 8003578:	2114      	movs	r1, #20
 800357a:	0018      	movs	r0, r3
 800357c:	f7fc fdcc 	bl	8000118 <__udivsi3>
 8003580:	0003      	movs	r3, r0
 8003582:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a07      	ldr	r2, [pc, #28]	@ (80035a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003588:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	221f      	movs	r2, #31
 800358e:	4013      	ands	r3, r2
 8003590:	2201      	movs	r2, #1
 8003592:	409a      	lsls	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8003598:	46c0      	nop			@ (mov r8, r8)
 800359a:	46bd      	mov	sp, r7
 800359c:	b004      	add	sp, #16
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	10008200 	.word	0x10008200
 80035a4:	40020880 	.word	0x40020880

080035a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	223f      	movs	r2, #63	@ 0x3f
 80035b6:	4013      	ands	r3, r2
 80035b8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	4a0a      	ldr	r2, [pc, #40]	@ (80035e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80035be:	4694      	mov	ip, r2
 80035c0:	4463      	add	r3, ip
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	001a      	movs	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a07      	ldr	r2, [pc, #28]	@ (80035ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80035ce:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	3b01      	subs	r3, #1
 80035d4:	2203      	movs	r2, #3
 80035d6:	4013      	ands	r3, r2
 80035d8:	2201      	movs	r2, #1
 80035da:	409a      	lsls	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80035e0:	46c0      	nop			@ (mov r8, r8)
 80035e2:	46bd      	mov	sp, r7
 80035e4:	b004      	add	sp, #16
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	1000823f 	.word	0x1000823f
 80035ec:	40020940 	.word	0x40020940

080035f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035fa:	2300      	movs	r3, #0
 80035fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035fe:	e147      	b.n	8003890 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2101      	movs	r1, #1
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	4091      	lsls	r1, r2
 800360a:	000a      	movs	r2, r1
 800360c:	4013      	ands	r3, r2
 800360e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d100      	bne.n	8003618 <HAL_GPIO_Init+0x28>
 8003616:	e138      	b.n	800388a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	2203      	movs	r2, #3
 800361e:	4013      	ands	r3, r2
 8003620:	2b01      	cmp	r3, #1
 8003622:	d005      	beq.n	8003630 <HAL_GPIO_Init+0x40>
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	2203      	movs	r2, #3
 800362a:	4013      	ands	r3, r2
 800362c:	2b02      	cmp	r3, #2
 800362e:	d130      	bne.n	8003692 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	2203      	movs	r2, #3
 800363c:	409a      	lsls	r2, r3
 800363e:	0013      	movs	r3, r2
 8003640:	43da      	mvns	r2, r3
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	4013      	ands	r3, r2
 8003646:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	68da      	ldr	r2, [r3, #12]
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	409a      	lsls	r2, r3
 8003652:	0013      	movs	r3, r2
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	4313      	orrs	r3, r2
 8003658:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003666:	2201      	movs	r2, #1
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	409a      	lsls	r2, r3
 800366c:	0013      	movs	r3, r2
 800366e:	43da      	mvns	r2, r3
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	4013      	ands	r3, r2
 8003674:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	091b      	lsrs	r3, r3, #4
 800367c:	2201      	movs	r2, #1
 800367e:	401a      	ands	r2, r3
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	409a      	lsls	r2, r3
 8003684:	0013      	movs	r3, r2
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	4313      	orrs	r3, r2
 800368a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	2203      	movs	r2, #3
 8003698:	4013      	ands	r3, r2
 800369a:	2b03      	cmp	r3, #3
 800369c:	d017      	beq.n	80036ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	005b      	lsls	r3, r3, #1
 80036a8:	2203      	movs	r2, #3
 80036aa:	409a      	lsls	r2, r3
 80036ac:	0013      	movs	r3, r2
 80036ae:	43da      	mvns	r2, r3
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	4013      	ands	r3, r2
 80036b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	689a      	ldr	r2, [r3, #8]
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	409a      	lsls	r2, r3
 80036c0:	0013      	movs	r3, r2
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2203      	movs	r2, #3
 80036d4:	4013      	ands	r3, r2
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d123      	bne.n	8003722 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	08da      	lsrs	r2, r3, #3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	3208      	adds	r2, #8
 80036e2:	0092      	lsls	r2, r2, #2
 80036e4:	58d3      	ldr	r3, [r2, r3]
 80036e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	2207      	movs	r2, #7
 80036ec:	4013      	ands	r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	220f      	movs	r2, #15
 80036f2:	409a      	lsls	r2, r3
 80036f4:	0013      	movs	r3, r2
 80036f6:	43da      	mvns	r2, r3
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	4013      	ands	r3, r2
 80036fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	691a      	ldr	r2, [r3, #16]
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	2107      	movs	r1, #7
 8003706:	400b      	ands	r3, r1
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	409a      	lsls	r2, r3
 800370c:	0013      	movs	r3, r2
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	4313      	orrs	r3, r2
 8003712:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	08da      	lsrs	r2, r3, #3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	3208      	adds	r2, #8
 800371c:	0092      	lsls	r2, r2, #2
 800371e:	6939      	ldr	r1, [r7, #16]
 8003720:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	2203      	movs	r2, #3
 800372e:	409a      	lsls	r2, r3
 8003730:	0013      	movs	r3, r2
 8003732:	43da      	mvns	r2, r3
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	4013      	ands	r3, r2
 8003738:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	2203      	movs	r2, #3
 8003740:	401a      	ands	r2, r3
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	409a      	lsls	r2, r3
 8003748:	0013      	movs	r3, r2
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	4313      	orrs	r3, r2
 800374e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685a      	ldr	r2, [r3, #4]
 800375a:	23c0      	movs	r3, #192	@ 0xc0
 800375c:	029b      	lsls	r3, r3, #10
 800375e:	4013      	ands	r3, r2
 8003760:	d100      	bne.n	8003764 <HAL_GPIO_Init+0x174>
 8003762:	e092      	b.n	800388a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003764:	4a50      	ldr	r2, [pc, #320]	@ (80038a8 <HAL_GPIO_Init+0x2b8>)
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	089b      	lsrs	r3, r3, #2
 800376a:	3318      	adds	r3, #24
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	589b      	ldr	r3, [r3, r2]
 8003770:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	2203      	movs	r2, #3
 8003776:	4013      	ands	r3, r2
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	220f      	movs	r2, #15
 800377c:	409a      	lsls	r2, r3
 800377e:	0013      	movs	r3, r2
 8003780:	43da      	mvns	r2, r3
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	4013      	ands	r3, r2
 8003786:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	23a0      	movs	r3, #160	@ 0xa0
 800378c:	05db      	lsls	r3, r3, #23
 800378e:	429a      	cmp	r2, r3
 8003790:	d013      	beq.n	80037ba <HAL_GPIO_Init+0x1ca>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a45      	ldr	r2, [pc, #276]	@ (80038ac <HAL_GPIO_Init+0x2bc>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d00d      	beq.n	80037b6 <HAL_GPIO_Init+0x1c6>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a44      	ldr	r2, [pc, #272]	@ (80038b0 <HAL_GPIO_Init+0x2c0>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d007      	beq.n	80037b2 <HAL_GPIO_Init+0x1c2>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a43      	ldr	r2, [pc, #268]	@ (80038b4 <HAL_GPIO_Init+0x2c4>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d101      	bne.n	80037ae <HAL_GPIO_Init+0x1be>
 80037aa:	2303      	movs	r3, #3
 80037ac:	e006      	b.n	80037bc <HAL_GPIO_Init+0x1cc>
 80037ae:	2305      	movs	r3, #5
 80037b0:	e004      	b.n	80037bc <HAL_GPIO_Init+0x1cc>
 80037b2:	2302      	movs	r3, #2
 80037b4:	e002      	b.n	80037bc <HAL_GPIO_Init+0x1cc>
 80037b6:	2301      	movs	r3, #1
 80037b8:	e000      	b.n	80037bc <HAL_GPIO_Init+0x1cc>
 80037ba:	2300      	movs	r3, #0
 80037bc:	697a      	ldr	r2, [r7, #20]
 80037be:	2103      	movs	r1, #3
 80037c0:	400a      	ands	r2, r1
 80037c2:	00d2      	lsls	r2, r2, #3
 80037c4:	4093      	lsls	r3, r2
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80037cc:	4936      	ldr	r1, [pc, #216]	@ (80038a8 <HAL_GPIO_Init+0x2b8>)
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	089b      	lsrs	r3, r3, #2
 80037d2:	3318      	adds	r3, #24
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037da:	4b33      	ldr	r3, [pc, #204]	@ (80038a8 <HAL_GPIO_Init+0x2b8>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	43da      	mvns	r2, r3
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	4013      	ands	r3, r2
 80037e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	2380      	movs	r3, #128	@ 0x80
 80037f0:	035b      	lsls	r3, r3, #13
 80037f2:	4013      	ands	r3, r2
 80037f4:	d003      	beq.n	80037fe <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80037fe:	4b2a      	ldr	r3, [pc, #168]	@ (80038a8 <HAL_GPIO_Init+0x2b8>)
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003804:	4b28      	ldr	r3, [pc, #160]	@ (80038a8 <HAL_GPIO_Init+0x2b8>)
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	43da      	mvns	r2, r3
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	4013      	ands	r3, r2
 8003812:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685a      	ldr	r2, [r3, #4]
 8003818:	2380      	movs	r3, #128	@ 0x80
 800381a:	039b      	lsls	r3, r3, #14
 800381c:	4013      	ands	r3, r2
 800381e:	d003      	beq.n	8003828 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	4313      	orrs	r3, r2
 8003826:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003828:	4b1f      	ldr	r3, [pc, #124]	@ (80038a8 <HAL_GPIO_Init+0x2b8>)
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800382e:	4a1e      	ldr	r2, [pc, #120]	@ (80038a8 <HAL_GPIO_Init+0x2b8>)
 8003830:	2384      	movs	r3, #132	@ 0x84
 8003832:	58d3      	ldr	r3, [r2, r3]
 8003834:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	43da      	mvns	r2, r3
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	4013      	ands	r3, r2
 800383e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	2380      	movs	r3, #128	@ 0x80
 8003846:	029b      	lsls	r3, r3, #10
 8003848:	4013      	ands	r3, r2
 800384a:	d003      	beq.n	8003854 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	4313      	orrs	r3, r2
 8003852:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003854:	4914      	ldr	r1, [pc, #80]	@ (80038a8 <HAL_GPIO_Init+0x2b8>)
 8003856:	2284      	movs	r2, #132	@ 0x84
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800385c:	4a12      	ldr	r2, [pc, #72]	@ (80038a8 <HAL_GPIO_Init+0x2b8>)
 800385e:	2380      	movs	r3, #128	@ 0x80
 8003860:	58d3      	ldr	r3, [r2, r3]
 8003862:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	43da      	mvns	r2, r3
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	4013      	ands	r3, r2
 800386c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685a      	ldr	r2, [r3, #4]
 8003872:	2380      	movs	r3, #128	@ 0x80
 8003874:	025b      	lsls	r3, r3, #9
 8003876:	4013      	ands	r3, r2
 8003878:	d003      	beq.n	8003882 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	4313      	orrs	r3, r2
 8003880:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003882:	4909      	ldr	r1, [pc, #36]	@ (80038a8 <HAL_GPIO_Init+0x2b8>)
 8003884:	2280      	movs	r2, #128	@ 0x80
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	3301      	adds	r3, #1
 800388e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	40da      	lsrs	r2, r3
 8003898:	1e13      	subs	r3, r2, #0
 800389a:	d000      	beq.n	800389e <HAL_GPIO_Init+0x2ae>
 800389c:	e6b0      	b.n	8003600 <HAL_GPIO_Init+0x10>
  }
}
 800389e:	46c0      	nop			@ (mov r8, r8)
 80038a0:	46c0      	nop			@ (mov r8, r8)
 80038a2:	46bd      	mov	sp, r7
 80038a4:	b006      	add	sp, #24
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	40021800 	.word	0x40021800
 80038ac:	50000400 	.word	0x50000400
 80038b0:	50000800 	.word	0x50000800
 80038b4:	50000c00 	.word	0x50000c00

080038b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	0002      	movs	r2, r0
 80038c0:	1dbb      	adds	r3, r7, #6
 80038c2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80038c4:	4b10      	ldr	r3, [pc, #64]	@ (8003908 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	1dba      	adds	r2, r7, #6
 80038ca:	8812      	ldrh	r2, [r2, #0]
 80038cc:	4013      	ands	r3, r2
 80038ce:	d008      	beq.n	80038e2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80038d0:	4b0d      	ldr	r3, [pc, #52]	@ (8003908 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80038d2:	1dba      	adds	r2, r7, #6
 80038d4:	8812      	ldrh	r2, [r2, #0]
 80038d6:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80038d8:	1dbb      	adds	r3, r7, #6
 80038da:	881b      	ldrh	r3, [r3, #0]
 80038dc:	0018      	movs	r0, r3
 80038de:	f7fd fb89 	bl	8000ff4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80038e2:	4b09      	ldr	r3, [pc, #36]	@ (8003908 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	1dba      	adds	r2, r7, #6
 80038e8:	8812      	ldrh	r2, [r2, #0]
 80038ea:	4013      	ands	r3, r2
 80038ec:	d008      	beq.n	8003900 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80038ee:	4b06      	ldr	r3, [pc, #24]	@ (8003908 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80038f0:	1dba      	adds	r2, r7, #6
 80038f2:	8812      	ldrh	r2, [r2, #0]
 80038f4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80038f6:	1dbb      	adds	r3, r7, #6
 80038f8:	881b      	ldrh	r3, [r3, #0]
 80038fa:	0018      	movs	r0, r3
 80038fc:	f000 f806 	bl	800390c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8003900:	46c0      	nop			@ (mov r8, r8)
 8003902:	46bd      	mov	sp, r7
 8003904:	b002      	add	sp, #8
 8003906:	bd80      	pop	{r7, pc}
 8003908:	40021800 	.word	0x40021800

0800390c <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	0002      	movs	r2, r0
 8003914:	1dbb      	adds	r3, r7, #6
 8003916:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8003918:	46c0      	nop			@ (mov r8, r8)
 800391a:	46bd      	mov	sp, r7
 800391c:	b002      	add	sp, #8
 800391e:	bd80      	pop	{r7, pc}

08003920 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003928:	4b19      	ldr	r3, [pc, #100]	@ (8003990 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a19      	ldr	r2, [pc, #100]	@ (8003994 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800392e:	4013      	ands	r3, r2
 8003930:	0019      	movs	r1, r3
 8003932:	4b17      	ldr	r3, [pc, #92]	@ (8003990 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	430a      	orrs	r2, r1
 8003938:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	2380      	movs	r3, #128	@ 0x80
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	429a      	cmp	r2, r3
 8003942:	d11f      	bne.n	8003984 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003944:	4b14      	ldr	r3, [pc, #80]	@ (8003998 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	0013      	movs	r3, r2
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	189b      	adds	r3, r3, r2
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	4912      	ldr	r1, [pc, #72]	@ (800399c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003952:	0018      	movs	r0, r3
 8003954:	f7fc fbe0 	bl	8000118 <__udivsi3>
 8003958:	0003      	movs	r3, r0
 800395a:	3301      	adds	r3, #1
 800395c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800395e:	e008      	b.n	8003972 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	3b01      	subs	r3, #1
 800396a:	60fb      	str	r3, [r7, #12]
 800396c:	e001      	b.n	8003972 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e009      	b.n	8003986 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003972:	4b07      	ldr	r3, [pc, #28]	@ (8003990 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003974:	695a      	ldr	r2, [r3, #20]
 8003976:	2380      	movs	r3, #128	@ 0x80
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	401a      	ands	r2, r3
 800397c:	2380      	movs	r3, #128	@ 0x80
 800397e:	00db      	lsls	r3, r3, #3
 8003980:	429a      	cmp	r2, r3
 8003982:	d0ed      	beq.n	8003960 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	0018      	movs	r0, r3
 8003988:	46bd      	mov	sp, r7
 800398a:	b004      	add	sp, #16
 800398c:	bd80      	pop	{r7, pc}
 800398e:	46c0      	nop			@ (mov r8, r8)
 8003990:	40007000 	.word	0x40007000
 8003994:	fffff9ff 	.word	0xfffff9ff
 8003998:	20000404 	.word	0x20000404
 800399c:	000f4240 	.word	0x000f4240

080039a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b088      	sub	sp, #32
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e2fe      	b.n	8003fb0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2201      	movs	r2, #1
 80039b8:	4013      	ands	r3, r2
 80039ba:	d100      	bne.n	80039be <HAL_RCC_OscConfig+0x1e>
 80039bc:	e07c      	b.n	8003ab8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039be:	4bc3      	ldr	r3, [pc, #780]	@ (8003ccc <HAL_RCC_OscConfig+0x32c>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	2238      	movs	r2, #56	@ 0x38
 80039c4:	4013      	ands	r3, r2
 80039c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039c8:	4bc0      	ldr	r3, [pc, #768]	@ (8003ccc <HAL_RCC_OscConfig+0x32c>)
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	2203      	movs	r2, #3
 80039ce:	4013      	ands	r3, r2
 80039d0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	2b10      	cmp	r3, #16
 80039d6:	d102      	bne.n	80039de <HAL_RCC_OscConfig+0x3e>
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	2b03      	cmp	r3, #3
 80039dc:	d002      	beq.n	80039e4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	2b08      	cmp	r3, #8
 80039e2:	d10b      	bne.n	80039fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039e4:	4bb9      	ldr	r3, [pc, #740]	@ (8003ccc <HAL_RCC_OscConfig+0x32c>)
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	2380      	movs	r3, #128	@ 0x80
 80039ea:	029b      	lsls	r3, r3, #10
 80039ec:	4013      	ands	r3, r2
 80039ee:	d062      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x116>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d15e      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e2d9      	b.n	8003fb0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685a      	ldr	r2, [r3, #4]
 8003a00:	2380      	movs	r3, #128	@ 0x80
 8003a02:	025b      	lsls	r3, r3, #9
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d107      	bne.n	8003a18 <HAL_RCC_OscConfig+0x78>
 8003a08:	4bb0      	ldr	r3, [pc, #704]	@ (8003ccc <HAL_RCC_OscConfig+0x32c>)
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	4baf      	ldr	r3, [pc, #700]	@ (8003ccc <HAL_RCC_OscConfig+0x32c>)
 8003a0e:	2180      	movs	r1, #128	@ 0x80
 8003a10:	0249      	lsls	r1, r1, #9
 8003a12:	430a      	orrs	r2, r1
 8003a14:	601a      	str	r2, [r3, #0]
 8003a16:	e020      	b.n	8003a5a <HAL_RCC_OscConfig+0xba>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685a      	ldr	r2, [r3, #4]
 8003a1c:	23a0      	movs	r3, #160	@ 0xa0
 8003a1e:	02db      	lsls	r3, r3, #11
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d10e      	bne.n	8003a42 <HAL_RCC_OscConfig+0xa2>
 8003a24:	4ba9      	ldr	r3, [pc, #676]	@ (8003ccc <HAL_RCC_OscConfig+0x32c>)
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	4ba8      	ldr	r3, [pc, #672]	@ (8003ccc <HAL_RCC_OscConfig+0x32c>)
 8003a2a:	2180      	movs	r1, #128	@ 0x80
 8003a2c:	02c9      	lsls	r1, r1, #11
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	601a      	str	r2, [r3, #0]
 8003a32:	4ba6      	ldr	r3, [pc, #664]	@ (8003ccc <HAL_RCC_OscConfig+0x32c>)
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	4ba5      	ldr	r3, [pc, #660]	@ (8003ccc <HAL_RCC_OscConfig+0x32c>)
 8003a38:	2180      	movs	r1, #128	@ 0x80
 8003a3a:	0249      	lsls	r1, r1, #9
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	601a      	str	r2, [r3, #0]
 8003a40:	e00b      	b.n	8003a5a <HAL_RCC_OscConfig+0xba>
 8003a42:	4ba2      	ldr	r3, [pc, #648]	@ (8003ccc <HAL_RCC_OscConfig+0x32c>)
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	4ba1      	ldr	r3, [pc, #644]	@ (8003ccc <HAL_RCC_OscConfig+0x32c>)
 8003a48:	49a1      	ldr	r1, [pc, #644]	@ (8003cd0 <HAL_RCC_OscConfig+0x330>)
 8003a4a:	400a      	ands	r2, r1
 8003a4c:	601a      	str	r2, [r3, #0]
 8003a4e:	4b9f      	ldr	r3, [pc, #636]	@ (8003ccc <HAL_RCC_OscConfig+0x32c>)
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	4b9e      	ldr	r3, [pc, #632]	@ (8003ccc <HAL_RCC_OscConfig+0x32c>)
 8003a54:	499f      	ldr	r1, [pc, #636]	@ (8003cd4 <HAL_RCC_OscConfig+0x334>)
 8003a56:	400a      	ands	r2, r1
 8003a58:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d014      	beq.n	8003a8c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a62:	f7fe fa0f 	bl	8001e84 <HAL_GetTick>
 8003a66:	0003      	movs	r3, r0
 8003a68:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a6a:	e008      	b.n	8003a7e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a6c:	f7fe fa0a 	bl	8001e84 <HAL_GetTick>
 8003a70:	0002      	movs	r2, r0
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b64      	cmp	r3, #100	@ 0x64
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e298      	b.n	8003fb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a7e:	4b93      	ldr	r3, [pc, #588]	@ (8003ccc <HAL_RCC_OscConfig+0x32c>)
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	2380      	movs	r3, #128	@ 0x80
 8003a84:	029b      	lsls	r3, r3, #10
 8003a86:	4013      	ands	r3, r2
 8003a88:	d0f0      	beq.n	8003a6c <HAL_RCC_OscConfig+0xcc>
 8003a8a:	e015      	b.n	8003ab8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a8c:	f7fe f9fa 	bl	8001e84 <HAL_GetTick>
 8003a90:	0003      	movs	r3, r0
 8003a92:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a94:	e008      	b.n	8003aa8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a96:	f7fe f9f5 	bl	8001e84 <HAL_GetTick>
 8003a9a:	0002      	movs	r2, r0
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b64      	cmp	r3, #100	@ 0x64
 8003aa2:	d901      	bls.n	8003aa8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e283      	b.n	8003fb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003aa8:	4b88      	ldr	r3, [pc, #544]	@ (8003ccc <HAL_RCC_OscConfig+0x32c>)
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	2380      	movs	r3, #128	@ 0x80
 8003aae:	029b      	lsls	r3, r3, #10
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	d1f0      	bne.n	8003a96 <HAL_RCC_OscConfig+0xf6>
 8003ab4:	e000      	b.n	8003ab8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ab6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2202      	movs	r2, #2
 8003abe:	4013      	ands	r3, r2
 8003ac0:	d100      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x124>
 8003ac2:	e099      	b.n	8003bf8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ac4:	4b81      	ldr	r3, [pc, #516]	@ (8003ccc <HAL_RCC_OscConfig+0x32c>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	2238      	movs	r2, #56	@ 0x38
 8003aca:	4013      	ands	r3, r2
 8003acc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ace:	4b7f      	ldr	r3, [pc, #508]	@ (8003ccc <HAL_RCC_OscConfig+0x32c>)
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	2203      	movs	r2, #3
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	2b10      	cmp	r3, #16
 8003adc:	d102      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x144>
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d002      	beq.n	8003aea <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d135      	bne.n	8003b56 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003aea:	4b78      	ldr	r3, [pc, #480]	@ (8003ccc <HAL_RCC_OscConfig+0x32c>)
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	2380      	movs	r3, #128	@ 0x80
 8003af0:	00db      	lsls	r3, r3, #3
 8003af2:	4013      	ands	r3, r2
 8003af4:	d005      	beq.n	8003b02 <HAL_RCC_OscConfig+0x162>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e256      	b.n	8003fb0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b02:	4b72      	ldr	r3, [pc, #456]	@ (8003ccc <HAL_RCC_OscConfig+0x32c>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	4a74      	ldr	r2, [pc, #464]	@ (8003cd8 <HAL_RCC_OscConfig+0x338>)
 8003b08:	4013      	ands	r3, r2
 8003b0a:	0019      	movs	r1, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	695b      	ldr	r3, [r3, #20]
 8003b10:	021a      	lsls	r2, r3, #8
 8003b12:	4b6e      	ldr	r3, [pc, #440]	@ (8003ccc <HAL_RCC_OscConfig+0x32c>)
 8003b14:	430a      	orrs	r2, r1
 8003b16:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d112      	bne.n	8003b44 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003b1e:	4b6b      	ldr	r3, [pc, #428]	@ (8003ccc <HAL_RCC_OscConfig+0x32c>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a6e      	ldr	r2, [pc, #440]	@ (8003cdc <HAL_RCC_OscConfig+0x33c>)
 8003b24:	4013      	ands	r3, r2
 8003b26:	0019      	movs	r1, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	691a      	ldr	r2, [r3, #16]
 8003b2c:	4b67      	ldr	r3, [pc, #412]	@ (8003ccc <HAL_RCC_OscConfig+0x32c>)
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003b32:	4b66      	ldr	r3, [pc, #408]	@ (8003ccc <HAL_RCC_OscConfig+0x32c>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	0adb      	lsrs	r3, r3, #11
 8003b38:	2207      	movs	r2, #7
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	4a68      	ldr	r2, [pc, #416]	@ (8003ce0 <HAL_RCC_OscConfig+0x340>)
 8003b3e:	40da      	lsrs	r2, r3
 8003b40:	4b68      	ldr	r3, [pc, #416]	@ (8003ce4 <HAL_RCC_OscConfig+0x344>)
 8003b42:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003b44:	4b68      	ldr	r3, [pc, #416]	@ (8003ce8 <HAL_RCC_OscConfig+0x348>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	0018      	movs	r0, r3
 8003b4a:	f7fe f93f 	bl	8001dcc <HAL_InitTick>
 8003b4e:	1e03      	subs	r3, r0, #0
 8003b50:	d051      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e22c      	b.n	8003fb0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d030      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003b5e:	4b5b      	ldr	r3, [pc, #364]	@ (8003ccc <HAL_RCC_OscConfig+0x32c>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a5e      	ldr	r2, [pc, #376]	@ (8003cdc <HAL_RCC_OscConfig+0x33c>)
 8003b64:	4013      	ands	r3, r2
 8003b66:	0019      	movs	r1, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	691a      	ldr	r2, [r3, #16]
 8003b6c:	4b57      	ldr	r3, [pc, #348]	@ (8003ccc <HAL_RCC_OscConfig+0x32c>)
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003b72:	4b56      	ldr	r3, [pc, #344]	@ (8003ccc <HAL_RCC_OscConfig+0x32c>)
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	4b55      	ldr	r3, [pc, #340]	@ (8003ccc <HAL_RCC_OscConfig+0x32c>)
 8003b78:	2180      	movs	r1, #128	@ 0x80
 8003b7a:	0049      	lsls	r1, r1, #1
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b80:	f7fe f980 	bl	8001e84 <HAL_GetTick>
 8003b84:	0003      	movs	r3, r0
 8003b86:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b88:	e008      	b.n	8003b9c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b8a:	f7fe f97b 	bl	8001e84 <HAL_GetTick>
 8003b8e:	0002      	movs	r2, r0
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d901      	bls.n	8003b9c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e209      	b.n	8003fb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b9c:	4b4b      	ldr	r3, [pc, #300]	@ (8003ccc <HAL_RCC_OscConfig+0x32c>)
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	2380      	movs	r3, #128	@ 0x80
 8003ba2:	00db      	lsls	r3, r3, #3
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	d0f0      	beq.n	8003b8a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ba8:	4b48      	ldr	r3, [pc, #288]	@ (8003ccc <HAL_RCC_OscConfig+0x32c>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	4a4a      	ldr	r2, [pc, #296]	@ (8003cd8 <HAL_RCC_OscConfig+0x338>)
 8003bae:	4013      	ands	r3, r2
 8003bb0:	0019      	movs	r1, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	021a      	lsls	r2, r3, #8
 8003bb8:	4b44      	ldr	r3, [pc, #272]	@ (8003ccc <HAL_RCC_OscConfig+0x32c>)
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	605a      	str	r2, [r3, #4]
 8003bbe:	e01b      	b.n	8003bf8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003bc0:	4b42      	ldr	r3, [pc, #264]	@ (8003ccc <HAL_RCC_OscConfig+0x32c>)
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	4b41      	ldr	r3, [pc, #260]	@ (8003ccc <HAL_RCC_OscConfig+0x32c>)
 8003bc6:	4949      	ldr	r1, [pc, #292]	@ (8003cec <HAL_RCC_OscConfig+0x34c>)
 8003bc8:	400a      	ands	r2, r1
 8003bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bcc:	f7fe f95a 	bl	8001e84 <HAL_GetTick>
 8003bd0:	0003      	movs	r3, r0
 8003bd2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bd4:	e008      	b.n	8003be8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bd6:	f7fe f955 	bl	8001e84 <HAL_GetTick>
 8003bda:	0002      	movs	r2, r0
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d901      	bls.n	8003be8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e1e3      	b.n	8003fb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003be8:	4b38      	ldr	r3, [pc, #224]	@ (8003ccc <HAL_RCC_OscConfig+0x32c>)
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	2380      	movs	r3, #128	@ 0x80
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	d1f0      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x236>
 8003bf4:	e000      	b.n	8003bf8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bf6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2208      	movs	r2, #8
 8003bfe:	4013      	ands	r3, r2
 8003c00:	d047      	beq.n	8003c92 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003c02:	4b32      	ldr	r3, [pc, #200]	@ (8003ccc <HAL_RCC_OscConfig+0x32c>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	2238      	movs	r2, #56	@ 0x38
 8003c08:	4013      	ands	r3, r2
 8003c0a:	2b18      	cmp	r3, #24
 8003c0c:	d10a      	bne.n	8003c24 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003c0e:	4b2f      	ldr	r3, [pc, #188]	@ (8003ccc <HAL_RCC_OscConfig+0x32c>)
 8003c10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c12:	2202      	movs	r2, #2
 8003c14:	4013      	ands	r3, r2
 8003c16:	d03c      	beq.n	8003c92 <HAL_RCC_OscConfig+0x2f2>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d138      	bne.n	8003c92 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e1c5      	b.n	8003fb0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d019      	beq.n	8003c60 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003c2c:	4b27      	ldr	r3, [pc, #156]	@ (8003ccc <HAL_RCC_OscConfig+0x32c>)
 8003c2e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003c30:	4b26      	ldr	r3, [pc, #152]	@ (8003ccc <HAL_RCC_OscConfig+0x32c>)
 8003c32:	2101      	movs	r1, #1
 8003c34:	430a      	orrs	r2, r1
 8003c36:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c38:	f7fe f924 	bl	8001e84 <HAL_GetTick>
 8003c3c:	0003      	movs	r3, r0
 8003c3e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c40:	e008      	b.n	8003c54 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c42:	f7fe f91f 	bl	8001e84 <HAL_GetTick>
 8003c46:	0002      	movs	r2, r0
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d901      	bls.n	8003c54 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e1ad      	b.n	8003fb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c54:	4b1d      	ldr	r3, [pc, #116]	@ (8003ccc <HAL_RCC_OscConfig+0x32c>)
 8003c56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c58:	2202      	movs	r2, #2
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	d0f1      	beq.n	8003c42 <HAL_RCC_OscConfig+0x2a2>
 8003c5e:	e018      	b.n	8003c92 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003c60:	4b1a      	ldr	r3, [pc, #104]	@ (8003ccc <HAL_RCC_OscConfig+0x32c>)
 8003c62:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003c64:	4b19      	ldr	r3, [pc, #100]	@ (8003ccc <HAL_RCC_OscConfig+0x32c>)
 8003c66:	2101      	movs	r1, #1
 8003c68:	438a      	bics	r2, r1
 8003c6a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c6c:	f7fe f90a 	bl	8001e84 <HAL_GetTick>
 8003c70:	0003      	movs	r3, r0
 8003c72:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c74:	e008      	b.n	8003c88 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c76:	f7fe f905 	bl	8001e84 <HAL_GetTick>
 8003c7a:	0002      	movs	r2, r0
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d901      	bls.n	8003c88 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e193      	b.n	8003fb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c88:	4b10      	ldr	r3, [pc, #64]	@ (8003ccc <HAL_RCC_OscConfig+0x32c>)
 8003c8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c8c:	2202      	movs	r2, #2
 8003c8e:	4013      	ands	r3, r2
 8003c90:	d1f1      	bne.n	8003c76 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2204      	movs	r2, #4
 8003c98:	4013      	ands	r3, r2
 8003c9a:	d100      	bne.n	8003c9e <HAL_RCC_OscConfig+0x2fe>
 8003c9c:	e0c6      	b.n	8003e2c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c9e:	231f      	movs	r3, #31
 8003ca0:	18fb      	adds	r3, r7, r3
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003ca6:	4b09      	ldr	r3, [pc, #36]	@ (8003ccc <HAL_RCC_OscConfig+0x32c>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	2238      	movs	r2, #56	@ 0x38
 8003cac:	4013      	ands	r3, r2
 8003cae:	2b20      	cmp	r3, #32
 8003cb0:	d11e      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003cb2:	4b06      	ldr	r3, [pc, #24]	@ (8003ccc <HAL_RCC_OscConfig+0x32c>)
 8003cb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	4013      	ands	r3, r2
 8003cba:	d100      	bne.n	8003cbe <HAL_RCC_OscConfig+0x31e>
 8003cbc:	e0b6      	b.n	8003e2c <HAL_RCC_OscConfig+0x48c>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d000      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x328>
 8003cc6:	e0b1      	b.n	8003e2c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e171      	b.n	8003fb0 <HAL_RCC_OscConfig+0x610>
 8003ccc:	40021000 	.word	0x40021000
 8003cd0:	fffeffff 	.word	0xfffeffff
 8003cd4:	fffbffff 	.word	0xfffbffff
 8003cd8:	ffff80ff 	.word	0xffff80ff
 8003cdc:	ffffc7ff 	.word	0xffffc7ff
 8003ce0:	00f42400 	.word	0x00f42400
 8003ce4:	20000404 	.word	0x20000404
 8003ce8:	20000408 	.word	0x20000408
 8003cec:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003cf0:	4bb1      	ldr	r3, [pc, #708]	@ (8003fb8 <HAL_RCC_OscConfig+0x618>)
 8003cf2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003cf4:	2380      	movs	r3, #128	@ 0x80
 8003cf6:	055b      	lsls	r3, r3, #21
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	d101      	bne.n	8003d00 <HAL_RCC_OscConfig+0x360>
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e000      	b.n	8003d02 <HAL_RCC_OscConfig+0x362>
 8003d00:	2300      	movs	r3, #0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d011      	beq.n	8003d2a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003d06:	4bac      	ldr	r3, [pc, #688]	@ (8003fb8 <HAL_RCC_OscConfig+0x618>)
 8003d08:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d0a:	4bab      	ldr	r3, [pc, #684]	@ (8003fb8 <HAL_RCC_OscConfig+0x618>)
 8003d0c:	2180      	movs	r1, #128	@ 0x80
 8003d0e:	0549      	lsls	r1, r1, #21
 8003d10:	430a      	orrs	r2, r1
 8003d12:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003d14:	4ba8      	ldr	r3, [pc, #672]	@ (8003fb8 <HAL_RCC_OscConfig+0x618>)
 8003d16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d18:	2380      	movs	r3, #128	@ 0x80
 8003d1a:	055b      	lsls	r3, r3, #21
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	60fb      	str	r3, [r7, #12]
 8003d20:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003d22:	231f      	movs	r3, #31
 8003d24:	18fb      	adds	r3, r7, r3
 8003d26:	2201      	movs	r2, #1
 8003d28:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d2a:	4ba4      	ldr	r3, [pc, #656]	@ (8003fbc <HAL_RCC_OscConfig+0x61c>)
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	2380      	movs	r3, #128	@ 0x80
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	4013      	ands	r3, r2
 8003d34:	d11a      	bne.n	8003d6c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d36:	4ba1      	ldr	r3, [pc, #644]	@ (8003fbc <HAL_RCC_OscConfig+0x61c>)
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	4ba0      	ldr	r3, [pc, #640]	@ (8003fbc <HAL_RCC_OscConfig+0x61c>)
 8003d3c:	2180      	movs	r1, #128	@ 0x80
 8003d3e:	0049      	lsls	r1, r1, #1
 8003d40:	430a      	orrs	r2, r1
 8003d42:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003d44:	f7fe f89e 	bl	8001e84 <HAL_GetTick>
 8003d48:	0003      	movs	r3, r0
 8003d4a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d4c:	e008      	b.n	8003d60 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d4e:	f7fe f899 	bl	8001e84 <HAL_GetTick>
 8003d52:	0002      	movs	r2, r0
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d901      	bls.n	8003d60 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e127      	b.n	8003fb0 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d60:	4b96      	ldr	r3, [pc, #600]	@ (8003fbc <HAL_RCC_OscConfig+0x61c>)
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	2380      	movs	r3, #128	@ 0x80
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	4013      	ands	r3, r2
 8003d6a:	d0f0      	beq.n	8003d4e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d106      	bne.n	8003d82 <HAL_RCC_OscConfig+0x3e2>
 8003d74:	4b90      	ldr	r3, [pc, #576]	@ (8003fb8 <HAL_RCC_OscConfig+0x618>)
 8003d76:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003d78:	4b8f      	ldr	r3, [pc, #572]	@ (8003fb8 <HAL_RCC_OscConfig+0x618>)
 8003d7a:	2101      	movs	r1, #1
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003d80:	e01c      	b.n	8003dbc <HAL_RCC_OscConfig+0x41c>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	2b05      	cmp	r3, #5
 8003d88:	d10c      	bne.n	8003da4 <HAL_RCC_OscConfig+0x404>
 8003d8a:	4b8b      	ldr	r3, [pc, #556]	@ (8003fb8 <HAL_RCC_OscConfig+0x618>)
 8003d8c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003d8e:	4b8a      	ldr	r3, [pc, #552]	@ (8003fb8 <HAL_RCC_OscConfig+0x618>)
 8003d90:	2104      	movs	r1, #4
 8003d92:	430a      	orrs	r2, r1
 8003d94:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003d96:	4b88      	ldr	r3, [pc, #544]	@ (8003fb8 <HAL_RCC_OscConfig+0x618>)
 8003d98:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003d9a:	4b87      	ldr	r3, [pc, #540]	@ (8003fb8 <HAL_RCC_OscConfig+0x618>)
 8003d9c:	2101      	movs	r1, #1
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003da2:	e00b      	b.n	8003dbc <HAL_RCC_OscConfig+0x41c>
 8003da4:	4b84      	ldr	r3, [pc, #528]	@ (8003fb8 <HAL_RCC_OscConfig+0x618>)
 8003da6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003da8:	4b83      	ldr	r3, [pc, #524]	@ (8003fb8 <HAL_RCC_OscConfig+0x618>)
 8003daa:	2101      	movs	r1, #1
 8003dac:	438a      	bics	r2, r1
 8003dae:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003db0:	4b81      	ldr	r3, [pc, #516]	@ (8003fb8 <HAL_RCC_OscConfig+0x618>)
 8003db2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003db4:	4b80      	ldr	r3, [pc, #512]	@ (8003fb8 <HAL_RCC_OscConfig+0x618>)
 8003db6:	2104      	movs	r1, #4
 8003db8:	438a      	bics	r2, r1
 8003dba:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d014      	beq.n	8003dee <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc4:	f7fe f85e 	bl	8001e84 <HAL_GetTick>
 8003dc8:	0003      	movs	r3, r0
 8003dca:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dcc:	e009      	b.n	8003de2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dce:	f7fe f859 	bl	8001e84 <HAL_GetTick>
 8003dd2:	0002      	movs	r2, r0
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	4a79      	ldr	r2, [pc, #484]	@ (8003fc0 <HAL_RCC_OscConfig+0x620>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e0e6      	b.n	8003fb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003de2:	4b75      	ldr	r3, [pc, #468]	@ (8003fb8 <HAL_RCC_OscConfig+0x618>)
 8003de4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003de6:	2202      	movs	r2, #2
 8003de8:	4013      	ands	r3, r2
 8003dea:	d0f0      	beq.n	8003dce <HAL_RCC_OscConfig+0x42e>
 8003dec:	e013      	b.n	8003e16 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dee:	f7fe f849 	bl	8001e84 <HAL_GetTick>
 8003df2:	0003      	movs	r3, r0
 8003df4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003df6:	e009      	b.n	8003e0c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003df8:	f7fe f844 	bl	8001e84 <HAL_GetTick>
 8003dfc:	0002      	movs	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	4a6f      	ldr	r2, [pc, #444]	@ (8003fc0 <HAL_RCC_OscConfig+0x620>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d901      	bls.n	8003e0c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e0d1      	b.n	8003fb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e0c:	4b6a      	ldr	r3, [pc, #424]	@ (8003fb8 <HAL_RCC_OscConfig+0x618>)
 8003e0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e10:	2202      	movs	r2, #2
 8003e12:	4013      	ands	r3, r2
 8003e14:	d1f0      	bne.n	8003df8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003e16:	231f      	movs	r3, #31
 8003e18:	18fb      	adds	r3, r7, r3
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d105      	bne.n	8003e2c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003e20:	4b65      	ldr	r3, [pc, #404]	@ (8003fb8 <HAL_RCC_OscConfig+0x618>)
 8003e22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e24:	4b64      	ldr	r3, [pc, #400]	@ (8003fb8 <HAL_RCC_OscConfig+0x618>)
 8003e26:	4967      	ldr	r1, [pc, #412]	@ (8003fc4 <HAL_RCC_OscConfig+0x624>)
 8003e28:	400a      	ands	r2, r1
 8003e2a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	69db      	ldr	r3, [r3, #28]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d100      	bne.n	8003e36 <HAL_RCC_OscConfig+0x496>
 8003e34:	e0bb      	b.n	8003fae <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e36:	4b60      	ldr	r3, [pc, #384]	@ (8003fb8 <HAL_RCC_OscConfig+0x618>)
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	2238      	movs	r2, #56	@ 0x38
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	2b10      	cmp	r3, #16
 8003e40:	d100      	bne.n	8003e44 <HAL_RCC_OscConfig+0x4a4>
 8003e42:	e07b      	b.n	8003f3c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	69db      	ldr	r3, [r3, #28]
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d156      	bne.n	8003efa <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e4c:	4b5a      	ldr	r3, [pc, #360]	@ (8003fb8 <HAL_RCC_OscConfig+0x618>)
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	4b59      	ldr	r3, [pc, #356]	@ (8003fb8 <HAL_RCC_OscConfig+0x618>)
 8003e52:	495d      	ldr	r1, [pc, #372]	@ (8003fc8 <HAL_RCC_OscConfig+0x628>)
 8003e54:	400a      	ands	r2, r1
 8003e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e58:	f7fe f814 	bl	8001e84 <HAL_GetTick>
 8003e5c:	0003      	movs	r3, r0
 8003e5e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e60:	e008      	b.n	8003e74 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e62:	f7fe f80f 	bl	8001e84 <HAL_GetTick>
 8003e66:	0002      	movs	r2, r0
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d901      	bls.n	8003e74 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e09d      	b.n	8003fb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e74:	4b50      	ldr	r3, [pc, #320]	@ (8003fb8 <HAL_RCC_OscConfig+0x618>)
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	2380      	movs	r3, #128	@ 0x80
 8003e7a:	049b      	lsls	r3, r3, #18
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	d1f0      	bne.n	8003e62 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e80:	4b4d      	ldr	r3, [pc, #308]	@ (8003fb8 <HAL_RCC_OscConfig+0x618>)
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	4a51      	ldr	r2, [pc, #324]	@ (8003fcc <HAL_RCC_OscConfig+0x62c>)
 8003e86:	4013      	ands	r3, r2
 8003e88:	0019      	movs	r1, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a1a      	ldr	r2, [r3, #32]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e92:	431a      	orrs	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e98:	021b      	lsls	r3, r3, #8
 8003e9a:	431a      	orrs	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea0:	431a      	orrs	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eac:	431a      	orrs	r2, r3
 8003eae:	4b42      	ldr	r3, [pc, #264]	@ (8003fb8 <HAL_RCC_OscConfig+0x618>)
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003eb4:	4b40      	ldr	r3, [pc, #256]	@ (8003fb8 <HAL_RCC_OscConfig+0x618>)
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	4b3f      	ldr	r3, [pc, #252]	@ (8003fb8 <HAL_RCC_OscConfig+0x618>)
 8003eba:	2180      	movs	r1, #128	@ 0x80
 8003ebc:	0449      	lsls	r1, r1, #17
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003ec2:	4b3d      	ldr	r3, [pc, #244]	@ (8003fb8 <HAL_RCC_OscConfig+0x618>)
 8003ec4:	68da      	ldr	r2, [r3, #12]
 8003ec6:	4b3c      	ldr	r3, [pc, #240]	@ (8003fb8 <HAL_RCC_OscConfig+0x618>)
 8003ec8:	2180      	movs	r1, #128	@ 0x80
 8003eca:	0549      	lsls	r1, r1, #21
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed0:	f7fd ffd8 	bl	8001e84 <HAL_GetTick>
 8003ed4:	0003      	movs	r3, r0
 8003ed6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ed8:	e008      	b.n	8003eec <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eda:	f7fd ffd3 	bl	8001e84 <HAL_GetTick>
 8003ede:	0002      	movs	r2, r0
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d901      	bls.n	8003eec <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e061      	b.n	8003fb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eec:	4b32      	ldr	r3, [pc, #200]	@ (8003fb8 <HAL_RCC_OscConfig+0x618>)
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	2380      	movs	r3, #128	@ 0x80
 8003ef2:	049b      	lsls	r3, r3, #18
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	d0f0      	beq.n	8003eda <HAL_RCC_OscConfig+0x53a>
 8003ef8:	e059      	b.n	8003fae <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003efa:	4b2f      	ldr	r3, [pc, #188]	@ (8003fb8 <HAL_RCC_OscConfig+0x618>)
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	4b2e      	ldr	r3, [pc, #184]	@ (8003fb8 <HAL_RCC_OscConfig+0x618>)
 8003f00:	4931      	ldr	r1, [pc, #196]	@ (8003fc8 <HAL_RCC_OscConfig+0x628>)
 8003f02:	400a      	ands	r2, r1
 8003f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f06:	f7fd ffbd 	bl	8001e84 <HAL_GetTick>
 8003f0a:	0003      	movs	r3, r0
 8003f0c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f10:	f7fd ffb8 	bl	8001e84 <HAL_GetTick>
 8003f14:	0002      	movs	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e046      	b.n	8003fb0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f22:	4b25      	ldr	r3, [pc, #148]	@ (8003fb8 <HAL_RCC_OscConfig+0x618>)
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	2380      	movs	r3, #128	@ 0x80
 8003f28:	049b      	lsls	r3, r3, #18
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	d1f0      	bne.n	8003f10 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003f2e:	4b22      	ldr	r3, [pc, #136]	@ (8003fb8 <HAL_RCC_OscConfig+0x618>)
 8003f30:	68da      	ldr	r2, [r3, #12]
 8003f32:	4b21      	ldr	r3, [pc, #132]	@ (8003fb8 <HAL_RCC_OscConfig+0x618>)
 8003f34:	4926      	ldr	r1, [pc, #152]	@ (8003fd0 <HAL_RCC_OscConfig+0x630>)
 8003f36:	400a      	ands	r2, r1
 8003f38:	60da      	str	r2, [r3, #12]
 8003f3a:	e038      	b.n	8003fae <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	69db      	ldr	r3, [r3, #28]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d101      	bne.n	8003f48 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e033      	b.n	8003fb0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003f48:	4b1b      	ldr	r3, [pc, #108]	@ (8003fb8 <HAL_RCC_OscConfig+0x618>)
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	2203      	movs	r2, #3
 8003f52:	401a      	ands	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a1b      	ldr	r3, [r3, #32]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d126      	bne.n	8003faa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	2270      	movs	r2, #112	@ 0x70
 8003f60:	401a      	ands	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d11f      	bne.n	8003faa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	23fe      	movs	r3, #254	@ 0xfe
 8003f6e:	01db      	lsls	r3, r3, #7
 8003f70:	401a      	ands	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f76:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d116      	bne.n	8003faa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f7c:	697a      	ldr	r2, [r7, #20]
 8003f7e:	23f8      	movs	r3, #248	@ 0xf8
 8003f80:	039b      	lsls	r3, r3, #14
 8003f82:	401a      	ands	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d10e      	bne.n	8003faa <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003f8c:	697a      	ldr	r2, [r7, #20]
 8003f8e:	23e0      	movs	r3, #224	@ 0xe0
 8003f90:	051b      	lsls	r3, r3, #20
 8003f92:	401a      	ands	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d106      	bne.n	8003faa <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	0f5b      	lsrs	r3, r3, #29
 8003fa0:	075a      	lsls	r2, r3, #29
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d001      	beq.n	8003fae <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e000      	b.n	8003fb0 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	0018      	movs	r0, r3
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	b008      	add	sp, #32
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	40021000 	.word	0x40021000
 8003fbc:	40007000 	.word	0x40007000
 8003fc0:	00001388 	.word	0x00001388
 8003fc4:	efffffff 	.word	0xefffffff
 8003fc8:	feffffff 	.word	0xfeffffff
 8003fcc:	11c1808c 	.word	0x11c1808c
 8003fd0:	eefefffc 	.word	0xeefefffc

08003fd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d101      	bne.n	8003fe8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e0e9      	b.n	80041bc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fe8:	4b76      	ldr	r3, [pc, #472]	@ (80041c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2207      	movs	r2, #7
 8003fee:	4013      	ands	r3, r2
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d91e      	bls.n	8004034 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ff6:	4b73      	ldr	r3, [pc, #460]	@ (80041c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2207      	movs	r2, #7
 8003ffc:	4393      	bics	r3, r2
 8003ffe:	0019      	movs	r1, r3
 8004000:	4b70      	ldr	r3, [pc, #448]	@ (80041c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004002:	683a      	ldr	r2, [r7, #0]
 8004004:	430a      	orrs	r2, r1
 8004006:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004008:	f7fd ff3c 	bl	8001e84 <HAL_GetTick>
 800400c:	0003      	movs	r3, r0
 800400e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004010:	e009      	b.n	8004026 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004012:	f7fd ff37 	bl	8001e84 <HAL_GetTick>
 8004016:	0002      	movs	r2, r0
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	4a6a      	ldr	r2, [pc, #424]	@ (80041c8 <HAL_RCC_ClockConfig+0x1f4>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d901      	bls.n	8004026 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e0ca      	b.n	80041bc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004026:	4b67      	ldr	r3, [pc, #412]	@ (80041c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2207      	movs	r2, #7
 800402c:	4013      	ands	r3, r2
 800402e:	683a      	ldr	r2, [r7, #0]
 8004030:	429a      	cmp	r2, r3
 8004032:	d1ee      	bne.n	8004012 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2202      	movs	r2, #2
 800403a:	4013      	ands	r3, r2
 800403c:	d015      	beq.n	800406a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2204      	movs	r2, #4
 8004044:	4013      	ands	r3, r2
 8004046:	d006      	beq.n	8004056 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004048:	4b60      	ldr	r3, [pc, #384]	@ (80041cc <HAL_RCC_ClockConfig+0x1f8>)
 800404a:	689a      	ldr	r2, [r3, #8]
 800404c:	4b5f      	ldr	r3, [pc, #380]	@ (80041cc <HAL_RCC_ClockConfig+0x1f8>)
 800404e:	21e0      	movs	r1, #224	@ 0xe0
 8004050:	01c9      	lsls	r1, r1, #7
 8004052:	430a      	orrs	r2, r1
 8004054:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004056:	4b5d      	ldr	r3, [pc, #372]	@ (80041cc <HAL_RCC_ClockConfig+0x1f8>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	4a5d      	ldr	r2, [pc, #372]	@ (80041d0 <HAL_RCC_ClockConfig+0x1fc>)
 800405c:	4013      	ands	r3, r2
 800405e:	0019      	movs	r1, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689a      	ldr	r2, [r3, #8]
 8004064:	4b59      	ldr	r3, [pc, #356]	@ (80041cc <HAL_RCC_ClockConfig+0x1f8>)
 8004066:	430a      	orrs	r2, r1
 8004068:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2201      	movs	r2, #1
 8004070:	4013      	ands	r3, r2
 8004072:	d057      	beq.n	8004124 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d107      	bne.n	800408c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800407c:	4b53      	ldr	r3, [pc, #332]	@ (80041cc <HAL_RCC_ClockConfig+0x1f8>)
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	2380      	movs	r3, #128	@ 0x80
 8004082:	029b      	lsls	r3, r3, #10
 8004084:	4013      	ands	r3, r2
 8004086:	d12b      	bne.n	80040e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e097      	b.n	80041bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	2b02      	cmp	r3, #2
 8004092:	d107      	bne.n	80040a4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004094:	4b4d      	ldr	r3, [pc, #308]	@ (80041cc <HAL_RCC_ClockConfig+0x1f8>)
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	2380      	movs	r3, #128	@ 0x80
 800409a:	049b      	lsls	r3, r3, #18
 800409c:	4013      	ands	r3, r2
 800409e:	d11f      	bne.n	80040e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e08b      	b.n	80041bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d107      	bne.n	80040bc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040ac:	4b47      	ldr	r3, [pc, #284]	@ (80041cc <HAL_RCC_ClockConfig+0x1f8>)
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	2380      	movs	r3, #128	@ 0x80
 80040b2:	00db      	lsls	r3, r3, #3
 80040b4:	4013      	ands	r3, r2
 80040b6:	d113      	bne.n	80040e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e07f      	b.n	80041bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	2b03      	cmp	r3, #3
 80040c2:	d106      	bne.n	80040d2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040c4:	4b41      	ldr	r3, [pc, #260]	@ (80041cc <HAL_RCC_ClockConfig+0x1f8>)
 80040c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040c8:	2202      	movs	r2, #2
 80040ca:	4013      	ands	r3, r2
 80040cc:	d108      	bne.n	80040e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e074      	b.n	80041bc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040d2:	4b3e      	ldr	r3, [pc, #248]	@ (80041cc <HAL_RCC_ClockConfig+0x1f8>)
 80040d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040d6:	2202      	movs	r2, #2
 80040d8:	4013      	ands	r3, r2
 80040da:	d101      	bne.n	80040e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e06d      	b.n	80041bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040e0:	4b3a      	ldr	r3, [pc, #232]	@ (80041cc <HAL_RCC_ClockConfig+0x1f8>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	2207      	movs	r2, #7
 80040e6:	4393      	bics	r3, r2
 80040e8:	0019      	movs	r1, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685a      	ldr	r2, [r3, #4]
 80040ee:	4b37      	ldr	r3, [pc, #220]	@ (80041cc <HAL_RCC_ClockConfig+0x1f8>)
 80040f0:	430a      	orrs	r2, r1
 80040f2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040f4:	f7fd fec6 	bl	8001e84 <HAL_GetTick>
 80040f8:	0003      	movs	r3, r0
 80040fa:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040fc:	e009      	b.n	8004112 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040fe:	f7fd fec1 	bl	8001e84 <HAL_GetTick>
 8004102:	0002      	movs	r2, r0
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	4a2f      	ldr	r2, [pc, #188]	@ (80041c8 <HAL_RCC_ClockConfig+0x1f4>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d901      	bls.n	8004112 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e054      	b.n	80041bc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004112:	4b2e      	ldr	r3, [pc, #184]	@ (80041cc <HAL_RCC_ClockConfig+0x1f8>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	2238      	movs	r2, #56	@ 0x38
 8004118:	401a      	ands	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	429a      	cmp	r2, r3
 8004122:	d1ec      	bne.n	80040fe <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004124:	4b27      	ldr	r3, [pc, #156]	@ (80041c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2207      	movs	r2, #7
 800412a:	4013      	ands	r3, r2
 800412c:	683a      	ldr	r2, [r7, #0]
 800412e:	429a      	cmp	r2, r3
 8004130:	d21e      	bcs.n	8004170 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004132:	4b24      	ldr	r3, [pc, #144]	@ (80041c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2207      	movs	r2, #7
 8004138:	4393      	bics	r3, r2
 800413a:	0019      	movs	r1, r3
 800413c:	4b21      	ldr	r3, [pc, #132]	@ (80041c4 <HAL_RCC_ClockConfig+0x1f0>)
 800413e:	683a      	ldr	r2, [r7, #0]
 8004140:	430a      	orrs	r2, r1
 8004142:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004144:	f7fd fe9e 	bl	8001e84 <HAL_GetTick>
 8004148:	0003      	movs	r3, r0
 800414a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800414c:	e009      	b.n	8004162 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800414e:	f7fd fe99 	bl	8001e84 <HAL_GetTick>
 8004152:	0002      	movs	r2, r0
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	4a1b      	ldr	r2, [pc, #108]	@ (80041c8 <HAL_RCC_ClockConfig+0x1f4>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d901      	bls.n	8004162 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e02c      	b.n	80041bc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004162:	4b18      	ldr	r3, [pc, #96]	@ (80041c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2207      	movs	r2, #7
 8004168:	4013      	ands	r3, r2
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	429a      	cmp	r2, r3
 800416e:	d1ee      	bne.n	800414e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2204      	movs	r2, #4
 8004176:	4013      	ands	r3, r2
 8004178:	d009      	beq.n	800418e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800417a:	4b14      	ldr	r3, [pc, #80]	@ (80041cc <HAL_RCC_ClockConfig+0x1f8>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	4a15      	ldr	r2, [pc, #84]	@ (80041d4 <HAL_RCC_ClockConfig+0x200>)
 8004180:	4013      	ands	r3, r2
 8004182:	0019      	movs	r1, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	68da      	ldr	r2, [r3, #12]
 8004188:	4b10      	ldr	r3, [pc, #64]	@ (80041cc <HAL_RCC_ClockConfig+0x1f8>)
 800418a:	430a      	orrs	r2, r1
 800418c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800418e:	f000 f829 	bl	80041e4 <HAL_RCC_GetSysClockFreq>
 8004192:	0001      	movs	r1, r0
 8004194:	4b0d      	ldr	r3, [pc, #52]	@ (80041cc <HAL_RCC_ClockConfig+0x1f8>)
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	0a1b      	lsrs	r3, r3, #8
 800419a:	220f      	movs	r2, #15
 800419c:	401a      	ands	r2, r3
 800419e:	4b0e      	ldr	r3, [pc, #56]	@ (80041d8 <HAL_RCC_ClockConfig+0x204>)
 80041a0:	0092      	lsls	r2, r2, #2
 80041a2:	58d3      	ldr	r3, [r2, r3]
 80041a4:	221f      	movs	r2, #31
 80041a6:	4013      	ands	r3, r2
 80041a8:	000a      	movs	r2, r1
 80041aa:	40da      	lsrs	r2, r3
 80041ac:	4b0b      	ldr	r3, [pc, #44]	@ (80041dc <HAL_RCC_ClockConfig+0x208>)
 80041ae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80041b0:	4b0b      	ldr	r3, [pc, #44]	@ (80041e0 <HAL_RCC_ClockConfig+0x20c>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	0018      	movs	r0, r3
 80041b6:	f7fd fe09 	bl	8001dcc <HAL_InitTick>
 80041ba:	0003      	movs	r3, r0
}
 80041bc:	0018      	movs	r0, r3
 80041be:	46bd      	mov	sp, r7
 80041c0:	b004      	add	sp, #16
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	40022000 	.word	0x40022000
 80041c8:	00001388 	.word	0x00001388
 80041cc:	40021000 	.word	0x40021000
 80041d0:	fffff0ff 	.word	0xfffff0ff
 80041d4:	ffff8fff 	.word	0xffff8fff
 80041d8:	08006b70 	.word	0x08006b70
 80041dc:	20000404 	.word	0x20000404
 80041e0:	20000408 	.word	0x20000408

080041e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80041ea:	4b3c      	ldr	r3, [pc, #240]	@ (80042dc <HAL_RCC_GetSysClockFreq+0xf8>)
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	2238      	movs	r2, #56	@ 0x38
 80041f0:	4013      	ands	r3, r2
 80041f2:	d10f      	bne.n	8004214 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80041f4:	4b39      	ldr	r3, [pc, #228]	@ (80042dc <HAL_RCC_GetSysClockFreq+0xf8>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	0adb      	lsrs	r3, r3, #11
 80041fa:	2207      	movs	r2, #7
 80041fc:	4013      	ands	r3, r2
 80041fe:	2201      	movs	r2, #1
 8004200:	409a      	lsls	r2, r3
 8004202:	0013      	movs	r3, r2
 8004204:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004206:	6839      	ldr	r1, [r7, #0]
 8004208:	4835      	ldr	r0, [pc, #212]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0xfc>)
 800420a:	f7fb ff85 	bl	8000118 <__udivsi3>
 800420e:	0003      	movs	r3, r0
 8004210:	613b      	str	r3, [r7, #16]
 8004212:	e05d      	b.n	80042d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004214:	4b31      	ldr	r3, [pc, #196]	@ (80042dc <HAL_RCC_GetSysClockFreq+0xf8>)
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	2238      	movs	r2, #56	@ 0x38
 800421a:	4013      	ands	r3, r2
 800421c:	2b08      	cmp	r3, #8
 800421e:	d102      	bne.n	8004226 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004220:	4b30      	ldr	r3, [pc, #192]	@ (80042e4 <HAL_RCC_GetSysClockFreq+0x100>)
 8004222:	613b      	str	r3, [r7, #16]
 8004224:	e054      	b.n	80042d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004226:	4b2d      	ldr	r3, [pc, #180]	@ (80042dc <HAL_RCC_GetSysClockFreq+0xf8>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	2238      	movs	r2, #56	@ 0x38
 800422c:	4013      	ands	r3, r2
 800422e:	2b10      	cmp	r3, #16
 8004230:	d138      	bne.n	80042a4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004232:	4b2a      	ldr	r3, [pc, #168]	@ (80042dc <HAL_RCC_GetSysClockFreq+0xf8>)
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	2203      	movs	r2, #3
 8004238:	4013      	ands	r3, r2
 800423a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800423c:	4b27      	ldr	r3, [pc, #156]	@ (80042dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	091b      	lsrs	r3, r3, #4
 8004242:	2207      	movs	r2, #7
 8004244:	4013      	ands	r3, r2
 8004246:	3301      	adds	r3, #1
 8004248:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2b03      	cmp	r3, #3
 800424e:	d10d      	bne.n	800426c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004250:	68b9      	ldr	r1, [r7, #8]
 8004252:	4824      	ldr	r0, [pc, #144]	@ (80042e4 <HAL_RCC_GetSysClockFreq+0x100>)
 8004254:	f7fb ff60 	bl	8000118 <__udivsi3>
 8004258:	0003      	movs	r3, r0
 800425a:	0019      	movs	r1, r3
 800425c:	4b1f      	ldr	r3, [pc, #124]	@ (80042dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	0a1b      	lsrs	r3, r3, #8
 8004262:	227f      	movs	r2, #127	@ 0x7f
 8004264:	4013      	ands	r3, r2
 8004266:	434b      	muls	r3, r1
 8004268:	617b      	str	r3, [r7, #20]
        break;
 800426a:	e00d      	b.n	8004288 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800426c:	68b9      	ldr	r1, [r7, #8]
 800426e:	481c      	ldr	r0, [pc, #112]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004270:	f7fb ff52 	bl	8000118 <__udivsi3>
 8004274:	0003      	movs	r3, r0
 8004276:	0019      	movs	r1, r3
 8004278:	4b18      	ldr	r3, [pc, #96]	@ (80042dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	0a1b      	lsrs	r3, r3, #8
 800427e:	227f      	movs	r2, #127	@ 0x7f
 8004280:	4013      	ands	r3, r2
 8004282:	434b      	muls	r3, r1
 8004284:	617b      	str	r3, [r7, #20]
        break;
 8004286:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004288:	4b14      	ldr	r3, [pc, #80]	@ (80042dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	0f5b      	lsrs	r3, r3, #29
 800428e:	2207      	movs	r2, #7
 8004290:	4013      	ands	r3, r2
 8004292:	3301      	adds	r3, #1
 8004294:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004296:	6879      	ldr	r1, [r7, #4]
 8004298:	6978      	ldr	r0, [r7, #20]
 800429a:	f7fb ff3d 	bl	8000118 <__udivsi3>
 800429e:	0003      	movs	r3, r0
 80042a0:	613b      	str	r3, [r7, #16]
 80042a2:	e015      	b.n	80042d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80042a4:	4b0d      	ldr	r3, [pc, #52]	@ (80042dc <HAL_RCC_GetSysClockFreq+0xf8>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	2238      	movs	r2, #56	@ 0x38
 80042aa:	4013      	ands	r3, r2
 80042ac:	2b20      	cmp	r3, #32
 80042ae:	d103      	bne.n	80042b8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80042b0:	2380      	movs	r3, #128	@ 0x80
 80042b2:	021b      	lsls	r3, r3, #8
 80042b4:	613b      	str	r3, [r7, #16]
 80042b6:	e00b      	b.n	80042d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80042b8:	4b08      	ldr	r3, [pc, #32]	@ (80042dc <HAL_RCC_GetSysClockFreq+0xf8>)
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	2238      	movs	r2, #56	@ 0x38
 80042be:	4013      	ands	r3, r2
 80042c0:	2b18      	cmp	r3, #24
 80042c2:	d103      	bne.n	80042cc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80042c4:	23fa      	movs	r3, #250	@ 0xfa
 80042c6:	01db      	lsls	r3, r3, #7
 80042c8:	613b      	str	r3, [r7, #16]
 80042ca:	e001      	b.n	80042d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80042cc:	2300      	movs	r3, #0
 80042ce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80042d0:	693b      	ldr	r3, [r7, #16]
}
 80042d2:	0018      	movs	r0, r3
 80042d4:	46bd      	mov	sp, r7
 80042d6:	b006      	add	sp, #24
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	46c0      	nop			@ (mov r8, r8)
 80042dc:	40021000 	.word	0x40021000
 80042e0:	00f42400 	.word	0x00f42400
 80042e4:	007a1200 	.word	0x007a1200

080042e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80042f0:	2313      	movs	r3, #19
 80042f2:	18fb      	adds	r3, r7, r3
 80042f4:	2200      	movs	r2, #0
 80042f6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80042f8:	2312      	movs	r3, #18
 80042fa:	18fb      	adds	r3, r7, r3
 80042fc:	2200      	movs	r2, #0
 80042fe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	2380      	movs	r3, #128	@ 0x80
 8004306:	029b      	lsls	r3, r3, #10
 8004308:	4013      	ands	r3, r2
 800430a:	d100      	bne.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800430c:	e0a3      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800430e:	2011      	movs	r0, #17
 8004310:	183b      	adds	r3, r7, r0
 8004312:	2200      	movs	r2, #0
 8004314:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004316:	4ba5      	ldr	r3, [pc, #660]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004318:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800431a:	2380      	movs	r3, #128	@ 0x80
 800431c:	055b      	lsls	r3, r3, #21
 800431e:	4013      	ands	r3, r2
 8004320:	d110      	bne.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004322:	4ba2      	ldr	r3, [pc, #648]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004324:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004326:	4ba1      	ldr	r3, [pc, #644]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004328:	2180      	movs	r1, #128	@ 0x80
 800432a:	0549      	lsls	r1, r1, #21
 800432c:	430a      	orrs	r2, r1
 800432e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004330:	4b9e      	ldr	r3, [pc, #632]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004332:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004334:	2380      	movs	r3, #128	@ 0x80
 8004336:	055b      	lsls	r3, r3, #21
 8004338:	4013      	ands	r3, r2
 800433a:	60bb      	str	r3, [r7, #8]
 800433c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800433e:	183b      	adds	r3, r7, r0
 8004340:	2201      	movs	r2, #1
 8004342:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004344:	4b9a      	ldr	r3, [pc, #616]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	4b99      	ldr	r3, [pc, #612]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800434a:	2180      	movs	r1, #128	@ 0x80
 800434c:	0049      	lsls	r1, r1, #1
 800434e:	430a      	orrs	r2, r1
 8004350:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004352:	f7fd fd97 	bl	8001e84 <HAL_GetTick>
 8004356:	0003      	movs	r3, r0
 8004358:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800435a:	e00b      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800435c:	f7fd fd92 	bl	8001e84 <HAL_GetTick>
 8004360:	0002      	movs	r2, r0
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b02      	cmp	r3, #2
 8004368:	d904      	bls.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800436a:	2313      	movs	r3, #19
 800436c:	18fb      	adds	r3, r7, r3
 800436e:	2203      	movs	r2, #3
 8004370:	701a      	strb	r2, [r3, #0]
        break;
 8004372:	e005      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004374:	4b8e      	ldr	r3, [pc, #568]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	2380      	movs	r3, #128	@ 0x80
 800437a:	005b      	lsls	r3, r3, #1
 800437c:	4013      	ands	r3, r2
 800437e:	d0ed      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004380:	2313      	movs	r3, #19
 8004382:	18fb      	adds	r3, r7, r3
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d154      	bne.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800438a:	4b88      	ldr	r3, [pc, #544]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800438c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800438e:	23c0      	movs	r3, #192	@ 0xc0
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	4013      	ands	r3, r2
 8004394:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d019      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a0:	697a      	ldr	r2, [r7, #20]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d014      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80043a6:	4b81      	ldr	r3, [pc, #516]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043aa:	4a82      	ldr	r2, [pc, #520]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80043ac:	4013      	ands	r3, r2
 80043ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043b0:	4b7e      	ldr	r3, [pc, #504]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043b2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80043b4:	4b7d      	ldr	r3, [pc, #500]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043b6:	2180      	movs	r1, #128	@ 0x80
 80043b8:	0249      	lsls	r1, r1, #9
 80043ba:	430a      	orrs	r2, r1
 80043bc:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043be:	4b7b      	ldr	r3, [pc, #492]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80043c2:	4b7a      	ldr	r3, [pc, #488]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043c4:	497c      	ldr	r1, [pc, #496]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80043c6:	400a      	ands	r2, r1
 80043c8:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80043ca:	4b78      	ldr	r3, [pc, #480]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	2201      	movs	r2, #1
 80043d4:	4013      	ands	r3, r2
 80043d6:	d016      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d8:	f7fd fd54 	bl	8001e84 <HAL_GetTick>
 80043dc:	0003      	movs	r3, r0
 80043de:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043e0:	e00c      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043e2:	f7fd fd4f 	bl	8001e84 <HAL_GetTick>
 80043e6:	0002      	movs	r2, r0
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	4a73      	ldr	r2, [pc, #460]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d904      	bls.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80043f2:	2313      	movs	r3, #19
 80043f4:	18fb      	adds	r3, r7, r3
 80043f6:	2203      	movs	r2, #3
 80043f8:	701a      	strb	r2, [r3, #0]
            break;
 80043fa:	e004      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043fc:	4b6b      	ldr	r3, [pc, #428]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004400:	2202      	movs	r2, #2
 8004402:	4013      	ands	r3, r2
 8004404:	d0ed      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004406:	2313      	movs	r3, #19
 8004408:	18fb      	adds	r3, r7, r3
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10a      	bne.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004410:	4b66      	ldr	r3, [pc, #408]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004412:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004414:	4a67      	ldr	r2, [pc, #412]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004416:	4013      	ands	r3, r2
 8004418:	0019      	movs	r1, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800441e:	4b63      	ldr	r3, [pc, #396]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004420:	430a      	orrs	r2, r1
 8004422:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004424:	e00c      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004426:	2312      	movs	r3, #18
 8004428:	18fb      	adds	r3, r7, r3
 800442a:	2213      	movs	r2, #19
 800442c:	18ba      	adds	r2, r7, r2
 800442e:	7812      	ldrb	r2, [r2, #0]
 8004430:	701a      	strb	r2, [r3, #0]
 8004432:	e005      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004434:	2312      	movs	r3, #18
 8004436:	18fb      	adds	r3, r7, r3
 8004438:	2213      	movs	r2, #19
 800443a:	18ba      	adds	r2, r7, r2
 800443c:	7812      	ldrb	r2, [r2, #0]
 800443e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004440:	2311      	movs	r3, #17
 8004442:	18fb      	adds	r3, r7, r3
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d105      	bne.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800444a:	4b58      	ldr	r3, [pc, #352]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800444c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800444e:	4b57      	ldr	r3, [pc, #348]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004450:	495b      	ldr	r1, [pc, #364]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004452:	400a      	ands	r2, r1
 8004454:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2201      	movs	r2, #1
 800445c:	4013      	ands	r3, r2
 800445e:	d009      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004460:	4b52      	ldr	r3, [pc, #328]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004462:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004464:	2203      	movs	r2, #3
 8004466:	4393      	bics	r3, r2
 8004468:	0019      	movs	r1, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685a      	ldr	r2, [r3, #4]
 800446e:	4b4f      	ldr	r3, [pc, #316]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004470:	430a      	orrs	r2, r1
 8004472:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2210      	movs	r2, #16
 800447a:	4013      	ands	r3, r2
 800447c:	d009      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800447e:	4b4b      	ldr	r3, [pc, #300]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004480:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004482:	4a50      	ldr	r2, [pc, #320]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8004484:	4013      	ands	r3, r2
 8004486:	0019      	movs	r1, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689a      	ldr	r2, [r3, #8]
 800448c:	4b47      	ldr	r3, [pc, #284]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800448e:	430a      	orrs	r2, r1
 8004490:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	2380      	movs	r3, #128	@ 0x80
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	4013      	ands	r3, r2
 800449c:	d009      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800449e:	4b43      	ldr	r3, [pc, #268]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044a2:	4a49      	ldr	r2, [pc, #292]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80044a4:	4013      	ands	r3, r2
 80044a6:	0019      	movs	r1, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	695a      	ldr	r2, [r3, #20]
 80044ac:	4b3f      	ldr	r3, [pc, #252]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044ae:	430a      	orrs	r2, r1
 80044b0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	2380      	movs	r3, #128	@ 0x80
 80044b8:	00db      	lsls	r3, r3, #3
 80044ba:	4013      	ands	r3, r2
 80044bc:	d009      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044be:	4b3b      	ldr	r3, [pc, #236]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044c2:	4a42      	ldr	r2, [pc, #264]	@ (80045cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80044c4:	4013      	ands	r3, r2
 80044c6:	0019      	movs	r1, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	699a      	ldr	r2, [r3, #24]
 80044cc:	4b37      	ldr	r3, [pc, #220]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044ce:	430a      	orrs	r2, r1
 80044d0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2220      	movs	r2, #32
 80044d8:	4013      	ands	r3, r2
 80044da:	d009      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044dc:	4b33      	ldr	r3, [pc, #204]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044e0:	4a3b      	ldr	r2, [pc, #236]	@ (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80044e2:	4013      	ands	r3, r2
 80044e4:	0019      	movs	r1, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68da      	ldr	r2, [r3, #12]
 80044ea:	4b30      	ldr	r3, [pc, #192]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044ec:	430a      	orrs	r2, r1
 80044ee:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	2380      	movs	r3, #128	@ 0x80
 80044f6:	01db      	lsls	r3, r3, #7
 80044f8:	4013      	ands	r3, r2
 80044fa:	d015      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044fc:	4b2b      	ldr	r3, [pc, #172]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	0899      	lsrs	r1, r3, #2
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	69da      	ldr	r2, [r3, #28]
 8004508:	4b28      	ldr	r3, [pc, #160]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800450a:	430a      	orrs	r2, r1
 800450c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	69da      	ldr	r2, [r3, #28]
 8004512:	2380      	movs	r3, #128	@ 0x80
 8004514:	05db      	lsls	r3, r3, #23
 8004516:	429a      	cmp	r2, r3
 8004518:	d106      	bne.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800451a:	4b24      	ldr	r3, [pc, #144]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800451c:	68da      	ldr	r2, [r3, #12]
 800451e:	4b23      	ldr	r3, [pc, #140]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004520:	2180      	movs	r1, #128	@ 0x80
 8004522:	0249      	lsls	r1, r1, #9
 8004524:	430a      	orrs	r2, r1
 8004526:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	2380      	movs	r3, #128	@ 0x80
 800452e:	039b      	lsls	r3, r3, #14
 8004530:	4013      	ands	r3, r2
 8004532:	d016      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004534:	4b1d      	ldr	r3, [pc, #116]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004536:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004538:	4a26      	ldr	r2, [pc, #152]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800453a:	4013      	ands	r3, r2
 800453c:	0019      	movs	r1, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a1a      	ldr	r2, [r3, #32]
 8004542:	4b1a      	ldr	r3, [pc, #104]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004544:	430a      	orrs	r2, r1
 8004546:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a1a      	ldr	r2, [r3, #32]
 800454c:	2380      	movs	r3, #128	@ 0x80
 800454e:	03db      	lsls	r3, r3, #15
 8004550:	429a      	cmp	r2, r3
 8004552:	d106      	bne.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004554:	4b15      	ldr	r3, [pc, #84]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004556:	68da      	ldr	r2, [r3, #12]
 8004558:	4b14      	ldr	r3, [pc, #80]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800455a:	2180      	movs	r1, #128	@ 0x80
 800455c:	0449      	lsls	r1, r1, #17
 800455e:	430a      	orrs	r2, r1
 8004560:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	2380      	movs	r3, #128	@ 0x80
 8004568:	011b      	lsls	r3, r3, #4
 800456a:	4013      	ands	r3, r2
 800456c:	d016      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800456e:	4b0f      	ldr	r3, [pc, #60]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004570:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004572:	4a19      	ldr	r2, [pc, #100]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004574:	4013      	ands	r3, r2
 8004576:	0019      	movs	r1, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	691a      	ldr	r2, [r3, #16]
 800457c:	4b0b      	ldr	r3, [pc, #44]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800457e:	430a      	orrs	r2, r1
 8004580:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	691a      	ldr	r2, [r3, #16]
 8004586:	2380      	movs	r3, #128	@ 0x80
 8004588:	01db      	lsls	r3, r3, #7
 800458a:	429a      	cmp	r2, r3
 800458c:	d106      	bne.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800458e:	4b07      	ldr	r3, [pc, #28]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004590:	68da      	ldr	r2, [r3, #12]
 8004592:	4b06      	ldr	r3, [pc, #24]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004594:	2180      	movs	r1, #128	@ 0x80
 8004596:	0249      	lsls	r1, r1, #9
 8004598:	430a      	orrs	r2, r1
 800459a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800459c:	2312      	movs	r3, #18
 800459e:	18fb      	adds	r3, r7, r3
 80045a0:	781b      	ldrb	r3, [r3, #0]
}
 80045a2:	0018      	movs	r0, r3
 80045a4:	46bd      	mov	sp, r7
 80045a6:	b006      	add	sp, #24
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	46c0      	nop			@ (mov r8, r8)
 80045ac:	40021000 	.word	0x40021000
 80045b0:	40007000 	.word	0x40007000
 80045b4:	fffffcff 	.word	0xfffffcff
 80045b8:	fffeffff 	.word	0xfffeffff
 80045bc:	00001388 	.word	0x00001388
 80045c0:	efffffff 	.word	0xefffffff
 80045c4:	fffff3ff 	.word	0xfffff3ff
 80045c8:	fff3ffff 	.word	0xfff3ffff
 80045cc:	ffcfffff 	.word	0xffcfffff
 80045d0:	ffffcfff 	.word	0xffffcfff
 80045d4:	ffbfffff 	.word	0xffbfffff
 80045d8:	ffff3fff 	.word	0xffff3fff

080045dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d101      	bne.n	80045ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e04a      	b.n	8004684 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	223d      	movs	r2, #61	@ 0x3d
 80045f2:	5c9b      	ldrb	r3, [r3, r2]
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d107      	bne.n	800460a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	223c      	movs	r2, #60	@ 0x3c
 80045fe:	2100      	movs	r1, #0
 8004600:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	0018      	movs	r0, r3
 8004606:	f7fd f9df 	bl	80019c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	223d      	movs	r2, #61	@ 0x3d
 800460e:	2102      	movs	r1, #2
 8004610:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	3304      	adds	r3, #4
 800461a:	0019      	movs	r1, r3
 800461c:	0010      	movs	r0, r2
 800461e:	f000 fce7 	bl	8004ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2248      	movs	r2, #72	@ 0x48
 8004626:	2101      	movs	r1, #1
 8004628:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	223e      	movs	r2, #62	@ 0x3e
 800462e:	2101      	movs	r1, #1
 8004630:	5499      	strb	r1, [r3, r2]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	223f      	movs	r2, #63	@ 0x3f
 8004636:	2101      	movs	r1, #1
 8004638:	5499      	strb	r1, [r3, r2]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2240      	movs	r2, #64	@ 0x40
 800463e:	2101      	movs	r1, #1
 8004640:	5499      	strb	r1, [r3, r2]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2241      	movs	r2, #65	@ 0x41
 8004646:	2101      	movs	r1, #1
 8004648:	5499      	strb	r1, [r3, r2]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2242      	movs	r2, #66	@ 0x42
 800464e:	2101      	movs	r1, #1
 8004650:	5499      	strb	r1, [r3, r2]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2243      	movs	r2, #67	@ 0x43
 8004656:	2101      	movs	r1, #1
 8004658:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2244      	movs	r2, #68	@ 0x44
 800465e:	2101      	movs	r1, #1
 8004660:	5499      	strb	r1, [r3, r2]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2245      	movs	r2, #69	@ 0x45
 8004666:	2101      	movs	r1, #1
 8004668:	5499      	strb	r1, [r3, r2]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2246      	movs	r2, #70	@ 0x46
 800466e:	2101      	movs	r1, #1
 8004670:	5499      	strb	r1, [r3, r2]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2247      	movs	r2, #71	@ 0x47
 8004676:	2101      	movs	r1, #1
 8004678:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	223d      	movs	r2, #61	@ 0x3d
 800467e:	2101      	movs	r1, #1
 8004680:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004682:	2300      	movs	r3, #0
}
 8004684:	0018      	movs	r0, r3
 8004686:	46bd      	mov	sp, r7
 8004688:	b002      	add	sp, #8
 800468a:	bd80      	pop	{r7, pc}

0800468c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d101      	bne.n	800469e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e04a      	b.n	8004734 <HAL_TIM_OC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	223d      	movs	r2, #61	@ 0x3d
 80046a2:	5c9b      	ldrb	r3, [r3, r2]
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d107      	bne.n	80046ba <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	223c      	movs	r2, #60	@ 0x3c
 80046ae:	2100      	movs	r1, #0
 80046b0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	0018      	movs	r0, r3
 80046b6:	f000 f841 	bl	800473c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	223d      	movs	r2, #61	@ 0x3d
 80046be:	2102      	movs	r1, #2
 80046c0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	3304      	adds	r3, #4
 80046ca:	0019      	movs	r1, r3
 80046cc:	0010      	movs	r0, r2
 80046ce:	f000 fc8f 	bl	8004ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2248      	movs	r2, #72	@ 0x48
 80046d6:	2101      	movs	r1, #1
 80046d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	223e      	movs	r2, #62	@ 0x3e
 80046de:	2101      	movs	r1, #1
 80046e0:	5499      	strb	r1, [r3, r2]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	223f      	movs	r2, #63	@ 0x3f
 80046e6:	2101      	movs	r1, #1
 80046e8:	5499      	strb	r1, [r3, r2]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2240      	movs	r2, #64	@ 0x40
 80046ee:	2101      	movs	r1, #1
 80046f0:	5499      	strb	r1, [r3, r2]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2241      	movs	r2, #65	@ 0x41
 80046f6:	2101      	movs	r1, #1
 80046f8:	5499      	strb	r1, [r3, r2]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2242      	movs	r2, #66	@ 0x42
 80046fe:	2101      	movs	r1, #1
 8004700:	5499      	strb	r1, [r3, r2]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2243      	movs	r2, #67	@ 0x43
 8004706:	2101      	movs	r1, #1
 8004708:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2244      	movs	r2, #68	@ 0x44
 800470e:	2101      	movs	r1, #1
 8004710:	5499      	strb	r1, [r3, r2]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2245      	movs	r2, #69	@ 0x45
 8004716:	2101      	movs	r1, #1
 8004718:	5499      	strb	r1, [r3, r2]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2246      	movs	r2, #70	@ 0x46
 800471e:	2101      	movs	r1, #1
 8004720:	5499      	strb	r1, [r3, r2]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2247      	movs	r2, #71	@ 0x47
 8004726:	2101      	movs	r1, #1
 8004728:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	223d      	movs	r2, #61	@ 0x3d
 800472e:	2101      	movs	r1, #1
 8004730:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	0018      	movs	r0, r3
 8004736:	46bd      	mov	sp, r7
 8004738:	b002      	add	sp, #8
 800473a:	bd80      	pop	{r7, pc}

0800473c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004744:	46c0      	nop			@ (mov r8, r8)
 8004746:	46bd      	mov	sp, r7
 8004748:	b002      	add	sp, #8
 800474a:	bd80      	pop	{r7, pc}

0800474c <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d108      	bne.n	800476e <HAL_TIM_OC_Start+0x22>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	223e      	movs	r2, #62	@ 0x3e
 8004760:	5c9b      	ldrb	r3, [r3, r2]
 8004762:	b2db      	uxtb	r3, r3
 8004764:	3b01      	subs	r3, #1
 8004766:	1e5a      	subs	r2, r3, #1
 8004768:	4193      	sbcs	r3, r2
 800476a:	b2db      	uxtb	r3, r3
 800476c:	e037      	b.n	80047de <HAL_TIM_OC_Start+0x92>
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	2b04      	cmp	r3, #4
 8004772:	d108      	bne.n	8004786 <HAL_TIM_OC_Start+0x3a>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	223f      	movs	r2, #63	@ 0x3f
 8004778:	5c9b      	ldrb	r3, [r3, r2]
 800477a:	b2db      	uxtb	r3, r3
 800477c:	3b01      	subs	r3, #1
 800477e:	1e5a      	subs	r2, r3, #1
 8004780:	4193      	sbcs	r3, r2
 8004782:	b2db      	uxtb	r3, r3
 8004784:	e02b      	b.n	80047de <HAL_TIM_OC_Start+0x92>
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	2b08      	cmp	r3, #8
 800478a:	d108      	bne.n	800479e <HAL_TIM_OC_Start+0x52>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2240      	movs	r2, #64	@ 0x40
 8004790:	5c9b      	ldrb	r3, [r3, r2]
 8004792:	b2db      	uxtb	r3, r3
 8004794:	3b01      	subs	r3, #1
 8004796:	1e5a      	subs	r2, r3, #1
 8004798:	4193      	sbcs	r3, r2
 800479a:	b2db      	uxtb	r3, r3
 800479c:	e01f      	b.n	80047de <HAL_TIM_OC_Start+0x92>
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	2b0c      	cmp	r3, #12
 80047a2:	d108      	bne.n	80047b6 <HAL_TIM_OC_Start+0x6a>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2241      	movs	r2, #65	@ 0x41
 80047a8:	5c9b      	ldrb	r3, [r3, r2]
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	3b01      	subs	r3, #1
 80047ae:	1e5a      	subs	r2, r3, #1
 80047b0:	4193      	sbcs	r3, r2
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	e013      	b.n	80047de <HAL_TIM_OC_Start+0x92>
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	2b10      	cmp	r3, #16
 80047ba:	d108      	bne.n	80047ce <HAL_TIM_OC_Start+0x82>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2242      	movs	r2, #66	@ 0x42
 80047c0:	5c9b      	ldrb	r3, [r3, r2]
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	3b01      	subs	r3, #1
 80047c6:	1e5a      	subs	r2, r3, #1
 80047c8:	4193      	sbcs	r3, r2
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	e007      	b.n	80047de <HAL_TIM_OC_Start+0x92>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2243      	movs	r2, #67	@ 0x43
 80047d2:	5c9b      	ldrb	r3, [r3, r2]
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	3b01      	subs	r3, #1
 80047d8:	1e5a      	subs	r2, r3, #1
 80047da:	4193      	sbcs	r3, r2
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <HAL_TIM_OC_Start+0x9a>
  {
    return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e081      	b.n	80048ea <HAL_TIM_OC_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d104      	bne.n	80047f6 <HAL_TIM_OC_Start+0xaa>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	223e      	movs	r2, #62	@ 0x3e
 80047f0:	2102      	movs	r1, #2
 80047f2:	5499      	strb	r1, [r3, r2]
 80047f4:	e023      	b.n	800483e <HAL_TIM_OC_Start+0xf2>
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	2b04      	cmp	r3, #4
 80047fa:	d104      	bne.n	8004806 <HAL_TIM_OC_Start+0xba>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	223f      	movs	r2, #63	@ 0x3f
 8004800:	2102      	movs	r1, #2
 8004802:	5499      	strb	r1, [r3, r2]
 8004804:	e01b      	b.n	800483e <HAL_TIM_OC_Start+0xf2>
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	2b08      	cmp	r3, #8
 800480a:	d104      	bne.n	8004816 <HAL_TIM_OC_Start+0xca>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2240      	movs	r2, #64	@ 0x40
 8004810:	2102      	movs	r1, #2
 8004812:	5499      	strb	r1, [r3, r2]
 8004814:	e013      	b.n	800483e <HAL_TIM_OC_Start+0xf2>
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	2b0c      	cmp	r3, #12
 800481a:	d104      	bne.n	8004826 <HAL_TIM_OC_Start+0xda>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2241      	movs	r2, #65	@ 0x41
 8004820:	2102      	movs	r1, #2
 8004822:	5499      	strb	r1, [r3, r2]
 8004824:	e00b      	b.n	800483e <HAL_TIM_OC_Start+0xf2>
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	2b10      	cmp	r3, #16
 800482a:	d104      	bne.n	8004836 <HAL_TIM_OC_Start+0xea>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2242      	movs	r2, #66	@ 0x42
 8004830:	2102      	movs	r1, #2
 8004832:	5499      	strb	r1, [r3, r2]
 8004834:	e003      	b.n	800483e <HAL_TIM_OC_Start+0xf2>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2243      	movs	r2, #67	@ 0x43
 800483a:	2102      	movs	r1, #2
 800483c:	5499      	strb	r1, [r3, r2]

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	6839      	ldr	r1, [r7, #0]
 8004844:	2201      	movs	r2, #1
 8004846:	0018      	movs	r0, r3
 8004848:	f000 ff8e 	bl	8005768 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a28      	ldr	r2, [pc, #160]	@ (80048f4 <HAL_TIM_OC_Start+0x1a8>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d009      	beq.n	800486a <HAL_TIM_OC_Start+0x11e>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a27      	ldr	r2, [pc, #156]	@ (80048f8 <HAL_TIM_OC_Start+0x1ac>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d004      	beq.n	800486a <HAL_TIM_OC_Start+0x11e>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a25      	ldr	r2, [pc, #148]	@ (80048fc <HAL_TIM_OC_Start+0x1b0>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d101      	bne.n	800486e <HAL_TIM_OC_Start+0x122>
 800486a:	2301      	movs	r3, #1
 800486c:	e000      	b.n	8004870 <HAL_TIM_OC_Start+0x124>
 800486e:	2300      	movs	r3, #0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d008      	beq.n	8004886 <HAL_TIM_OC_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2180      	movs	r1, #128	@ 0x80
 8004880:	0209      	lsls	r1, r1, #8
 8004882:	430a      	orrs	r2, r1
 8004884:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a1a      	ldr	r2, [pc, #104]	@ (80048f4 <HAL_TIM_OC_Start+0x1a8>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d00a      	beq.n	80048a6 <HAL_TIM_OC_Start+0x15a>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	2380      	movs	r3, #128	@ 0x80
 8004896:	05db      	lsls	r3, r3, #23
 8004898:	429a      	cmp	r2, r3
 800489a:	d004      	beq.n	80048a6 <HAL_TIM_OC_Start+0x15a>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a17      	ldr	r2, [pc, #92]	@ (8004900 <HAL_TIM_OC_Start+0x1b4>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d116      	bne.n	80048d4 <HAL_TIM_OC_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	4a15      	ldr	r2, [pc, #84]	@ (8004904 <HAL_TIM_OC_Start+0x1b8>)
 80048ae:	4013      	ands	r3, r2
 80048b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2b06      	cmp	r3, #6
 80048b6:	d016      	beq.n	80048e6 <HAL_TIM_OC_Start+0x19a>
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	2380      	movs	r3, #128	@ 0x80
 80048bc:	025b      	lsls	r3, r3, #9
 80048be:	429a      	cmp	r2, r3
 80048c0:	d011      	beq.n	80048e6 <HAL_TIM_OC_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2101      	movs	r1, #1
 80048ce:	430a      	orrs	r2, r1
 80048d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048d2:	e008      	b.n	80048e6 <HAL_TIM_OC_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2101      	movs	r1, #1
 80048e0:	430a      	orrs	r2, r1
 80048e2:	601a      	str	r2, [r3, #0]
 80048e4:	e000      	b.n	80048e8 <HAL_TIM_OC_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048e6:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	0018      	movs	r0, r3
 80048ec:	46bd      	mov	sp, r7
 80048ee:	b004      	add	sp, #16
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	46c0      	nop			@ (mov r8, r8)
 80048f4:	40012c00 	.word	0x40012c00
 80048f8:	40014400 	.word	0x40014400
 80048fc:	40014800 	.word	0x40014800
 8004900:	40000400 	.word	0x40000400
 8004904:	00010007 	.word	0x00010007

08004908 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e04a      	b.n	80049b0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	223d      	movs	r2, #61	@ 0x3d
 800491e:	5c9b      	ldrb	r3, [r3, r2]
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b00      	cmp	r3, #0
 8004924:	d107      	bne.n	8004936 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	223c      	movs	r2, #60	@ 0x3c
 800492a:	2100      	movs	r1, #0
 800492c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	0018      	movs	r0, r3
 8004932:	f000 f841 	bl	80049b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	223d      	movs	r2, #61	@ 0x3d
 800493a:	2102      	movs	r1, #2
 800493c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	3304      	adds	r3, #4
 8004946:	0019      	movs	r1, r3
 8004948:	0010      	movs	r0, r2
 800494a:	f000 fb51 	bl	8004ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2248      	movs	r2, #72	@ 0x48
 8004952:	2101      	movs	r1, #1
 8004954:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	223e      	movs	r2, #62	@ 0x3e
 800495a:	2101      	movs	r1, #1
 800495c:	5499      	strb	r1, [r3, r2]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	223f      	movs	r2, #63	@ 0x3f
 8004962:	2101      	movs	r1, #1
 8004964:	5499      	strb	r1, [r3, r2]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2240      	movs	r2, #64	@ 0x40
 800496a:	2101      	movs	r1, #1
 800496c:	5499      	strb	r1, [r3, r2]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2241      	movs	r2, #65	@ 0x41
 8004972:	2101      	movs	r1, #1
 8004974:	5499      	strb	r1, [r3, r2]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2242      	movs	r2, #66	@ 0x42
 800497a:	2101      	movs	r1, #1
 800497c:	5499      	strb	r1, [r3, r2]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2243      	movs	r2, #67	@ 0x43
 8004982:	2101      	movs	r1, #1
 8004984:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2244      	movs	r2, #68	@ 0x44
 800498a:	2101      	movs	r1, #1
 800498c:	5499      	strb	r1, [r3, r2]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2245      	movs	r2, #69	@ 0x45
 8004992:	2101      	movs	r1, #1
 8004994:	5499      	strb	r1, [r3, r2]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2246      	movs	r2, #70	@ 0x46
 800499a:	2101      	movs	r1, #1
 800499c:	5499      	strb	r1, [r3, r2]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2247      	movs	r2, #71	@ 0x47
 80049a2:	2101      	movs	r1, #1
 80049a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	223d      	movs	r2, #61	@ 0x3d
 80049aa:	2101      	movs	r1, #1
 80049ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	0018      	movs	r0, r3
 80049b2:	46bd      	mov	sp, r7
 80049b4:	b002      	add	sp, #8
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80049c0:	46c0      	nop			@ (mov r8, r8)
 80049c2:	46bd      	mov	sp, r7
 80049c4:	b002      	add	sp, #8
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d108      	bne.n	80049ea <HAL_TIM_PWM_Start+0x22>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	223e      	movs	r2, #62	@ 0x3e
 80049dc:	5c9b      	ldrb	r3, [r3, r2]
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	3b01      	subs	r3, #1
 80049e2:	1e5a      	subs	r2, r3, #1
 80049e4:	4193      	sbcs	r3, r2
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	e037      	b.n	8004a5a <HAL_TIM_PWM_Start+0x92>
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	2b04      	cmp	r3, #4
 80049ee:	d108      	bne.n	8004a02 <HAL_TIM_PWM_Start+0x3a>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	223f      	movs	r2, #63	@ 0x3f
 80049f4:	5c9b      	ldrb	r3, [r3, r2]
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	3b01      	subs	r3, #1
 80049fa:	1e5a      	subs	r2, r3, #1
 80049fc:	4193      	sbcs	r3, r2
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	e02b      	b.n	8004a5a <HAL_TIM_PWM_Start+0x92>
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	2b08      	cmp	r3, #8
 8004a06:	d108      	bne.n	8004a1a <HAL_TIM_PWM_Start+0x52>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2240      	movs	r2, #64	@ 0x40
 8004a0c:	5c9b      	ldrb	r3, [r3, r2]
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	3b01      	subs	r3, #1
 8004a12:	1e5a      	subs	r2, r3, #1
 8004a14:	4193      	sbcs	r3, r2
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	e01f      	b.n	8004a5a <HAL_TIM_PWM_Start+0x92>
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	2b0c      	cmp	r3, #12
 8004a1e:	d108      	bne.n	8004a32 <HAL_TIM_PWM_Start+0x6a>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2241      	movs	r2, #65	@ 0x41
 8004a24:	5c9b      	ldrb	r3, [r3, r2]
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	3b01      	subs	r3, #1
 8004a2a:	1e5a      	subs	r2, r3, #1
 8004a2c:	4193      	sbcs	r3, r2
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	e013      	b.n	8004a5a <HAL_TIM_PWM_Start+0x92>
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	2b10      	cmp	r3, #16
 8004a36:	d108      	bne.n	8004a4a <HAL_TIM_PWM_Start+0x82>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2242      	movs	r2, #66	@ 0x42
 8004a3c:	5c9b      	ldrb	r3, [r3, r2]
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	3b01      	subs	r3, #1
 8004a42:	1e5a      	subs	r2, r3, #1
 8004a44:	4193      	sbcs	r3, r2
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	e007      	b.n	8004a5a <HAL_TIM_PWM_Start+0x92>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2243      	movs	r2, #67	@ 0x43
 8004a4e:	5c9b      	ldrb	r3, [r3, r2]
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	3b01      	subs	r3, #1
 8004a54:	1e5a      	subs	r2, r3, #1
 8004a56:	4193      	sbcs	r3, r2
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d001      	beq.n	8004a62 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e081      	b.n	8004b66 <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d104      	bne.n	8004a72 <HAL_TIM_PWM_Start+0xaa>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	223e      	movs	r2, #62	@ 0x3e
 8004a6c:	2102      	movs	r1, #2
 8004a6e:	5499      	strb	r1, [r3, r2]
 8004a70:	e023      	b.n	8004aba <HAL_TIM_PWM_Start+0xf2>
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	2b04      	cmp	r3, #4
 8004a76:	d104      	bne.n	8004a82 <HAL_TIM_PWM_Start+0xba>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	223f      	movs	r2, #63	@ 0x3f
 8004a7c:	2102      	movs	r1, #2
 8004a7e:	5499      	strb	r1, [r3, r2]
 8004a80:	e01b      	b.n	8004aba <HAL_TIM_PWM_Start+0xf2>
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	2b08      	cmp	r3, #8
 8004a86:	d104      	bne.n	8004a92 <HAL_TIM_PWM_Start+0xca>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2240      	movs	r2, #64	@ 0x40
 8004a8c:	2102      	movs	r1, #2
 8004a8e:	5499      	strb	r1, [r3, r2]
 8004a90:	e013      	b.n	8004aba <HAL_TIM_PWM_Start+0xf2>
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	2b0c      	cmp	r3, #12
 8004a96:	d104      	bne.n	8004aa2 <HAL_TIM_PWM_Start+0xda>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2241      	movs	r2, #65	@ 0x41
 8004a9c:	2102      	movs	r1, #2
 8004a9e:	5499      	strb	r1, [r3, r2]
 8004aa0:	e00b      	b.n	8004aba <HAL_TIM_PWM_Start+0xf2>
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	2b10      	cmp	r3, #16
 8004aa6:	d104      	bne.n	8004ab2 <HAL_TIM_PWM_Start+0xea>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2242      	movs	r2, #66	@ 0x42
 8004aac:	2102      	movs	r1, #2
 8004aae:	5499      	strb	r1, [r3, r2]
 8004ab0:	e003      	b.n	8004aba <HAL_TIM_PWM_Start+0xf2>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2243      	movs	r2, #67	@ 0x43
 8004ab6:	2102      	movs	r1, #2
 8004ab8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	6839      	ldr	r1, [r7, #0]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	0018      	movs	r0, r3
 8004ac4:	f000 fe50 	bl	8005768 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a28      	ldr	r2, [pc, #160]	@ (8004b70 <HAL_TIM_PWM_Start+0x1a8>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d009      	beq.n	8004ae6 <HAL_TIM_PWM_Start+0x11e>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a27      	ldr	r2, [pc, #156]	@ (8004b74 <HAL_TIM_PWM_Start+0x1ac>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d004      	beq.n	8004ae6 <HAL_TIM_PWM_Start+0x11e>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a25      	ldr	r2, [pc, #148]	@ (8004b78 <HAL_TIM_PWM_Start+0x1b0>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d101      	bne.n	8004aea <HAL_TIM_PWM_Start+0x122>
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e000      	b.n	8004aec <HAL_TIM_PWM_Start+0x124>
 8004aea:	2300      	movs	r3, #0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d008      	beq.n	8004b02 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2180      	movs	r1, #128	@ 0x80
 8004afc:	0209      	lsls	r1, r1, #8
 8004afe:	430a      	orrs	r2, r1
 8004b00:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a1a      	ldr	r2, [pc, #104]	@ (8004b70 <HAL_TIM_PWM_Start+0x1a8>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d00a      	beq.n	8004b22 <HAL_TIM_PWM_Start+0x15a>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	2380      	movs	r3, #128	@ 0x80
 8004b12:	05db      	lsls	r3, r3, #23
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d004      	beq.n	8004b22 <HAL_TIM_PWM_Start+0x15a>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a17      	ldr	r2, [pc, #92]	@ (8004b7c <HAL_TIM_PWM_Start+0x1b4>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d116      	bne.n	8004b50 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	4a15      	ldr	r2, [pc, #84]	@ (8004b80 <HAL_TIM_PWM_Start+0x1b8>)
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2b06      	cmp	r3, #6
 8004b32:	d016      	beq.n	8004b62 <HAL_TIM_PWM_Start+0x19a>
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	2380      	movs	r3, #128	@ 0x80
 8004b38:	025b      	lsls	r3, r3, #9
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d011      	beq.n	8004b62 <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2101      	movs	r1, #1
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b4e:	e008      	b.n	8004b62 <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2101      	movs	r1, #1
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	601a      	str	r2, [r3, #0]
 8004b60:	e000      	b.n	8004b64 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b62:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	0018      	movs	r0, r3
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	b004      	add	sp, #16
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	46c0      	nop			@ (mov r8, r8)
 8004b70:	40012c00 	.word	0x40012c00
 8004b74:	40014400 	.word	0x40014400
 8004b78:	40014800 	.word	0x40014800
 8004b7c:	40000400 	.word	0x40000400
 8004b80:	00010007 	.word	0x00010007

08004b84 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b086      	sub	sp, #24
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b90:	2317      	movs	r3, #23
 8004b92:	18fb      	adds	r3, r7, r3
 8004b94:	2200      	movs	r2, #0
 8004b96:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	223c      	movs	r2, #60	@ 0x3c
 8004b9c:	5c9b      	ldrb	r3, [r3, r2]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d101      	bne.n	8004ba6 <HAL_TIM_OC_ConfigChannel+0x22>
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	e048      	b.n	8004c38 <HAL_TIM_OC_ConfigChannel+0xb4>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	223c      	movs	r2, #60	@ 0x3c
 8004baa:	2101      	movs	r1, #1
 8004bac:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2b14      	cmp	r3, #20
 8004bb2:	d835      	bhi.n	8004c20 <HAL_TIM_OC_ConfigChannel+0x9c>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	009a      	lsls	r2, r3, #2
 8004bb8:	4b21      	ldr	r3, [pc, #132]	@ (8004c40 <HAL_TIM_OC_ConfigChannel+0xbc>)
 8004bba:	18d3      	adds	r3, r2, r3
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68ba      	ldr	r2, [r7, #8]
 8004bc6:	0011      	movs	r1, r2
 8004bc8:	0018      	movs	r0, r3
 8004bca:	f000 fa95 	bl	80050f8 <TIM_OC1_SetConfig>
      break;
 8004bce:	e02c      	b.n	8004c2a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68ba      	ldr	r2, [r7, #8]
 8004bd6:	0011      	movs	r1, r2
 8004bd8:	0018      	movs	r0, r3
 8004bda:	f000 fb0d 	bl	80051f8 <TIM_OC2_SetConfig>
      break;
 8004bde:	e024      	b.n	8004c2a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68ba      	ldr	r2, [r7, #8]
 8004be6:	0011      	movs	r1, r2
 8004be8:	0018      	movs	r0, r3
 8004bea:	f000 fb83 	bl	80052f4 <TIM_OC3_SetConfig>
      break;
 8004bee:	e01c      	b.n	8004c2a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68ba      	ldr	r2, [r7, #8]
 8004bf6:	0011      	movs	r1, r2
 8004bf8:	0018      	movs	r0, r3
 8004bfa:	f000 fbfd 	bl	80053f8 <TIM_OC4_SetConfig>
      break;
 8004bfe:	e014      	b.n	8004c2a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	0011      	movs	r1, r2
 8004c08:	0018      	movs	r0, r3
 8004c0a:	f000 fc59 	bl	80054c0 <TIM_OC5_SetConfig>
      break;
 8004c0e:	e00c      	b.n	8004c2a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68ba      	ldr	r2, [r7, #8]
 8004c16:	0011      	movs	r1, r2
 8004c18:	0018      	movs	r0, r3
 8004c1a:	f000 fcab 	bl	8005574 <TIM_OC6_SetConfig>
      break;
 8004c1e:	e004      	b.n	8004c2a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004c20:	2317      	movs	r3, #23
 8004c22:	18fb      	adds	r3, r7, r3
 8004c24:	2201      	movs	r2, #1
 8004c26:	701a      	strb	r2, [r3, #0]
      break;
 8004c28:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	223c      	movs	r2, #60	@ 0x3c
 8004c2e:	2100      	movs	r1, #0
 8004c30:	5499      	strb	r1, [r3, r2]

  return status;
 8004c32:	2317      	movs	r3, #23
 8004c34:	18fb      	adds	r3, r7, r3
 8004c36:	781b      	ldrb	r3, [r3, #0]
}
 8004c38:	0018      	movs	r0, r3
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	b006      	add	sp, #24
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	08006bb0 	.word	0x08006bb0

08004c44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b086      	sub	sp, #24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c50:	2317      	movs	r3, #23
 8004c52:	18fb      	adds	r3, r7, r3
 8004c54:	2200      	movs	r2, #0
 8004c56:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	223c      	movs	r2, #60	@ 0x3c
 8004c5c:	5c9b      	ldrb	r3, [r3, r2]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d101      	bne.n	8004c66 <HAL_TIM_PWM_ConfigChannel+0x22>
 8004c62:	2302      	movs	r3, #2
 8004c64:	e0e5      	b.n	8004e32 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	223c      	movs	r2, #60	@ 0x3c
 8004c6a:	2101      	movs	r1, #1
 8004c6c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2b14      	cmp	r3, #20
 8004c72:	d900      	bls.n	8004c76 <HAL_TIM_PWM_ConfigChannel+0x32>
 8004c74:	e0d1      	b.n	8004e1a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	009a      	lsls	r2, r3, #2
 8004c7a:	4b70      	ldr	r3, [pc, #448]	@ (8004e3c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8004c7c:	18d3      	adds	r3, r2, r3
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68ba      	ldr	r2, [r7, #8]
 8004c88:	0011      	movs	r1, r2
 8004c8a:	0018      	movs	r0, r3
 8004c8c:	f000 fa34 	bl	80050f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	699a      	ldr	r2, [r3, #24]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2108      	movs	r1, #8
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	699a      	ldr	r2, [r3, #24]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2104      	movs	r1, #4
 8004cac:	438a      	bics	r2, r1
 8004cae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6999      	ldr	r1, [r3, #24]
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	691a      	ldr	r2, [r3, #16]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	619a      	str	r2, [r3, #24]
      break;
 8004cc2:	e0af      	b.n	8004e24 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68ba      	ldr	r2, [r7, #8]
 8004cca:	0011      	movs	r1, r2
 8004ccc:	0018      	movs	r0, r3
 8004cce:	f000 fa93 	bl	80051f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	699a      	ldr	r2, [r3, #24]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2180      	movs	r1, #128	@ 0x80
 8004cde:	0109      	lsls	r1, r1, #4
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	699a      	ldr	r2, [r3, #24]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4954      	ldr	r1, [pc, #336]	@ (8004e40 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004cf0:	400a      	ands	r2, r1
 8004cf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6999      	ldr	r1, [r3, #24]
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	021a      	lsls	r2, r3, #8
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	430a      	orrs	r2, r1
 8004d06:	619a      	str	r2, [r3, #24]
      break;
 8004d08:	e08c      	b.n	8004e24 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68ba      	ldr	r2, [r7, #8]
 8004d10:	0011      	movs	r1, r2
 8004d12:	0018      	movs	r0, r3
 8004d14:	f000 faee 	bl	80052f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	69da      	ldr	r2, [r3, #28]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2108      	movs	r1, #8
 8004d24:	430a      	orrs	r2, r1
 8004d26:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	69da      	ldr	r2, [r3, #28]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2104      	movs	r1, #4
 8004d34:	438a      	bics	r2, r1
 8004d36:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	69d9      	ldr	r1, [r3, #28]
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	691a      	ldr	r2, [r3, #16]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	430a      	orrs	r2, r1
 8004d48:	61da      	str	r2, [r3, #28]
      break;
 8004d4a:	e06b      	b.n	8004e24 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68ba      	ldr	r2, [r7, #8]
 8004d52:	0011      	movs	r1, r2
 8004d54:	0018      	movs	r0, r3
 8004d56:	f000 fb4f 	bl	80053f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	69da      	ldr	r2, [r3, #28]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2180      	movs	r1, #128	@ 0x80
 8004d66:	0109      	lsls	r1, r1, #4
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	69da      	ldr	r2, [r3, #28]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4932      	ldr	r1, [pc, #200]	@ (8004e40 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004d78:	400a      	ands	r2, r1
 8004d7a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	69d9      	ldr	r1, [r3, #28]
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	021a      	lsls	r2, r3, #8
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	61da      	str	r2, [r3, #28]
      break;
 8004d90:	e048      	b.n	8004e24 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68ba      	ldr	r2, [r7, #8]
 8004d98:	0011      	movs	r1, r2
 8004d9a:	0018      	movs	r0, r3
 8004d9c:	f000 fb90 	bl	80054c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2108      	movs	r1, #8
 8004dac:	430a      	orrs	r2, r1
 8004dae:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2104      	movs	r1, #4
 8004dbc:	438a      	bics	r2, r1
 8004dbe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	691a      	ldr	r2, [r3, #16]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004dd2:	e027      	b.n	8004e24 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68ba      	ldr	r2, [r7, #8]
 8004dda:	0011      	movs	r1, r2
 8004ddc:	0018      	movs	r0, r3
 8004dde:	f000 fbc9 	bl	8005574 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2180      	movs	r1, #128	@ 0x80
 8004dee:	0109      	lsls	r1, r1, #4
 8004df0:	430a      	orrs	r2, r1
 8004df2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4910      	ldr	r1, [pc, #64]	@ (8004e40 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004e00:	400a      	ands	r2, r1
 8004e02:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	021a      	lsls	r2, r3, #8
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	430a      	orrs	r2, r1
 8004e16:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004e18:	e004      	b.n	8004e24 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8004e1a:	2317      	movs	r3, #23
 8004e1c:	18fb      	adds	r3, r7, r3
 8004e1e:	2201      	movs	r2, #1
 8004e20:	701a      	strb	r2, [r3, #0]
      break;
 8004e22:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	223c      	movs	r2, #60	@ 0x3c
 8004e28:	2100      	movs	r1, #0
 8004e2a:	5499      	strb	r1, [r3, r2]

  return status;
 8004e2c:	2317      	movs	r3, #23
 8004e2e:	18fb      	adds	r3, r7, r3
 8004e30:	781b      	ldrb	r3, [r3, #0]
}
 8004e32:	0018      	movs	r0, r3
 8004e34:	46bd      	mov	sp, r7
 8004e36:	b006      	add	sp, #24
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	46c0      	nop			@ (mov r8, r8)
 8004e3c:	08006c04 	.word	0x08006c04
 8004e40:	fffffbff 	.word	0xfffffbff

08004e44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e4e:	230f      	movs	r3, #15
 8004e50:	18fb      	adds	r3, r7, r3
 8004e52:	2200      	movs	r2, #0
 8004e54:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	223c      	movs	r2, #60	@ 0x3c
 8004e5a:	5c9b      	ldrb	r3, [r3, r2]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d101      	bne.n	8004e64 <HAL_TIM_ConfigClockSource+0x20>
 8004e60:	2302      	movs	r3, #2
 8004e62:	e0bc      	b.n	8004fde <HAL_TIM_ConfigClockSource+0x19a>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	223c      	movs	r2, #60	@ 0x3c
 8004e68:	2101      	movs	r1, #1
 8004e6a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	223d      	movs	r2, #61	@ 0x3d
 8004e70:	2102      	movs	r1, #2
 8004e72:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	4a5a      	ldr	r2, [pc, #360]	@ (8004fe8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004e80:	4013      	ands	r3, r2
 8004e82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	4a59      	ldr	r2, [pc, #356]	@ (8004fec <HAL_TIM_ConfigClockSource+0x1a8>)
 8004e88:	4013      	ands	r3, r2
 8004e8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68ba      	ldr	r2, [r7, #8]
 8004e92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2280      	movs	r2, #128	@ 0x80
 8004e9a:	0192      	lsls	r2, r2, #6
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d040      	beq.n	8004f22 <HAL_TIM_ConfigClockSource+0xde>
 8004ea0:	2280      	movs	r2, #128	@ 0x80
 8004ea2:	0192      	lsls	r2, r2, #6
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d900      	bls.n	8004eaa <HAL_TIM_ConfigClockSource+0x66>
 8004ea8:	e088      	b.n	8004fbc <HAL_TIM_ConfigClockSource+0x178>
 8004eaa:	2280      	movs	r2, #128	@ 0x80
 8004eac:	0152      	lsls	r2, r2, #5
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d100      	bne.n	8004eb4 <HAL_TIM_ConfigClockSource+0x70>
 8004eb2:	e088      	b.n	8004fc6 <HAL_TIM_ConfigClockSource+0x182>
 8004eb4:	2280      	movs	r2, #128	@ 0x80
 8004eb6:	0152      	lsls	r2, r2, #5
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d900      	bls.n	8004ebe <HAL_TIM_ConfigClockSource+0x7a>
 8004ebc:	e07e      	b.n	8004fbc <HAL_TIM_ConfigClockSource+0x178>
 8004ebe:	2b70      	cmp	r3, #112	@ 0x70
 8004ec0:	d018      	beq.n	8004ef4 <HAL_TIM_ConfigClockSource+0xb0>
 8004ec2:	d900      	bls.n	8004ec6 <HAL_TIM_ConfigClockSource+0x82>
 8004ec4:	e07a      	b.n	8004fbc <HAL_TIM_ConfigClockSource+0x178>
 8004ec6:	2b60      	cmp	r3, #96	@ 0x60
 8004ec8:	d04f      	beq.n	8004f6a <HAL_TIM_ConfigClockSource+0x126>
 8004eca:	d900      	bls.n	8004ece <HAL_TIM_ConfigClockSource+0x8a>
 8004ecc:	e076      	b.n	8004fbc <HAL_TIM_ConfigClockSource+0x178>
 8004ece:	2b50      	cmp	r3, #80	@ 0x50
 8004ed0:	d03b      	beq.n	8004f4a <HAL_TIM_ConfigClockSource+0x106>
 8004ed2:	d900      	bls.n	8004ed6 <HAL_TIM_ConfigClockSource+0x92>
 8004ed4:	e072      	b.n	8004fbc <HAL_TIM_ConfigClockSource+0x178>
 8004ed6:	2b40      	cmp	r3, #64	@ 0x40
 8004ed8:	d057      	beq.n	8004f8a <HAL_TIM_ConfigClockSource+0x146>
 8004eda:	d900      	bls.n	8004ede <HAL_TIM_ConfigClockSource+0x9a>
 8004edc:	e06e      	b.n	8004fbc <HAL_TIM_ConfigClockSource+0x178>
 8004ede:	2b30      	cmp	r3, #48	@ 0x30
 8004ee0:	d063      	beq.n	8004faa <HAL_TIM_ConfigClockSource+0x166>
 8004ee2:	d86b      	bhi.n	8004fbc <HAL_TIM_ConfigClockSource+0x178>
 8004ee4:	2b20      	cmp	r3, #32
 8004ee6:	d060      	beq.n	8004faa <HAL_TIM_ConfigClockSource+0x166>
 8004ee8:	d868      	bhi.n	8004fbc <HAL_TIM_ConfigClockSource+0x178>
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d05d      	beq.n	8004faa <HAL_TIM_ConfigClockSource+0x166>
 8004eee:	2b10      	cmp	r3, #16
 8004ef0:	d05b      	beq.n	8004faa <HAL_TIM_ConfigClockSource+0x166>
 8004ef2:	e063      	b.n	8004fbc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f04:	f000 fc10 	bl	8005728 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	2277      	movs	r2, #119	@ 0x77
 8004f14:	4313      	orrs	r3, r2
 8004f16:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	609a      	str	r2, [r3, #8]
      break;
 8004f20:	e052      	b.n	8004fc8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f32:	f000 fbf9 	bl	8005728 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	689a      	ldr	r2, [r3, #8]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2180      	movs	r1, #128	@ 0x80
 8004f42:	01c9      	lsls	r1, r1, #7
 8004f44:	430a      	orrs	r2, r1
 8004f46:	609a      	str	r2, [r3, #8]
      break;
 8004f48:	e03e      	b.n	8004fc8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f56:	001a      	movs	r2, r3
 8004f58:	f000 fb6a 	bl	8005630 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2150      	movs	r1, #80	@ 0x50
 8004f62:	0018      	movs	r0, r3
 8004f64:	f000 fbc4 	bl	80056f0 <TIM_ITRx_SetConfig>
      break;
 8004f68:	e02e      	b.n	8004fc8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f76:	001a      	movs	r2, r3
 8004f78:	f000 fb88 	bl	800568c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2160      	movs	r1, #96	@ 0x60
 8004f82:	0018      	movs	r0, r3
 8004f84:	f000 fbb4 	bl	80056f0 <TIM_ITRx_SetConfig>
      break;
 8004f88:	e01e      	b.n	8004fc8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f96:	001a      	movs	r2, r3
 8004f98:	f000 fb4a 	bl	8005630 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2140      	movs	r1, #64	@ 0x40
 8004fa2:	0018      	movs	r0, r3
 8004fa4:	f000 fba4 	bl	80056f0 <TIM_ITRx_SetConfig>
      break;
 8004fa8:	e00e      	b.n	8004fc8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	0019      	movs	r1, r3
 8004fb4:	0010      	movs	r0, r2
 8004fb6:	f000 fb9b 	bl	80056f0 <TIM_ITRx_SetConfig>
      break;
 8004fba:	e005      	b.n	8004fc8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004fbc:	230f      	movs	r3, #15
 8004fbe:	18fb      	adds	r3, r7, r3
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	701a      	strb	r2, [r3, #0]
      break;
 8004fc4:	e000      	b.n	8004fc8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004fc6:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	223d      	movs	r2, #61	@ 0x3d
 8004fcc:	2101      	movs	r1, #1
 8004fce:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	223c      	movs	r2, #60	@ 0x3c
 8004fd4:	2100      	movs	r1, #0
 8004fd6:	5499      	strb	r1, [r3, r2]

  return status;
 8004fd8:	230f      	movs	r3, #15
 8004fda:	18fb      	adds	r3, r7, r3
 8004fdc:	781b      	ldrb	r3, [r3, #0]
}
 8004fde:	0018      	movs	r0, r3
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	b004      	add	sp, #16
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	46c0      	nop			@ (mov r8, r8)
 8004fe8:	ffceff88 	.word	0xffceff88
 8004fec:	ffff00ff 	.word	0xffff00ff

08004ff0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a37      	ldr	r2, [pc, #220]	@ (80050e0 <TIM_Base_SetConfig+0xf0>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d008      	beq.n	800501a <TIM_Base_SetConfig+0x2a>
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	2380      	movs	r3, #128	@ 0x80
 800500c:	05db      	lsls	r3, r3, #23
 800500e:	429a      	cmp	r2, r3
 8005010:	d003      	beq.n	800501a <TIM_Base_SetConfig+0x2a>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a33      	ldr	r2, [pc, #204]	@ (80050e4 <TIM_Base_SetConfig+0xf4>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d108      	bne.n	800502c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2270      	movs	r2, #112	@ 0x70
 800501e:	4393      	bics	r3, r2
 8005020:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	4313      	orrs	r3, r2
 800502a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a2c      	ldr	r2, [pc, #176]	@ (80050e0 <TIM_Base_SetConfig+0xf0>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d014      	beq.n	800505e <TIM_Base_SetConfig+0x6e>
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	2380      	movs	r3, #128	@ 0x80
 8005038:	05db      	lsls	r3, r3, #23
 800503a:	429a      	cmp	r2, r3
 800503c:	d00f      	beq.n	800505e <TIM_Base_SetConfig+0x6e>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a28      	ldr	r2, [pc, #160]	@ (80050e4 <TIM_Base_SetConfig+0xf4>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d00b      	beq.n	800505e <TIM_Base_SetConfig+0x6e>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a27      	ldr	r2, [pc, #156]	@ (80050e8 <TIM_Base_SetConfig+0xf8>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d007      	beq.n	800505e <TIM_Base_SetConfig+0x6e>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a26      	ldr	r2, [pc, #152]	@ (80050ec <TIM_Base_SetConfig+0xfc>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d003      	beq.n	800505e <TIM_Base_SetConfig+0x6e>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a25      	ldr	r2, [pc, #148]	@ (80050f0 <TIM_Base_SetConfig+0x100>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d108      	bne.n	8005070 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	4a24      	ldr	r2, [pc, #144]	@ (80050f4 <TIM_Base_SetConfig+0x104>)
 8005062:	4013      	ands	r3, r2
 8005064:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	4313      	orrs	r3, r2
 800506e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2280      	movs	r2, #128	@ 0x80
 8005074:	4393      	bics	r3, r2
 8005076:	001a      	movs	r2, r3
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	695b      	ldr	r3, [r3, #20]
 800507c:	4313      	orrs	r3, r2
 800507e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	689a      	ldr	r2, [r3, #8]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a11      	ldr	r2, [pc, #68]	@ (80050e0 <TIM_Base_SetConfig+0xf0>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d007      	beq.n	80050ae <TIM_Base_SetConfig+0xbe>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a12      	ldr	r2, [pc, #72]	@ (80050ec <TIM_Base_SetConfig+0xfc>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d003      	beq.n	80050ae <TIM_Base_SetConfig+0xbe>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a11      	ldr	r2, [pc, #68]	@ (80050f0 <TIM_Base_SetConfig+0x100>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d103      	bne.n	80050b6 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	691a      	ldr	r2, [r3, #16]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	2201      	movs	r2, #1
 80050c2:	4013      	ands	r3, r2
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d106      	bne.n	80050d6 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	691b      	ldr	r3, [r3, #16]
 80050cc:	2201      	movs	r2, #1
 80050ce:	4393      	bics	r3, r2
 80050d0:	001a      	movs	r2, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	611a      	str	r2, [r3, #16]
  }
}
 80050d6:	46c0      	nop			@ (mov r8, r8)
 80050d8:	46bd      	mov	sp, r7
 80050da:	b004      	add	sp, #16
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	46c0      	nop			@ (mov r8, r8)
 80050e0:	40012c00 	.word	0x40012c00
 80050e4:	40000400 	.word	0x40000400
 80050e8:	40002000 	.word	0x40002000
 80050ec:	40014400 	.word	0x40014400
 80050f0:	40014800 	.word	0x40014800
 80050f4:	fffffcff 	.word	0xfffffcff

080050f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b086      	sub	sp, #24
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a1b      	ldr	r3, [r3, #32]
 8005106:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a1b      	ldr	r3, [r3, #32]
 800510c:	2201      	movs	r2, #1
 800510e:	4393      	bics	r3, r2
 8005110:	001a      	movs	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	4a2e      	ldr	r2, [pc, #184]	@ (80051e0 <TIM_OC1_SetConfig+0xe8>)
 8005126:	4013      	ands	r3, r2
 8005128:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2203      	movs	r2, #3
 800512e:	4393      	bics	r3, r2
 8005130:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	4313      	orrs	r3, r2
 800513a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	2202      	movs	r2, #2
 8005140:	4393      	bics	r3, r2
 8005142:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	697a      	ldr	r2, [r7, #20]
 800514a:	4313      	orrs	r3, r2
 800514c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a24      	ldr	r2, [pc, #144]	@ (80051e4 <TIM_OC1_SetConfig+0xec>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d007      	beq.n	8005166 <TIM_OC1_SetConfig+0x6e>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a23      	ldr	r2, [pc, #140]	@ (80051e8 <TIM_OC1_SetConfig+0xf0>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d003      	beq.n	8005166 <TIM_OC1_SetConfig+0x6e>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a22      	ldr	r2, [pc, #136]	@ (80051ec <TIM_OC1_SetConfig+0xf4>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d10c      	bne.n	8005180 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	2208      	movs	r2, #8
 800516a:	4393      	bics	r3, r2
 800516c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	4313      	orrs	r3, r2
 8005176:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	2204      	movs	r2, #4
 800517c:	4393      	bics	r3, r2
 800517e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a18      	ldr	r2, [pc, #96]	@ (80051e4 <TIM_OC1_SetConfig+0xec>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d007      	beq.n	8005198 <TIM_OC1_SetConfig+0xa0>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a17      	ldr	r2, [pc, #92]	@ (80051e8 <TIM_OC1_SetConfig+0xf0>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d003      	beq.n	8005198 <TIM_OC1_SetConfig+0xa0>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a16      	ldr	r2, [pc, #88]	@ (80051ec <TIM_OC1_SetConfig+0xf4>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d111      	bne.n	80051bc <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	4a15      	ldr	r2, [pc, #84]	@ (80051f0 <TIM_OC1_SetConfig+0xf8>)
 800519c:	4013      	ands	r3, r2
 800519e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	4a14      	ldr	r2, [pc, #80]	@ (80051f4 <TIM_OC1_SetConfig+0xfc>)
 80051a4:	4013      	ands	r3, r2
 80051a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	695b      	ldr	r3, [r3, #20]
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	693a      	ldr	r2, [r7, #16]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	621a      	str	r2, [r3, #32]
}
 80051d6:	46c0      	nop			@ (mov r8, r8)
 80051d8:	46bd      	mov	sp, r7
 80051da:	b006      	add	sp, #24
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	46c0      	nop			@ (mov r8, r8)
 80051e0:	fffeff8f 	.word	0xfffeff8f
 80051e4:	40012c00 	.word	0x40012c00
 80051e8:	40014400 	.word	0x40014400
 80051ec:	40014800 	.word	0x40014800
 80051f0:	fffffeff 	.word	0xfffffeff
 80051f4:	fffffdff 	.word	0xfffffdff

080051f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b086      	sub	sp, #24
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a1b      	ldr	r3, [r3, #32]
 800520c:	2210      	movs	r2, #16
 800520e:	4393      	bics	r3, r2
 8005210:	001a      	movs	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	4a2c      	ldr	r2, [pc, #176]	@ (80052d8 <TIM_OC2_SetConfig+0xe0>)
 8005226:	4013      	ands	r3, r2
 8005228:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	4a2b      	ldr	r2, [pc, #172]	@ (80052dc <TIM_OC2_SetConfig+0xe4>)
 800522e:	4013      	ands	r3, r2
 8005230:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	021b      	lsls	r3, r3, #8
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	4313      	orrs	r3, r2
 800523c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	2220      	movs	r2, #32
 8005242:	4393      	bics	r3, r2
 8005244:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	011b      	lsls	r3, r3, #4
 800524c:	697a      	ldr	r2, [r7, #20]
 800524e:	4313      	orrs	r3, r2
 8005250:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a22      	ldr	r2, [pc, #136]	@ (80052e0 <TIM_OC2_SetConfig+0xe8>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d10d      	bne.n	8005276 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	2280      	movs	r2, #128	@ 0x80
 800525e:	4393      	bics	r3, r2
 8005260:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	011b      	lsls	r3, r3, #4
 8005268:	697a      	ldr	r2, [r7, #20]
 800526a:	4313      	orrs	r3, r2
 800526c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	2240      	movs	r2, #64	@ 0x40
 8005272:	4393      	bics	r3, r2
 8005274:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a19      	ldr	r2, [pc, #100]	@ (80052e0 <TIM_OC2_SetConfig+0xe8>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d007      	beq.n	800528e <TIM_OC2_SetConfig+0x96>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a18      	ldr	r2, [pc, #96]	@ (80052e4 <TIM_OC2_SetConfig+0xec>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d003      	beq.n	800528e <TIM_OC2_SetConfig+0x96>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a17      	ldr	r2, [pc, #92]	@ (80052e8 <TIM_OC2_SetConfig+0xf0>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d113      	bne.n	80052b6 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	4a16      	ldr	r2, [pc, #88]	@ (80052ec <TIM_OC2_SetConfig+0xf4>)
 8005292:	4013      	ands	r3, r2
 8005294:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	4a15      	ldr	r2, [pc, #84]	@ (80052f0 <TIM_OC2_SetConfig+0xf8>)
 800529a:	4013      	ands	r3, r2
 800529c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	693a      	ldr	r2, [r7, #16]
 80052ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	685a      	ldr	r2, [r3, #4]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	621a      	str	r2, [r3, #32]
}
 80052d0:	46c0      	nop			@ (mov r8, r8)
 80052d2:	46bd      	mov	sp, r7
 80052d4:	b006      	add	sp, #24
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	feff8fff 	.word	0xfeff8fff
 80052dc:	fffffcff 	.word	0xfffffcff
 80052e0:	40012c00 	.word	0x40012c00
 80052e4:	40014400 	.word	0x40014400
 80052e8:	40014800 	.word	0x40014800
 80052ec:	fffffbff 	.word	0xfffffbff
 80052f0:	fffff7ff 	.word	0xfffff7ff

080052f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b086      	sub	sp, #24
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a1b      	ldr	r3, [r3, #32]
 8005302:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a1b      	ldr	r3, [r3, #32]
 8005308:	4a31      	ldr	r2, [pc, #196]	@ (80053d0 <TIM_OC3_SetConfig+0xdc>)
 800530a:	401a      	ands	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	69db      	ldr	r3, [r3, #28]
 800531a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	4a2d      	ldr	r2, [pc, #180]	@ (80053d4 <TIM_OC3_SetConfig+0xe0>)
 8005320:	4013      	ands	r3, r2
 8005322:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2203      	movs	r2, #3
 8005328:	4393      	bics	r3, r2
 800532a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	4313      	orrs	r3, r2
 8005334:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	4a27      	ldr	r2, [pc, #156]	@ (80053d8 <TIM_OC3_SetConfig+0xe4>)
 800533a:	4013      	ands	r3, r2
 800533c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	021b      	lsls	r3, r3, #8
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	4313      	orrs	r3, r2
 8005348:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a23      	ldr	r2, [pc, #140]	@ (80053dc <TIM_OC3_SetConfig+0xe8>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d10d      	bne.n	800536e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	4a22      	ldr	r2, [pc, #136]	@ (80053e0 <TIM_OC3_SetConfig+0xec>)
 8005356:	4013      	ands	r3, r2
 8005358:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	021b      	lsls	r3, r3, #8
 8005360:	697a      	ldr	r2, [r7, #20]
 8005362:	4313      	orrs	r3, r2
 8005364:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	4a1e      	ldr	r2, [pc, #120]	@ (80053e4 <TIM_OC3_SetConfig+0xf0>)
 800536a:	4013      	ands	r3, r2
 800536c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a1a      	ldr	r2, [pc, #104]	@ (80053dc <TIM_OC3_SetConfig+0xe8>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d007      	beq.n	8005386 <TIM_OC3_SetConfig+0x92>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a1b      	ldr	r2, [pc, #108]	@ (80053e8 <TIM_OC3_SetConfig+0xf4>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d003      	beq.n	8005386 <TIM_OC3_SetConfig+0x92>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a1a      	ldr	r2, [pc, #104]	@ (80053ec <TIM_OC3_SetConfig+0xf8>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d113      	bne.n	80053ae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	4a19      	ldr	r2, [pc, #100]	@ (80053f0 <TIM_OC3_SetConfig+0xfc>)
 800538a:	4013      	ands	r3, r2
 800538c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	4a18      	ldr	r2, [pc, #96]	@ (80053f4 <TIM_OC3_SetConfig+0x100>)
 8005392:	4013      	ands	r3, r2
 8005394:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	011b      	lsls	r3, r3, #4
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	4313      	orrs	r3, r2
 80053a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	011b      	lsls	r3, r3, #4
 80053a8:	693a      	ldr	r2, [r7, #16]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	693a      	ldr	r2, [r7, #16]
 80053b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	685a      	ldr	r2, [r3, #4]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	697a      	ldr	r2, [r7, #20]
 80053c6:	621a      	str	r2, [r3, #32]
}
 80053c8:	46c0      	nop			@ (mov r8, r8)
 80053ca:	46bd      	mov	sp, r7
 80053cc:	b006      	add	sp, #24
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	fffffeff 	.word	0xfffffeff
 80053d4:	fffeff8f 	.word	0xfffeff8f
 80053d8:	fffffdff 	.word	0xfffffdff
 80053dc:	40012c00 	.word	0x40012c00
 80053e0:	fffff7ff 	.word	0xfffff7ff
 80053e4:	fffffbff 	.word	0xfffffbff
 80053e8:	40014400 	.word	0x40014400
 80053ec:	40014800 	.word	0x40014800
 80053f0:	ffffefff 	.word	0xffffefff
 80053f4:	ffffdfff 	.word	0xffffdfff

080053f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b086      	sub	sp, #24
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a1b      	ldr	r3, [r3, #32]
 8005406:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a1b      	ldr	r3, [r3, #32]
 800540c:	4a24      	ldr	r2, [pc, #144]	@ (80054a0 <TIM_OC4_SetConfig+0xa8>)
 800540e:	401a      	ands	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	69db      	ldr	r3, [r3, #28]
 800541e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	4a20      	ldr	r2, [pc, #128]	@ (80054a4 <TIM_OC4_SetConfig+0xac>)
 8005424:	4013      	ands	r3, r2
 8005426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	4a1f      	ldr	r2, [pc, #124]	@ (80054a8 <TIM_OC4_SetConfig+0xb0>)
 800542c:	4013      	ands	r3, r2
 800542e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	021b      	lsls	r3, r3, #8
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	4313      	orrs	r3, r2
 800543a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	4a1b      	ldr	r2, [pc, #108]	@ (80054ac <TIM_OC4_SetConfig+0xb4>)
 8005440:	4013      	ands	r3, r2
 8005442:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	031b      	lsls	r3, r3, #12
 800544a:	693a      	ldr	r2, [r7, #16]
 800544c:	4313      	orrs	r3, r2
 800544e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a17      	ldr	r2, [pc, #92]	@ (80054b0 <TIM_OC4_SetConfig+0xb8>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d007      	beq.n	8005468 <TIM_OC4_SetConfig+0x70>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a16      	ldr	r2, [pc, #88]	@ (80054b4 <TIM_OC4_SetConfig+0xbc>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d003      	beq.n	8005468 <TIM_OC4_SetConfig+0x70>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a15      	ldr	r2, [pc, #84]	@ (80054b8 <TIM_OC4_SetConfig+0xc0>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d109      	bne.n	800547c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	4a14      	ldr	r2, [pc, #80]	@ (80054bc <TIM_OC4_SetConfig+0xc4>)
 800546c:	4013      	ands	r3, r2
 800546e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	695b      	ldr	r3, [r3, #20]
 8005474:	019b      	lsls	r3, r3, #6
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	4313      	orrs	r3, r2
 800547a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	685a      	ldr	r2, [r3, #4]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	621a      	str	r2, [r3, #32]
}
 8005496:	46c0      	nop			@ (mov r8, r8)
 8005498:	46bd      	mov	sp, r7
 800549a:	b006      	add	sp, #24
 800549c:	bd80      	pop	{r7, pc}
 800549e:	46c0      	nop			@ (mov r8, r8)
 80054a0:	ffffefff 	.word	0xffffefff
 80054a4:	feff8fff 	.word	0xfeff8fff
 80054a8:	fffffcff 	.word	0xfffffcff
 80054ac:	ffffdfff 	.word	0xffffdfff
 80054b0:	40012c00 	.word	0x40012c00
 80054b4:	40014400 	.word	0x40014400
 80054b8:	40014800 	.word	0x40014800
 80054bc:	ffffbfff 	.word	0xffffbfff

080054c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b086      	sub	sp, #24
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a1b      	ldr	r3, [r3, #32]
 80054d4:	4a21      	ldr	r2, [pc, #132]	@ (800555c <TIM_OC5_SetConfig+0x9c>)
 80054d6:	401a      	ands	r2, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	4a1d      	ldr	r2, [pc, #116]	@ (8005560 <TIM_OC5_SetConfig+0xa0>)
 80054ec:	4013      	ands	r3, r2
 80054ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	4a19      	ldr	r2, [pc, #100]	@ (8005564 <TIM_OC5_SetConfig+0xa4>)
 80054fe:	4013      	ands	r3, r2
 8005500:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	041b      	lsls	r3, r3, #16
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	4313      	orrs	r3, r2
 800550c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a15      	ldr	r2, [pc, #84]	@ (8005568 <TIM_OC5_SetConfig+0xa8>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d007      	beq.n	8005526 <TIM_OC5_SetConfig+0x66>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a14      	ldr	r2, [pc, #80]	@ (800556c <TIM_OC5_SetConfig+0xac>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d003      	beq.n	8005526 <TIM_OC5_SetConfig+0x66>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a13      	ldr	r2, [pc, #76]	@ (8005570 <TIM_OC5_SetConfig+0xb0>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d109      	bne.n	800553a <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	4a0c      	ldr	r2, [pc, #48]	@ (800555c <TIM_OC5_SetConfig+0x9c>)
 800552a:	4013      	ands	r3, r2
 800552c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	021b      	lsls	r3, r3, #8
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	4313      	orrs	r3, r2
 8005538:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	685a      	ldr	r2, [r3, #4]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	693a      	ldr	r2, [r7, #16]
 8005552:	621a      	str	r2, [r3, #32]
}
 8005554:	46c0      	nop			@ (mov r8, r8)
 8005556:	46bd      	mov	sp, r7
 8005558:	b006      	add	sp, #24
 800555a:	bd80      	pop	{r7, pc}
 800555c:	fffeffff 	.word	0xfffeffff
 8005560:	fffeff8f 	.word	0xfffeff8f
 8005564:	fffdffff 	.word	0xfffdffff
 8005568:	40012c00 	.word	0x40012c00
 800556c:	40014400 	.word	0x40014400
 8005570:	40014800 	.word	0x40014800

08005574 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b086      	sub	sp, #24
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a1b      	ldr	r3, [r3, #32]
 8005588:	4a22      	ldr	r2, [pc, #136]	@ (8005614 <TIM_OC6_SetConfig+0xa0>)
 800558a:	401a      	ands	r2, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800559a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	4a1e      	ldr	r2, [pc, #120]	@ (8005618 <TIM_OC6_SetConfig+0xa4>)
 80055a0:	4013      	ands	r3, r2
 80055a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	021b      	lsls	r3, r3, #8
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	4a1a      	ldr	r2, [pc, #104]	@ (800561c <TIM_OC6_SetConfig+0xa8>)
 80055b4:	4013      	ands	r3, r2
 80055b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	051b      	lsls	r3, r3, #20
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a16      	ldr	r2, [pc, #88]	@ (8005620 <TIM_OC6_SetConfig+0xac>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d007      	beq.n	80055dc <TIM_OC6_SetConfig+0x68>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a15      	ldr	r2, [pc, #84]	@ (8005624 <TIM_OC6_SetConfig+0xb0>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d003      	beq.n	80055dc <TIM_OC6_SetConfig+0x68>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a14      	ldr	r2, [pc, #80]	@ (8005628 <TIM_OC6_SetConfig+0xb4>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d109      	bne.n	80055f0 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	4a13      	ldr	r2, [pc, #76]	@ (800562c <TIM_OC6_SetConfig+0xb8>)
 80055e0:	4013      	ands	r3, r2
 80055e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	695b      	ldr	r3, [r3, #20]
 80055e8:	029b      	lsls	r3, r3, #10
 80055ea:	697a      	ldr	r2, [r7, #20]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	697a      	ldr	r2, [r7, #20]
 80055f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	685a      	ldr	r2, [r3, #4]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	693a      	ldr	r2, [r7, #16]
 8005608:	621a      	str	r2, [r3, #32]
}
 800560a:	46c0      	nop			@ (mov r8, r8)
 800560c:	46bd      	mov	sp, r7
 800560e:	b006      	add	sp, #24
 8005610:	bd80      	pop	{r7, pc}
 8005612:	46c0      	nop			@ (mov r8, r8)
 8005614:	ffefffff 	.word	0xffefffff
 8005618:	feff8fff 	.word	0xfeff8fff
 800561c:	ffdfffff 	.word	0xffdfffff
 8005620:	40012c00 	.word	0x40012c00
 8005624:	40014400 	.word	0x40014400
 8005628:	40014800 	.word	0x40014800
 800562c:	fffbffff 	.word	0xfffbffff

08005630 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b086      	sub	sp, #24
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6a1b      	ldr	r3, [r3, #32]
 8005640:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6a1b      	ldr	r3, [r3, #32]
 8005646:	2201      	movs	r2, #1
 8005648:	4393      	bics	r3, r2
 800564a:	001a      	movs	r2, r3
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	699b      	ldr	r3, [r3, #24]
 8005654:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	22f0      	movs	r2, #240	@ 0xf0
 800565a:	4393      	bics	r3, r2
 800565c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	011b      	lsls	r3, r3, #4
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	4313      	orrs	r3, r2
 8005666:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	220a      	movs	r2, #10
 800566c:	4393      	bics	r3, r2
 800566e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005670:	697a      	ldr	r2, [r7, #20]
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	4313      	orrs	r3, r2
 8005676:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	697a      	ldr	r2, [r7, #20]
 8005682:	621a      	str	r2, [r3, #32]
}
 8005684:	46c0      	nop			@ (mov r8, r8)
 8005686:	46bd      	mov	sp, r7
 8005688:	b006      	add	sp, #24
 800568a:	bd80      	pop	{r7, pc}

0800568c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b086      	sub	sp, #24
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6a1b      	ldr	r3, [r3, #32]
 800569c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6a1b      	ldr	r3, [r3, #32]
 80056a2:	2210      	movs	r2, #16
 80056a4:	4393      	bics	r3, r2
 80056a6:	001a      	movs	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	4a0d      	ldr	r2, [pc, #52]	@ (80056ec <TIM_TI2_ConfigInputStage+0x60>)
 80056b6:	4013      	ands	r3, r2
 80056b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	031b      	lsls	r3, r3, #12
 80056be:	693a      	ldr	r2, [r7, #16]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	22a0      	movs	r2, #160	@ 0xa0
 80056c8:	4393      	bics	r3, r2
 80056ca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	011b      	lsls	r3, r3, #4
 80056d0:	697a      	ldr	r2, [r7, #20]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	693a      	ldr	r2, [r7, #16]
 80056da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	621a      	str	r2, [r3, #32]
}
 80056e2:	46c0      	nop			@ (mov r8, r8)
 80056e4:	46bd      	mov	sp, r7
 80056e6:	b006      	add	sp, #24
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	46c0      	nop			@ (mov r8, r8)
 80056ec:	ffff0fff 	.word	0xffff0fff

080056f0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	4a08      	ldr	r2, [pc, #32]	@ (8005724 <TIM_ITRx_SetConfig+0x34>)
 8005704:	4013      	ands	r3, r2
 8005706:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005708:	683a      	ldr	r2, [r7, #0]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	4313      	orrs	r3, r2
 800570e:	2207      	movs	r2, #7
 8005710:	4313      	orrs	r3, r2
 8005712:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	609a      	str	r2, [r3, #8]
}
 800571a:	46c0      	nop			@ (mov r8, r8)
 800571c:	46bd      	mov	sp, r7
 800571e:	b004      	add	sp, #16
 8005720:	bd80      	pop	{r7, pc}
 8005722:	46c0      	nop			@ (mov r8, r8)
 8005724:	ffcfff8f 	.word	0xffcfff8f

08005728 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b086      	sub	sp, #24
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	607a      	str	r2, [r7, #4]
 8005734:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	4a09      	ldr	r2, [pc, #36]	@ (8005764 <TIM_ETR_SetConfig+0x3c>)
 8005740:	4013      	ands	r3, r2
 8005742:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	021a      	lsls	r2, r3, #8
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	431a      	orrs	r2, r3
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	4313      	orrs	r3, r2
 8005750:	697a      	ldr	r2, [r7, #20]
 8005752:	4313      	orrs	r3, r2
 8005754:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	697a      	ldr	r2, [r7, #20]
 800575a:	609a      	str	r2, [r3, #8]
}
 800575c:	46c0      	nop			@ (mov r8, r8)
 800575e:	46bd      	mov	sp, r7
 8005760:	b006      	add	sp, #24
 8005762:	bd80      	pop	{r7, pc}
 8005764:	ffff00ff 	.word	0xffff00ff

08005768 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b086      	sub	sp, #24
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	221f      	movs	r2, #31
 8005778:	4013      	ands	r3, r2
 800577a:	2201      	movs	r2, #1
 800577c:	409a      	lsls	r2, r3
 800577e:	0013      	movs	r3, r2
 8005780:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6a1b      	ldr	r3, [r3, #32]
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	43d2      	mvns	r2, r2
 800578a:	401a      	ands	r2, r3
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6a1a      	ldr	r2, [r3, #32]
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	211f      	movs	r1, #31
 8005798:	400b      	ands	r3, r1
 800579a:	6879      	ldr	r1, [r7, #4]
 800579c:	4099      	lsls	r1, r3
 800579e:	000b      	movs	r3, r1
 80057a0:	431a      	orrs	r2, r3
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	621a      	str	r2, [r3, #32]
}
 80057a6:	46c0      	nop			@ (mov r8, r8)
 80057a8:	46bd      	mov	sp, r7
 80057aa:	b006      	add	sp, #24
 80057ac:	bd80      	pop	{r7, pc}
	...

080057b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	223c      	movs	r2, #60	@ 0x3c
 80057be:	5c9b      	ldrb	r3, [r3, r2]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d101      	bne.n	80057c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057c4:	2302      	movs	r3, #2
 80057c6:	e050      	b.n	800586a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	223c      	movs	r2, #60	@ 0x3c
 80057cc:	2101      	movs	r1, #1
 80057ce:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	223d      	movs	r2, #61	@ 0x3d
 80057d4:	2102      	movs	r1, #2
 80057d6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a21      	ldr	r2, [pc, #132]	@ (8005874 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d108      	bne.n	8005804 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	4a20      	ldr	r2, [pc, #128]	@ (8005878 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80057f6:	4013      	ands	r3, r2
 80057f8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	4313      	orrs	r3, r2
 8005802:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2270      	movs	r2, #112	@ 0x70
 8005808:	4393      	bics	r3, r2
 800580a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	4313      	orrs	r3, r2
 8005814:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a14      	ldr	r2, [pc, #80]	@ (8005874 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d00a      	beq.n	800583e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	2380      	movs	r3, #128	@ 0x80
 800582e:	05db      	lsls	r3, r3, #23
 8005830:	429a      	cmp	r2, r3
 8005832:	d004      	beq.n	800583e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a10      	ldr	r2, [pc, #64]	@ (800587c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d10c      	bne.n	8005858 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	2280      	movs	r2, #128	@ 0x80
 8005842:	4393      	bics	r3, r2
 8005844:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	4313      	orrs	r3, r2
 800584e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68ba      	ldr	r2, [r7, #8]
 8005856:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	223d      	movs	r2, #61	@ 0x3d
 800585c:	2101      	movs	r1, #1
 800585e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	223c      	movs	r2, #60	@ 0x3c
 8005864:	2100      	movs	r1, #0
 8005866:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	0018      	movs	r0, r3
 800586c:	46bd      	mov	sp, r7
 800586e:	b004      	add	sp, #16
 8005870:	bd80      	pop	{r7, pc}
 8005872:	46c0      	nop			@ (mov r8, r8)
 8005874:	40012c00 	.word	0x40012c00
 8005878:	ff0fffff 	.word	0xff0fffff
 800587c:	40000400 	.word	0x40000400

08005880 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800588a:	2300      	movs	r3, #0
 800588c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	223c      	movs	r2, #60	@ 0x3c
 8005892:	5c9b      	ldrb	r3, [r3, r2]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d101      	bne.n	800589c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005898:	2302      	movs	r3, #2
 800589a:	e06f      	b.n	800597c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	223c      	movs	r2, #60	@ 0x3c
 80058a0:	2101      	movs	r1, #1
 80058a2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	22ff      	movs	r2, #255	@ 0xff
 80058a8:	4393      	bics	r3, r2
 80058aa:	001a      	movs	r2, r3
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	4a33      	ldr	r2, [pc, #204]	@ (8005984 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80058b8:	401a      	ands	r2, r3
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	4313      	orrs	r3, r2
 80058c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	4a30      	ldr	r2, [pc, #192]	@ (8005988 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80058c6:	401a      	ands	r2, r3
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	4a2e      	ldr	r2, [pc, #184]	@ (800598c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 80058d4:	401a      	ands	r2, r3
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4313      	orrs	r3, r2
 80058dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	4a2b      	ldr	r2, [pc, #172]	@ (8005990 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80058e2:	401a      	ands	r2, r3
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	691b      	ldr	r3, [r3, #16]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	4a29      	ldr	r2, [pc, #164]	@ (8005994 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80058f0:	401a      	ands	r2, r3
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	4a26      	ldr	r2, [pc, #152]	@ (8005998 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80058fe:	401a      	ands	r2, r3
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005904:	4313      	orrs	r3, r2
 8005906:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	4a24      	ldr	r2, [pc, #144]	@ (800599c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800590c:	401a      	ands	r2, r3
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	699b      	ldr	r3, [r3, #24]
 8005912:	041b      	lsls	r3, r3, #16
 8005914:	4313      	orrs	r3, r2
 8005916:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	4a21      	ldr	r2, [pc, #132]	@ (80059a0 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800591c:	401a      	ands	r2, r3
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	69db      	ldr	r3, [r3, #28]
 8005922:	4313      	orrs	r3, r2
 8005924:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a1e      	ldr	r2, [pc, #120]	@ (80059a4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d11c      	bne.n	800596a <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	4a1d      	ldr	r2, [pc, #116]	@ (80059a8 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8005934:	401a      	ands	r2, r3
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800593a:	051b      	lsls	r3, r3, #20
 800593c:	4313      	orrs	r3, r2
 800593e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	4a1a      	ldr	r2, [pc, #104]	@ (80059ac <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8005944:	401a      	ands	r2, r3
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	4313      	orrs	r3, r2
 800594c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	4a17      	ldr	r2, [pc, #92]	@ (80059b0 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8005952:	401a      	ands	r2, r3
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005958:	4313      	orrs	r3, r2
 800595a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	4a15      	ldr	r2, [pc, #84]	@ (80059b4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8005960:	401a      	ands	r2, r3
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005966:	4313      	orrs	r3, r2
 8005968:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	223c      	movs	r2, #60	@ 0x3c
 8005976:	2100      	movs	r1, #0
 8005978:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800597a:	2300      	movs	r3, #0
}
 800597c:	0018      	movs	r0, r3
 800597e:	46bd      	mov	sp, r7
 8005980:	b004      	add	sp, #16
 8005982:	bd80      	pop	{r7, pc}
 8005984:	fffffcff 	.word	0xfffffcff
 8005988:	fffffbff 	.word	0xfffffbff
 800598c:	fffff7ff 	.word	0xfffff7ff
 8005990:	ffffefff 	.word	0xffffefff
 8005994:	ffffdfff 	.word	0xffffdfff
 8005998:	ffffbfff 	.word	0xffffbfff
 800599c:	fff0ffff 	.word	0xfff0ffff
 80059a0:	efffffff 	.word	0xefffffff
 80059a4:	40012c00 	.word	0x40012c00
 80059a8:	ff0fffff 	.word	0xff0fffff
 80059ac:	feffffff 	.word	0xfeffffff
 80059b0:	fdffffff 	.word	0xfdffffff
 80059b4:	dfffffff 	.word	0xdfffffff

080059b8 <srand>:
 80059b8:	4b11      	ldr	r3, [pc, #68]	@ (8005a00 <srand+0x48>)
 80059ba:	b570      	push	{r4, r5, r6, lr}
 80059bc:	681d      	ldr	r5, [r3, #0]
 80059be:	0004      	movs	r4, r0
 80059c0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d116      	bne.n	80059f4 <srand+0x3c>
 80059c6:	2018      	movs	r0, #24
 80059c8:	f000 f9b2 	bl	8005d30 <malloc>
 80059cc:	1e02      	subs	r2, r0, #0
 80059ce:	6328      	str	r0, [r5, #48]	@ 0x30
 80059d0:	d104      	bne.n	80059dc <srand+0x24>
 80059d2:	2146      	movs	r1, #70	@ 0x46
 80059d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005a04 <srand+0x4c>)
 80059d6:	480c      	ldr	r0, [pc, #48]	@ (8005a08 <srand+0x50>)
 80059d8:	f000 f98c 	bl	8005cf4 <__assert_func>
 80059dc:	4b0b      	ldr	r3, [pc, #44]	@ (8005a0c <srand+0x54>)
 80059de:	2100      	movs	r1, #0
 80059e0:	6003      	str	r3, [r0, #0]
 80059e2:	4b0b      	ldr	r3, [pc, #44]	@ (8005a10 <srand+0x58>)
 80059e4:	6043      	str	r3, [r0, #4]
 80059e6:	4b0b      	ldr	r3, [pc, #44]	@ (8005a14 <srand+0x5c>)
 80059e8:	6083      	str	r3, [r0, #8]
 80059ea:	230b      	movs	r3, #11
 80059ec:	8183      	strh	r3, [r0, #12]
 80059ee:	2001      	movs	r0, #1
 80059f0:	6110      	str	r0, [r2, #16]
 80059f2:	6151      	str	r1, [r2, #20]
 80059f4:	2200      	movs	r2, #0
 80059f6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80059f8:	611c      	str	r4, [r3, #16]
 80059fa:	615a      	str	r2, [r3, #20]
 80059fc:	bd70      	pop	{r4, r5, r6, pc}
 80059fe:	46c0      	nop			@ (mov r8, r8)
 8005a00:	2000041c 	.word	0x2000041c
 8005a04:	08006c58 	.word	0x08006c58
 8005a08:	08006c6f 	.word	0x08006c6f
 8005a0c:	abcd330e 	.word	0xabcd330e
 8005a10:	e66d1234 	.word	0xe66d1234
 8005a14:	0005deec 	.word	0x0005deec

08005a18 <rand>:
 8005a18:	4b16      	ldr	r3, [pc, #88]	@ (8005a74 <rand+0x5c>)
 8005a1a:	b510      	push	{r4, lr}
 8005a1c:	681c      	ldr	r4, [r3, #0]
 8005a1e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d116      	bne.n	8005a52 <rand+0x3a>
 8005a24:	2018      	movs	r0, #24
 8005a26:	f000 f983 	bl	8005d30 <malloc>
 8005a2a:	1e02      	subs	r2, r0, #0
 8005a2c:	6320      	str	r0, [r4, #48]	@ 0x30
 8005a2e:	d104      	bne.n	8005a3a <rand+0x22>
 8005a30:	2152      	movs	r1, #82	@ 0x52
 8005a32:	4b11      	ldr	r3, [pc, #68]	@ (8005a78 <rand+0x60>)
 8005a34:	4811      	ldr	r0, [pc, #68]	@ (8005a7c <rand+0x64>)
 8005a36:	f000 f95d 	bl	8005cf4 <__assert_func>
 8005a3a:	4b11      	ldr	r3, [pc, #68]	@ (8005a80 <rand+0x68>)
 8005a3c:	2100      	movs	r1, #0
 8005a3e:	6003      	str	r3, [r0, #0]
 8005a40:	4b10      	ldr	r3, [pc, #64]	@ (8005a84 <rand+0x6c>)
 8005a42:	6043      	str	r3, [r0, #4]
 8005a44:	4b10      	ldr	r3, [pc, #64]	@ (8005a88 <rand+0x70>)
 8005a46:	6083      	str	r3, [r0, #8]
 8005a48:	230b      	movs	r3, #11
 8005a4a:	8183      	strh	r3, [r0, #12]
 8005a4c:	2001      	movs	r0, #1
 8005a4e:	6110      	str	r0, [r2, #16]
 8005a50:	6151      	str	r1, [r2, #20]
 8005a52:	6b24      	ldr	r4, [r4, #48]	@ 0x30
 8005a54:	4a0d      	ldr	r2, [pc, #52]	@ (8005a8c <rand+0x74>)
 8005a56:	6920      	ldr	r0, [r4, #16]
 8005a58:	6961      	ldr	r1, [r4, #20]
 8005a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8005a90 <rand+0x78>)
 8005a5c:	f7fa fbe8 	bl	8000230 <__aeabi_lmul>
 8005a60:	2201      	movs	r2, #1
 8005a62:	2300      	movs	r3, #0
 8005a64:	1880      	adds	r0, r0, r2
 8005a66:	4159      	adcs	r1, r3
 8005a68:	6120      	str	r0, [r4, #16]
 8005a6a:	6161      	str	r1, [r4, #20]
 8005a6c:	0048      	lsls	r0, r1, #1
 8005a6e:	0840      	lsrs	r0, r0, #1
 8005a70:	bd10      	pop	{r4, pc}
 8005a72:	46c0      	nop			@ (mov r8, r8)
 8005a74:	2000041c 	.word	0x2000041c
 8005a78:	08006c58 	.word	0x08006c58
 8005a7c:	08006c6f 	.word	0x08006c6f
 8005a80:	abcd330e 	.word	0xabcd330e
 8005a84:	e66d1234 	.word	0xe66d1234
 8005a88:	0005deec 	.word	0x0005deec
 8005a8c:	4c957f2d 	.word	0x4c957f2d
 8005a90:	5851f42d 	.word	0x5851f42d

08005a94 <std>:
 8005a94:	2300      	movs	r3, #0
 8005a96:	b510      	push	{r4, lr}
 8005a98:	0004      	movs	r4, r0
 8005a9a:	6003      	str	r3, [r0, #0]
 8005a9c:	6043      	str	r3, [r0, #4]
 8005a9e:	6083      	str	r3, [r0, #8]
 8005aa0:	8181      	strh	r1, [r0, #12]
 8005aa2:	6643      	str	r3, [r0, #100]	@ 0x64
 8005aa4:	81c2      	strh	r2, [r0, #14]
 8005aa6:	6103      	str	r3, [r0, #16]
 8005aa8:	6143      	str	r3, [r0, #20]
 8005aaa:	6183      	str	r3, [r0, #24]
 8005aac:	0019      	movs	r1, r3
 8005aae:	2208      	movs	r2, #8
 8005ab0:	305c      	adds	r0, #92	@ 0x5c
 8005ab2:	f000 f8b3 	bl	8005c1c <memset>
 8005ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8005ae4 <std+0x50>)
 8005ab8:	6224      	str	r4, [r4, #32]
 8005aba:	6263      	str	r3, [r4, #36]	@ 0x24
 8005abc:	4b0a      	ldr	r3, [pc, #40]	@ (8005ae8 <std+0x54>)
 8005abe:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8005aec <std+0x58>)
 8005ac2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8005af0 <std+0x5c>)
 8005ac6:	6323      	str	r3, [r4, #48]	@ 0x30
 8005ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8005af4 <std+0x60>)
 8005aca:	429c      	cmp	r4, r3
 8005acc:	d005      	beq.n	8005ada <std+0x46>
 8005ace:	4b0a      	ldr	r3, [pc, #40]	@ (8005af8 <std+0x64>)
 8005ad0:	429c      	cmp	r4, r3
 8005ad2:	d002      	beq.n	8005ada <std+0x46>
 8005ad4:	4b09      	ldr	r3, [pc, #36]	@ (8005afc <std+0x68>)
 8005ad6:	429c      	cmp	r4, r3
 8005ad8:	d103      	bne.n	8005ae2 <std+0x4e>
 8005ada:	0020      	movs	r0, r4
 8005adc:	3058      	adds	r0, #88	@ 0x58
 8005ade:	f000 f8fd 	bl	8005cdc <__retarget_lock_init_recursive>
 8005ae2:	bd10      	pop	{r4, pc}
 8005ae4:	0800600d 	.word	0x0800600d
 8005ae8:	08006035 	.word	0x08006035
 8005aec:	0800606d 	.word	0x0800606d
 8005af0:	08006099 	.word	0x08006099
 8005af4:	20001258 	.word	0x20001258
 8005af8:	200012c0 	.word	0x200012c0
 8005afc:	20001328 	.word	0x20001328

08005b00 <stdio_exit_handler>:
 8005b00:	b510      	push	{r4, lr}
 8005b02:	4a03      	ldr	r2, [pc, #12]	@ (8005b10 <stdio_exit_handler+0x10>)
 8005b04:	4903      	ldr	r1, [pc, #12]	@ (8005b14 <stdio_exit_handler+0x14>)
 8005b06:	4804      	ldr	r0, [pc, #16]	@ (8005b18 <stdio_exit_handler+0x18>)
 8005b08:	f000 f86c 	bl	8005be4 <_fwalk_sglue>
 8005b0c:	bd10      	pop	{r4, pc}
 8005b0e:	46c0      	nop			@ (mov r8, r8)
 8005b10:	20000410 	.word	0x20000410
 8005b14:	08005f95 	.word	0x08005f95
 8005b18:	20000420 	.word	0x20000420

08005b1c <cleanup_stdio>:
 8005b1c:	6841      	ldr	r1, [r0, #4]
 8005b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8005b4c <cleanup_stdio+0x30>)
 8005b20:	b510      	push	{r4, lr}
 8005b22:	0004      	movs	r4, r0
 8005b24:	4299      	cmp	r1, r3
 8005b26:	d001      	beq.n	8005b2c <cleanup_stdio+0x10>
 8005b28:	f000 fa34 	bl	8005f94 <_fflush_r>
 8005b2c:	68a1      	ldr	r1, [r4, #8]
 8005b2e:	4b08      	ldr	r3, [pc, #32]	@ (8005b50 <cleanup_stdio+0x34>)
 8005b30:	4299      	cmp	r1, r3
 8005b32:	d002      	beq.n	8005b3a <cleanup_stdio+0x1e>
 8005b34:	0020      	movs	r0, r4
 8005b36:	f000 fa2d 	bl	8005f94 <_fflush_r>
 8005b3a:	68e1      	ldr	r1, [r4, #12]
 8005b3c:	4b05      	ldr	r3, [pc, #20]	@ (8005b54 <cleanup_stdio+0x38>)
 8005b3e:	4299      	cmp	r1, r3
 8005b40:	d002      	beq.n	8005b48 <cleanup_stdio+0x2c>
 8005b42:	0020      	movs	r0, r4
 8005b44:	f000 fa26 	bl	8005f94 <_fflush_r>
 8005b48:	bd10      	pop	{r4, pc}
 8005b4a:	46c0      	nop			@ (mov r8, r8)
 8005b4c:	20001258 	.word	0x20001258
 8005b50:	200012c0 	.word	0x200012c0
 8005b54:	20001328 	.word	0x20001328

08005b58 <global_stdio_init.part.0>:
 8005b58:	b510      	push	{r4, lr}
 8005b5a:	4b09      	ldr	r3, [pc, #36]	@ (8005b80 <global_stdio_init.part.0+0x28>)
 8005b5c:	4a09      	ldr	r2, [pc, #36]	@ (8005b84 <global_stdio_init.part.0+0x2c>)
 8005b5e:	2104      	movs	r1, #4
 8005b60:	601a      	str	r2, [r3, #0]
 8005b62:	4809      	ldr	r0, [pc, #36]	@ (8005b88 <global_stdio_init.part.0+0x30>)
 8005b64:	2200      	movs	r2, #0
 8005b66:	f7ff ff95 	bl	8005a94 <std>
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	2109      	movs	r1, #9
 8005b6e:	4807      	ldr	r0, [pc, #28]	@ (8005b8c <global_stdio_init.part.0+0x34>)
 8005b70:	f7ff ff90 	bl	8005a94 <std>
 8005b74:	2202      	movs	r2, #2
 8005b76:	2112      	movs	r1, #18
 8005b78:	4805      	ldr	r0, [pc, #20]	@ (8005b90 <global_stdio_init.part.0+0x38>)
 8005b7a:	f7ff ff8b 	bl	8005a94 <std>
 8005b7e:	bd10      	pop	{r4, pc}
 8005b80:	20001390 	.word	0x20001390
 8005b84:	08005b01 	.word	0x08005b01
 8005b88:	20001258 	.word	0x20001258
 8005b8c:	200012c0 	.word	0x200012c0
 8005b90:	20001328 	.word	0x20001328

08005b94 <__sfp_lock_acquire>:
 8005b94:	b510      	push	{r4, lr}
 8005b96:	4802      	ldr	r0, [pc, #8]	@ (8005ba0 <__sfp_lock_acquire+0xc>)
 8005b98:	f000 f8a1 	bl	8005cde <__retarget_lock_acquire_recursive>
 8005b9c:	bd10      	pop	{r4, pc}
 8005b9e:	46c0      	nop			@ (mov r8, r8)
 8005ba0:	20001395 	.word	0x20001395

08005ba4 <__sfp_lock_release>:
 8005ba4:	b510      	push	{r4, lr}
 8005ba6:	4802      	ldr	r0, [pc, #8]	@ (8005bb0 <__sfp_lock_release+0xc>)
 8005ba8:	f000 f89a 	bl	8005ce0 <__retarget_lock_release_recursive>
 8005bac:	bd10      	pop	{r4, pc}
 8005bae:	46c0      	nop			@ (mov r8, r8)
 8005bb0:	20001395 	.word	0x20001395

08005bb4 <__sinit>:
 8005bb4:	b510      	push	{r4, lr}
 8005bb6:	0004      	movs	r4, r0
 8005bb8:	f7ff ffec 	bl	8005b94 <__sfp_lock_acquire>
 8005bbc:	6a23      	ldr	r3, [r4, #32]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d002      	beq.n	8005bc8 <__sinit+0x14>
 8005bc2:	f7ff ffef 	bl	8005ba4 <__sfp_lock_release>
 8005bc6:	bd10      	pop	{r4, pc}
 8005bc8:	4b04      	ldr	r3, [pc, #16]	@ (8005bdc <__sinit+0x28>)
 8005bca:	6223      	str	r3, [r4, #32]
 8005bcc:	4b04      	ldr	r3, [pc, #16]	@ (8005be0 <__sinit+0x2c>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d1f6      	bne.n	8005bc2 <__sinit+0xe>
 8005bd4:	f7ff ffc0 	bl	8005b58 <global_stdio_init.part.0>
 8005bd8:	e7f3      	b.n	8005bc2 <__sinit+0xe>
 8005bda:	46c0      	nop			@ (mov r8, r8)
 8005bdc:	08005b1d 	.word	0x08005b1d
 8005be0:	20001390 	.word	0x20001390

08005be4 <_fwalk_sglue>:
 8005be4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005be6:	0014      	movs	r4, r2
 8005be8:	2600      	movs	r6, #0
 8005bea:	9000      	str	r0, [sp, #0]
 8005bec:	9101      	str	r1, [sp, #4]
 8005bee:	68a5      	ldr	r5, [r4, #8]
 8005bf0:	6867      	ldr	r7, [r4, #4]
 8005bf2:	3f01      	subs	r7, #1
 8005bf4:	d504      	bpl.n	8005c00 <_fwalk_sglue+0x1c>
 8005bf6:	6824      	ldr	r4, [r4, #0]
 8005bf8:	2c00      	cmp	r4, #0
 8005bfa:	d1f8      	bne.n	8005bee <_fwalk_sglue+0xa>
 8005bfc:	0030      	movs	r0, r6
 8005bfe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005c00:	89ab      	ldrh	r3, [r5, #12]
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d908      	bls.n	8005c18 <_fwalk_sglue+0x34>
 8005c06:	220e      	movs	r2, #14
 8005c08:	5eab      	ldrsh	r3, [r5, r2]
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	d004      	beq.n	8005c18 <_fwalk_sglue+0x34>
 8005c0e:	0029      	movs	r1, r5
 8005c10:	9800      	ldr	r0, [sp, #0]
 8005c12:	9b01      	ldr	r3, [sp, #4]
 8005c14:	4798      	blx	r3
 8005c16:	4306      	orrs	r6, r0
 8005c18:	3568      	adds	r5, #104	@ 0x68
 8005c1a:	e7ea      	b.n	8005bf2 <_fwalk_sglue+0xe>

08005c1c <memset>:
 8005c1c:	0003      	movs	r3, r0
 8005c1e:	1882      	adds	r2, r0, r2
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d100      	bne.n	8005c26 <memset+0xa>
 8005c24:	4770      	bx	lr
 8005c26:	7019      	strb	r1, [r3, #0]
 8005c28:	3301      	adds	r3, #1
 8005c2a:	e7f9      	b.n	8005c20 <memset+0x4>

08005c2c <time>:
 8005c2c:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 8005c2e:	2601      	movs	r6, #1
 8005c30:	4276      	negs	r6, r6
 8005c32:	17f7      	asrs	r7, r6, #31
 8005c34:	4b0a      	ldr	r3, [pc, #40]	@ (8005c60 <time+0x34>)
 8005c36:	0004      	movs	r4, r0
 8005c38:	2200      	movs	r2, #0
 8005c3a:	4669      	mov	r1, sp
 8005c3c:	6818      	ldr	r0, [r3, #0]
 8005c3e:	9600      	str	r6, [sp, #0]
 8005c40:	9701      	str	r7, [sp, #4]
 8005c42:	f000 f80f 	bl	8005c64 <_gettimeofday_r>
 8005c46:	2800      	cmp	r0, #0
 8005c48:	da01      	bge.n	8005c4e <time+0x22>
 8005c4a:	9600      	str	r6, [sp, #0]
 8005c4c:	9701      	str	r7, [sp, #4]
 8005c4e:	9800      	ldr	r0, [sp, #0]
 8005c50:	9901      	ldr	r1, [sp, #4]
 8005c52:	2c00      	cmp	r4, #0
 8005c54:	d001      	beq.n	8005c5a <time+0x2e>
 8005c56:	6020      	str	r0, [r4, #0]
 8005c58:	6061      	str	r1, [r4, #4]
 8005c5a:	b004      	add	sp, #16
 8005c5c:	bdd0      	pop	{r4, r6, r7, pc}
 8005c5e:	46c0      	nop			@ (mov r8, r8)
 8005c60:	2000041c 	.word	0x2000041c

08005c64 <_gettimeofday_r>:
 8005c64:	2300      	movs	r3, #0
 8005c66:	b570      	push	{r4, r5, r6, lr}
 8005c68:	4d06      	ldr	r5, [pc, #24]	@ (8005c84 <_gettimeofday_r+0x20>)
 8005c6a:	0004      	movs	r4, r0
 8005c6c:	0008      	movs	r0, r1
 8005c6e:	0011      	movs	r1, r2
 8005c70:	602b      	str	r3, [r5, #0]
 8005c72:	f000 ff69 	bl	8006b48 <_gettimeofday>
 8005c76:	1c43      	adds	r3, r0, #1
 8005c78:	d103      	bne.n	8005c82 <_gettimeofday_r+0x1e>
 8005c7a:	682b      	ldr	r3, [r5, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d000      	beq.n	8005c82 <_gettimeofday_r+0x1e>
 8005c80:	6023      	str	r3, [r4, #0]
 8005c82:	bd70      	pop	{r4, r5, r6, pc}
 8005c84:	200013a0 	.word	0x200013a0

08005c88 <__errno>:
 8005c88:	4b01      	ldr	r3, [pc, #4]	@ (8005c90 <__errno+0x8>)
 8005c8a:	6818      	ldr	r0, [r3, #0]
 8005c8c:	4770      	bx	lr
 8005c8e:	46c0      	nop			@ (mov r8, r8)
 8005c90:	2000041c 	.word	0x2000041c

08005c94 <__libc_init_array>:
 8005c94:	b570      	push	{r4, r5, r6, lr}
 8005c96:	2600      	movs	r6, #0
 8005c98:	4c0c      	ldr	r4, [pc, #48]	@ (8005ccc <__libc_init_array+0x38>)
 8005c9a:	4d0d      	ldr	r5, [pc, #52]	@ (8005cd0 <__libc_init_array+0x3c>)
 8005c9c:	1b64      	subs	r4, r4, r5
 8005c9e:	10a4      	asrs	r4, r4, #2
 8005ca0:	42a6      	cmp	r6, r4
 8005ca2:	d109      	bne.n	8005cb8 <__libc_init_array+0x24>
 8005ca4:	2600      	movs	r6, #0
 8005ca6:	f000 ff57 	bl	8006b58 <_init>
 8005caa:	4c0a      	ldr	r4, [pc, #40]	@ (8005cd4 <__libc_init_array+0x40>)
 8005cac:	4d0a      	ldr	r5, [pc, #40]	@ (8005cd8 <__libc_init_array+0x44>)
 8005cae:	1b64      	subs	r4, r4, r5
 8005cb0:	10a4      	asrs	r4, r4, #2
 8005cb2:	42a6      	cmp	r6, r4
 8005cb4:	d105      	bne.n	8005cc2 <__libc_init_array+0x2e>
 8005cb6:	bd70      	pop	{r4, r5, r6, pc}
 8005cb8:	00b3      	lsls	r3, r6, #2
 8005cba:	58eb      	ldr	r3, [r5, r3]
 8005cbc:	4798      	blx	r3
 8005cbe:	3601      	adds	r6, #1
 8005cc0:	e7ee      	b.n	8005ca0 <__libc_init_array+0xc>
 8005cc2:	00b3      	lsls	r3, r6, #2
 8005cc4:	58eb      	ldr	r3, [r5, r3]
 8005cc6:	4798      	blx	r3
 8005cc8:	3601      	adds	r6, #1
 8005cca:	e7f2      	b.n	8005cb2 <__libc_init_array+0x1e>
 8005ccc:	08006d38 	.word	0x08006d38
 8005cd0:	08006d38 	.word	0x08006d38
 8005cd4:	08006d3c 	.word	0x08006d3c
 8005cd8:	08006d38 	.word	0x08006d38

08005cdc <__retarget_lock_init_recursive>:
 8005cdc:	4770      	bx	lr

08005cde <__retarget_lock_acquire_recursive>:
 8005cde:	4770      	bx	lr

08005ce0 <__retarget_lock_release_recursive>:
 8005ce0:	4770      	bx	lr

08005ce2 <memcpy>:
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	b510      	push	{r4, lr}
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d100      	bne.n	8005cec <memcpy+0xa>
 8005cea:	bd10      	pop	{r4, pc}
 8005cec:	5ccc      	ldrb	r4, [r1, r3]
 8005cee:	54c4      	strb	r4, [r0, r3]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	e7f8      	b.n	8005ce6 <memcpy+0x4>

08005cf4 <__assert_func>:
 8005cf4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8005cf6:	0014      	movs	r4, r2
 8005cf8:	001a      	movs	r2, r3
 8005cfa:	4b09      	ldr	r3, [pc, #36]	@ (8005d20 <__assert_func+0x2c>)
 8005cfc:	0005      	movs	r5, r0
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	000e      	movs	r6, r1
 8005d02:	68d8      	ldr	r0, [r3, #12]
 8005d04:	4b07      	ldr	r3, [pc, #28]	@ (8005d24 <__assert_func+0x30>)
 8005d06:	2c00      	cmp	r4, #0
 8005d08:	d101      	bne.n	8005d0e <__assert_func+0x1a>
 8005d0a:	4b07      	ldr	r3, [pc, #28]	@ (8005d28 <__assert_func+0x34>)
 8005d0c:	001c      	movs	r4, r3
 8005d0e:	4907      	ldr	r1, [pc, #28]	@ (8005d2c <__assert_func+0x38>)
 8005d10:	9301      	str	r3, [sp, #4]
 8005d12:	9402      	str	r4, [sp, #8]
 8005d14:	002b      	movs	r3, r5
 8005d16:	9600      	str	r6, [sp, #0]
 8005d18:	f000 f9c4 	bl	80060a4 <fiprintf>
 8005d1c:	f000 fa32 	bl	8006184 <abort>
 8005d20:	2000041c 	.word	0x2000041c
 8005d24:	08006cc7 	.word	0x08006cc7
 8005d28:	08006d02 	.word	0x08006d02
 8005d2c:	08006cd4 	.word	0x08006cd4

08005d30 <malloc>:
 8005d30:	b510      	push	{r4, lr}
 8005d32:	4b03      	ldr	r3, [pc, #12]	@ (8005d40 <malloc+0x10>)
 8005d34:	0001      	movs	r1, r0
 8005d36:	6818      	ldr	r0, [r3, #0]
 8005d38:	f000 f826 	bl	8005d88 <_malloc_r>
 8005d3c:	bd10      	pop	{r4, pc}
 8005d3e:	46c0      	nop			@ (mov r8, r8)
 8005d40:	2000041c 	.word	0x2000041c

08005d44 <sbrk_aligned>:
 8005d44:	b570      	push	{r4, r5, r6, lr}
 8005d46:	4e0f      	ldr	r6, [pc, #60]	@ (8005d84 <sbrk_aligned+0x40>)
 8005d48:	000d      	movs	r5, r1
 8005d4a:	6831      	ldr	r1, [r6, #0]
 8005d4c:	0004      	movs	r4, r0
 8005d4e:	2900      	cmp	r1, #0
 8005d50:	d102      	bne.n	8005d58 <sbrk_aligned+0x14>
 8005d52:	f000 f9f1 	bl	8006138 <_sbrk_r>
 8005d56:	6030      	str	r0, [r6, #0]
 8005d58:	0029      	movs	r1, r5
 8005d5a:	0020      	movs	r0, r4
 8005d5c:	f000 f9ec 	bl	8006138 <_sbrk_r>
 8005d60:	1c43      	adds	r3, r0, #1
 8005d62:	d103      	bne.n	8005d6c <sbrk_aligned+0x28>
 8005d64:	2501      	movs	r5, #1
 8005d66:	426d      	negs	r5, r5
 8005d68:	0028      	movs	r0, r5
 8005d6a:	bd70      	pop	{r4, r5, r6, pc}
 8005d6c:	2303      	movs	r3, #3
 8005d6e:	1cc5      	adds	r5, r0, #3
 8005d70:	439d      	bics	r5, r3
 8005d72:	42a8      	cmp	r0, r5
 8005d74:	d0f8      	beq.n	8005d68 <sbrk_aligned+0x24>
 8005d76:	1a29      	subs	r1, r5, r0
 8005d78:	0020      	movs	r0, r4
 8005d7a:	f000 f9dd 	bl	8006138 <_sbrk_r>
 8005d7e:	3001      	adds	r0, #1
 8005d80:	d1f2      	bne.n	8005d68 <sbrk_aligned+0x24>
 8005d82:	e7ef      	b.n	8005d64 <sbrk_aligned+0x20>
 8005d84:	20001398 	.word	0x20001398

08005d88 <_malloc_r>:
 8005d88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d8a:	2203      	movs	r2, #3
 8005d8c:	1ccb      	adds	r3, r1, #3
 8005d8e:	4393      	bics	r3, r2
 8005d90:	3308      	adds	r3, #8
 8005d92:	0005      	movs	r5, r0
 8005d94:	001f      	movs	r7, r3
 8005d96:	2b0c      	cmp	r3, #12
 8005d98:	d234      	bcs.n	8005e04 <_malloc_r+0x7c>
 8005d9a:	270c      	movs	r7, #12
 8005d9c:	42b9      	cmp	r1, r7
 8005d9e:	d833      	bhi.n	8005e08 <_malloc_r+0x80>
 8005da0:	0028      	movs	r0, r5
 8005da2:	f000 f923 	bl	8005fec <__malloc_lock>
 8005da6:	4e37      	ldr	r6, [pc, #220]	@ (8005e84 <_malloc_r+0xfc>)
 8005da8:	6833      	ldr	r3, [r6, #0]
 8005daa:	001c      	movs	r4, r3
 8005dac:	2c00      	cmp	r4, #0
 8005dae:	d12f      	bne.n	8005e10 <_malloc_r+0x88>
 8005db0:	0039      	movs	r1, r7
 8005db2:	0028      	movs	r0, r5
 8005db4:	f7ff ffc6 	bl	8005d44 <sbrk_aligned>
 8005db8:	0004      	movs	r4, r0
 8005dba:	1c43      	adds	r3, r0, #1
 8005dbc:	d15f      	bne.n	8005e7e <_malloc_r+0xf6>
 8005dbe:	6834      	ldr	r4, [r6, #0]
 8005dc0:	9400      	str	r4, [sp, #0]
 8005dc2:	9b00      	ldr	r3, [sp, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d14a      	bne.n	8005e5e <_malloc_r+0xd6>
 8005dc8:	2c00      	cmp	r4, #0
 8005dca:	d052      	beq.n	8005e72 <_malloc_r+0xea>
 8005dcc:	6823      	ldr	r3, [r4, #0]
 8005dce:	0028      	movs	r0, r5
 8005dd0:	18e3      	adds	r3, r4, r3
 8005dd2:	9900      	ldr	r1, [sp, #0]
 8005dd4:	9301      	str	r3, [sp, #4]
 8005dd6:	f000 f9af 	bl	8006138 <_sbrk_r>
 8005dda:	9b01      	ldr	r3, [sp, #4]
 8005ddc:	4283      	cmp	r3, r0
 8005dde:	d148      	bne.n	8005e72 <_malloc_r+0xea>
 8005de0:	6823      	ldr	r3, [r4, #0]
 8005de2:	0028      	movs	r0, r5
 8005de4:	1aff      	subs	r7, r7, r3
 8005de6:	0039      	movs	r1, r7
 8005de8:	f7ff ffac 	bl	8005d44 <sbrk_aligned>
 8005dec:	3001      	adds	r0, #1
 8005dee:	d040      	beq.n	8005e72 <_malloc_r+0xea>
 8005df0:	6823      	ldr	r3, [r4, #0]
 8005df2:	19db      	adds	r3, r3, r7
 8005df4:	6023      	str	r3, [r4, #0]
 8005df6:	6833      	ldr	r3, [r6, #0]
 8005df8:	685a      	ldr	r2, [r3, #4]
 8005dfa:	2a00      	cmp	r2, #0
 8005dfc:	d133      	bne.n	8005e66 <_malloc_r+0xde>
 8005dfe:	9b00      	ldr	r3, [sp, #0]
 8005e00:	6033      	str	r3, [r6, #0]
 8005e02:	e019      	b.n	8005e38 <_malloc_r+0xb0>
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	dac9      	bge.n	8005d9c <_malloc_r+0x14>
 8005e08:	230c      	movs	r3, #12
 8005e0a:	602b      	str	r3, [r5, #0]
 8005e0c:	2000      	movs	r0, #0
 8005e0e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005e10:	6821      	ldr	r1, [r4, #0]
 8005e12:	1bc9      	subs	r1, r1, r7
 8005e14:	d420      	bmi.n	8005e58 <_malloc_r+0xd0>
 8005e16:	290b      	cmp	r1, #11
 8005e18:	d90a      	bls.n	8005e30 <_malloc_r+0xa8>
 8005e1a:	19e2      	adds	r2, r4, r7
 8005e1c:	6027      	str	r7, [r4, #0]
 8005e1e:	42a3      	cmp	r3, r4
 8005e20:	d104      	bne.n	8005e2c <_malloc_r+0xa4>
 8005e22:	6032      	str	r2, [r6, #0]
 8005e24:	6863      	ldr	r3, [r4, #4]
 8005e26:	6011      	str	r1, [r2, #0]
 8005e28:	6053      	str	r3, [r2, #4]
 8005e2a:	e005      	b.n	8005e38 <_malloc_r+0xb0>
 8005e2c:	605a      	str	r2, [r3, #4]
 8005e2e:	e7f9      	b.n	8005e24 <_malloc_r+0x9c>
 8005e30:	6862      	ldr	r2, [r4, #4]
 8005e32:	42a3      	cmp	r3, r4
 8005e34:	d10e      	bne.n	8005e54 <_malloc_r+0xcc>
 8005e36:	6032      	str	r2, [r6, #0]
 8005e38:	0028      	movs	r0, r5
 8005e3a:	f000 f8df 	bl	8005ffc <__malloc_unlock>
 8005e3e:	0020      	movs	r0, r4
 8005e40:	2207      	movs	r2, #7
 8005e42:	300b      	adds	r0, #11
 8005e44:	1d23      	adds	r3, r4, #4
 8005e46:	4390      	bics	r0, r2
 8005e48:	1ac2      	subs	r2, r0, r3
 8005e4a:	4298      	cmp	r0, r3
 8005e4c:	d0df      	beq.n	8005e0e <_malloc_r+0x86>
 8005e4e:	1a1b      	subs	r3, r3, r0
 8005e50:	50a3      	str	r3, [r4, r2]
 8005e52:	e7dc      	b.n	8005e0e <_malloc_r+0x86>
 8005e54:	605a      	str	r2, [r3, #4]
 8005e56:	e7ef      	b.n	8005e38 <_malloc_r+0xb0>
 8005e58:	0023      	movs	r3, r4
 8005e5a:	6864      	ldr	r4, [r4, #4]
 8005e5c:	e7a6      	b.n	8005dac <_malloc_r+0x24>
 8005e5e:	9c00      	ldr	r4, [sp, #0]
 8005e60:	6863      	ldr	r3, [r4, #4]
 8005e62:	9300      	str	r3, [sp, #0]
 8005e64:	e7ad      	b.n	8005dc2 <_malloc_r+0x3a>
 8005e66:	001a      	movs	r2, r3
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	42a3      	cmp	r3, r4
 8005e6c:	d1fb      	bne.n	8005e66 <_malloc_r+0xde>
 8005e6e:	2300      	movs	r3, #0
 8005e70:	e7da      	b.n	8005e28 <_malloc_r+0xa0>
 8005e72:	230c      	movs	r3, #12
 8005e74:	0028      	movs	r0, r5
 8005e76:	602b      	str	r3, [r5, #0]
 8005e78:	f000 f8c0 	bl	8005ffc <__malloc_unlock>
 8005e7c:	e7c6      	b.n	8005e0c <_malloc_r+0x84>
 8005e7e:	6007      	str	r7, [r0, #0]
 8005e80:	e7da      	b.n	8005e38 <_malloc_r+0xb0>
 8005e82:	46c0      	nop			@ (mov r8, r8)
 8005e84:	2000139c 	.word	0x2000139c

08005e88 <__sflush_r>:
 8005e88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e8a:	220c      	movs	r2, #12
 8005e8c:	5e8b      	ldrsh	r3, [r1, r2]
 8005e8e:	0005      	movs	r5, r0
 8005e90:	000c      	movs	r4, r1
 8005e92:	071a      	lsls	r2, r3, #28
 8005e94:	d456      	bmi.n	8005f44 <__sflush_r+0xbc>
 8005e96:	684a      	ldr	r2, [r1, #4]
 8005e98:	2a00      	cmp	r2, #0
 8005e9a:	dc02      	bgt.n	8005ea2 <__sflush_r+0x1a>
 8005e9c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8005e9e:	2a00      	cmp	r2, #0
 8005ea0:	dd4e      	ble.n	8005f40 <__sflush_r+0xb8>
 8005ea2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8005ea4:	2f00      	cmp	r7, #0
 8005ea6:	d04b      	beq.n	8005f40 <__sflush_r+0xb8>
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	2080      	movs	r0, #128	@ 0x80
 8005eac:	682e      	ldr	r6, [r5, #0]
 8005eae:	602a      	str	r2, [r5, #0]
 8005eb0:	001a      	movs	r2, r3
 8005eb2:	0140      	lsls	r0, r0, #5
 8005eb4:	6a21      	ldr	r1, [r4, #32]
 8005eb6:	4002      	ands	r2, r0
 8005eb8:	4203      	tst	r3, r0
 8005eba:	d033      	beq.n	8005f24 <__sflush_r+0x9c>
 8005ebc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005ebe:	89a3      	ldrh	r3, [r4, #12]
 8005ec0:	075b      	lsls	r3, r3, #29
 8005ec2:	d506      	bpl.n	8005ed2 <__sflush_r+0x4a>
 8005ec4:	6863      	ldr	r3, [r4, #4]
 8005ec6:	1ad2      	subs	r2, r2, r3
 8005ec8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d001      	beq.n	8005ed2 <__sflush_r+0x4a>
 8005ece:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005ed0:	1ad2      	subs	r2, r2, r3
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	0028      	movs	r0, r5
 8005ed6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8005ed8:	6a21      	ldr	r1, [r4, #32]
 8005eda:	47b8      	blx	r7
 8005edc:	89a2      	ldrh	r2, [r4, #12]
 8005ede:	1c43      	adds	r3, r0, #1
 8005ee0:	d106      	bne.n	8005ef0 <__sflush_r+0x68>
 8005ee2:	6829      	ldr	r1, [r5, #0]
 8005ee4:	291d      	cmp	r1, #29
 8005ee6:	d846      	bhi.n	8005f76 <__sflush_r+0xee>
 8005ee8:	4b29      	ldr	r3, [pc, #164]	@ (8005f90 <__sflush_r+0x108>)
 8005eea:	410b      	asrs	r3, r1
 8005eec:	07db      	lsls	r3, r3, #31
 8005eee:	d442      	bmi.n	8005f76 <__sflush_r+0xee>
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	6063      	str	r3, [r4, #4]
 8005ef4:	6923      	ldr	r3, [r4, #16]
 8005ef6:	6023      	str	r3, [r4, #0]
 8005ef8:	04d2      	lsls	r2, r2, #19
 8005efa:	d505      	bpl.n	8005f08 <__sflush_r+0x80>
 8005efc:	1c43      	adds	r3, r0, #1
 8005efe:	d102      	bne.n	8005f06 <__sflush_r+0x7e>
 8005f00:	682b      	ldr	r3, [r5, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d100      	bne.n	8005f08 <__sflush_r+0x80>
 8005f06:	6560      	str	r0, [r4, #84]	@ 0x54
 8005f08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005f0a:	602e      	str	r6, [r5, #0]
 8005f0c:	2900      	cmp	r1, #0
 8005f0e:	d017      	beq.n	8005f40 <__sflush_r+0xb8>
 8005f10:	0023      	movs	r3, r4
 8005f12:	3344      	adds	r3, #68	@ 0x44
 8005f14:	4299      	cmp	r1, r3
 8005f16:	d002      	beq.n	8005f1e <__sflush_r+0x96>
 8005f18:	0028      	movs	r0, r5
 8005f1a:	f000 f93b 	bl	8006194 <_free_r>
 8005f1e:	2300      	movs	r3, #0
 8005f20:	6363      	str	r3, [r4, #52]	@ 0x34
 8005f22:	e00d      	b.n	8005f40 <__sflush_r+0xb8>
 8005f24:	2301      	movs	r3, #1
 8005f26:	0028      	movs	r0, r5
 8005f28:	47b8      	blx	r7
 8005f2a:	0002      	movs	r2, r0
 8005f2c:	1c43      	adds	r3, r0, #1
 8005f2e:	d1c6      	bne.n	8005ebe <__sflush_r+0x36>
 8005f30:	682b      	ldr	r3, [r5, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d0c3      	beq.n	8005ebe <__sflush_r+0x36>
 8005f36:	2b1d      	cmp	r3, #29
 8005f38:	d001      	beq.n	8005f3e <__sflush_r+0xb6>
 8005f3a:	2b16      	cmp	r3, #22
 8005f3c:	d11a      	bne.n	8005f74 <__sflush_r+0xec>
 8005f3e:	602e      	str	r6, [r5, #0]
 8005f40:	2000      	movs	r0, #0
 8005f42:	e01e      	b.n	8005f82 <__sflush_r+0xfa>
 8005f44:	690e      	ldr	r6, [r1, #16]
 8005f46:	2e00      	cmp	r6, #0
 8005f48:	d0fa      	beq.n	8005f40 <__sflush_r+0xb8>
 8005f4a:	680f      	ldr	r7, [r1, #0]
 8005f4c:	600e      	str	r6, [r1, #0]
 8005f4e:	1bba      	subs	r2, r7, r6
 8005f50:	9201      	str	r2, [sp, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	079b      	lsls	r3, r3, #30
 8005f56:	d100      	bne.n	8005f5a <__sflush_r+0xd2>
 8005f58:	694a      	ldr	r2, [r1, #20]
 8005f5a:	60a2      	str	r2, [r4, #8]
 8005f5c:	9b01      	ldr	r3, [sp, #4]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	ddee      	ble.n	8005f40 <__sflush_r+0xb8>
 8005f62:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005f64:	0032      	movs	r2, r6
 8005f66:	001f      	movs	r7, r3
 8005f68:	0028      	movs	r0, r5
 8005f6a:	9b01      	ldr	r3, [sp, #4]
 8005f6c:	6a21      	ldr	r1, [r4, #32]
 8005f6e:	47b8      	blx	r7
 8005f70:	2800      	cmp	r0, #0
 8005f72:	dc07      	bgt.n	8005f84 <__sflush_r+0xfc>
 8005f74:	89a2      	ldrh	r2, [r4, #12]
 8005f76:	2340      	movs	r3, #64	@ 0x40
 8005f78:	2001      	movs	r0, #1
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	b21b      	sxth	r3, r3
 8005f7e:	81a3      	strh	r3, [r4, #12]
 8005f80:	4240      	negs	r0, r0
 8005f82:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005f84:	9b01      	ldr	r3, [sp, #4]
 8005f86:	1836      	adds	r6, r6, r0
 8005f88:	1a1b      	subs	r3, r3, r0
 8005f8a:	9301      	str	r3, [sp, #4]
 8005f8c:	e7e6      	b.n	8005f5c <__sflush_r+0xd4>
 8005f8e:	46c0      	nop			@ (mov r8, r8)
 8005f90:	dfbffffe 	.word	0xdfbffffe

08005f94 <_fflush_r>:
 8005f94:	690b      	ldr	r3, [r1, #16]
 8005f96:	b570      	push	{r4, r5, r6, lr}
 8005f98:	0005      	movs	r5, r0
 8005f9a:	000c      	movs	r4, r1
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d102      	bne.n	8005fa6 <_fflush_r+0x12>
 8005fa0:	2500      	movs	r5, #0
 8005fa2:	0028      	movs	r0, r5
 8005fa4:	bd70      	pop	{r4, r5, r6, pc}
 8005fa6:	2800      	cmp	r0, #0
 8005fa8:	d004      	beq.n	8005fb4 <_fflush_r+0x20>
 8005faa:	6a03      	ldr	r3, [r0, #32]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d101      	bne.n	8005fb4 <_fflush_r+0x20>
 8005fb0:	f7ff fe00 	bl	8005bb4 <__sinit>
 8005fb4:	220c      	movs	r2, #12
 8005fb6:	5ea3      	ldrsh	r3, [r4, r2]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d0f1      	beq.n	8005fa0 <_fflush_r+0xc>
 8005fbc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005fbe:	07d2      	lsls	r2, r2, #31
 8005fc0:	d404      	bmi.n	8005fcc <_fflush_r+0x38>
 8005fc2:	059b      	lsls	r3, r3, #22
 8005fc4:	d402      	bmi.n	8005fcc <_fflush_r+0x38>
 8005fc6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005fc8:	f7ff fe89 	bl	8005cde <__retarget_lock_acquire_recursive>
 8005fcc:	0028      	movs	r0, r5
 8005fce:	0021      	movs	r1, r4
 8005fd0:	f7ff ff5a 	bl	8005e88 <__sflush_r>
 8005fd4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005fd6:	0005      	movs	r5, r0
 8005fd8:	07db      	lsls	r3, r3, #31
 8005fda:	d4e2      	bmi.n	8005fa2 <_fflush_r+0xe>
 8005fdc:	89a3      	ldrh	r3, [r4, #12]
 8005fde:	059b      	lsls	r3, r3, #22
 8005fe0:	d4df      	bmi.n	8005fa2 <_fflush_r+0xe>
 8005fe2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005fe4:	f7ff fe7c 	bl	8005ce0 <__retarget_lock_release_recursive>
 8005fe8:	e7db      	b.n	8005fa2 <_fflush_r+0xe>
	...

08005fec <__malloc_lock>:
 8005fec:	b510      	push	{r4, lr}
 8005fee:	4802      	ldr	r0, [pc, #8]	@ (8005ff8 <__malloc_lock+0xc>)
 8005ff0:	f7ff fe75 	bl	8005cde <__retarget_lock_acquire_recursive>
 8005ff4:	bd10      	pop	{r4, pc}
 8005ff6:	46c0      	nop			@ (mov r8, r8)
 8005ff8:	20001394 	.word	0x20001394

08005ffc <__malloc_unlock>:
 8005ffc:	b510      	push	{r4, lr}
 8005ffe:	4802      	ldr	r0, [pc, #8]	@ (8006008 <__malloc_unlock+0xc>)
 8006000:	f7ff fe6e 	bl	8005ce0 <__retarget_lock_release_recursive>
 8006004:	bd10      	pop	{r4, pc}
 8006006:	46c0      	nop			@ (mov r8, r8)
 8006008:	20001394 	.word	0x20001394

0800600c <__sread>:
 800600c:	b570      	push	{r4, r5, r6, lr}
 800600e:	000c      	movs	r4, r1
 8006010:	250e      	movs	r5, #14
 8006012:	5f49      	ldrsh	r1, [r1, r5]
 8006014:	f000 f87c 	bl	8006110 <_read_r>
 8006018:	2800      	cmp	r0, #0
 800601a:	db03      	blt.n	8006024 <__sread+0x18>
 800601c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800601e:	181b      	adds	r3, r3, r0
 8006020:	6563      	str	r3, [r4, #84]	@ 0x54
 8006022:	bd70      	pop	{r4, r5, r6, pc}
 8006024:	89a3      	ldrh	r3, [r4, #12]
 8006026:	4a02      	ldr	r2, [pc, #8]	@ (8006030 <__sread+0x24>)
 8006028:	4013      	ands	r3, r2
 800602a:	81a3      	strh	r3, [r4, #12]
 800602c:	e7f9      	b.n	8006022 <__sread+0x16>
 800602e:	46c0      	nop			@ (mov r8, r8)
 8006030:	ffffefff 	.word	0xffffefff

08006034 <__swrite>:
 8006034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006036:	001f      	movs	r7, r3
 8006038:	898b      	ldrh	r3, [r1, #12]
 800603a:	0005      	movs	r5, r0
 800603c:	000c      	movs	r4, r1
 800603e:	0016      	movs	r6, r2
 8006040:	05db      	lsls	r3, r3, #23
 8006042:	d505      	bpl.n	8006050 <__swrite+0x1c>
 8006044:	230e      	movs	r3, #14
 8006046:	5ec9      	ldrsh	r1, [r1, r3]
 8006048:	2200      	movs	r2, #0
 800604a:	2302      	movs	r3, #2
 800604c:	f000 f84c 	bl	80060e8 <_lseek_r>
 8006050:	89a3      	ldrh	r3, [r4, #12]
 8006052:	4a05      	ldr	r2, [pc, #20]	@ (8006068 <__swrite+0x34>)
 8006054:	0028      	movs	r0, r5
 8006056:	4013      	ands	r3, r2
 8006058:	81a3      	strh	r3, [r4, #12]
 800605a:	0032      	movs	r2, r6
 800605c:	230e      	movs	r3, #14
 800605e:	5ee1      	ldrsh	r1, [r4, r3]
 8006060:	003b      	movs	r3, r7
 8006062:	f000 f87b 	bl	800615c <_write_r>
 8006066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006068:	ffffefff 	.word	0xffffefff

0800606c <__sseek>:
 800606c:	b570      	push	{r4, r5, r6, lr}
 800606e:	000c      	movs	r4, r1
 8006070:	250e      	movs	r5, #14
 8006072:	5f49      	ldrsh	r1, [r1, r5]
 8006074:	f000 f838 	bl	80060e8 <_lseek_r>
 8006078:	89a3      	ldrh	r3, [r4, #12]
 800607a:	1c42      	adds	r2, r0, #1
 800607c:	d103      	bne.n	8006086 <__sseek+0x1a>
 800607e:	4a05      	ldr	r2, [pc, #20]	@ (8006094 <__sseek+0x28>)
 8006080:	4013      	ands	r3, r2
 8006082:	81a3      	strh	r3, [r4, #12]
 8006084:	bd70      	pop	{r4, r5, r6, pc}
 8006086:	2280      	movs	r2, #128	@ 0x80
 8006088:	0152      	lsls	r2, r2, #5
 800608a:	4313      	orrs	r3, r2
 800608c:	81a3      	strh	r3, [r4, #12]
 800608e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006090:	e7f8      	b.n	8006084 <__sseek+0x18>
 8006092:	46c0      	nop			@ (mov r8, r8)
 8006094:	ffffefff 	.word	0xffffefff

08006098 <__sclose>:
 8006098:	b510      	push	{r4, lr}
 800609a:	230e      	movs	r3, #14
 800609c:	5ec9      	ldrsh	r1, [r1, r3]
 800609e:	f000 f811 	bl	80060c4 <_close_r>
 80060a2:	bd10      	pop	{r4, pc}

080060a4 <fiprintf>:
 80060a4:	b40e      	push	{r1, r2, r3}
 80060a6:	b517      	push	{r0, r1, r2, r4, lr}
 80060a8:	4c05      	ldr	r4, [pc, #20]	@ (80060c0 <fiprintf+0x1c>)
 80060aa:	ab05      	add	r3, sp, #20
 80060ac:	cb04      	ldmia	r3!, {r2}
 80060ae:	0001      	movs	r1, r0
 80060b0:	6820      	ldr	r0, [r4, #0]
 80060b2:	9301      	str	r3, [sp, #4]
 80060b4:	f000 f8e0 	bl	8006278 <_vfiprintf_r>
 80060b8:	bc1e      	pop	{r1, r2, r3, r4}
 80060ba:	bc08      	pop	{r3}
 80060bc:	b003      	add	sp, #12
 80060be:	4718      	bx	r3
 80060c0:	2000041c 	.word	0x2000041c

080060c4 <_close_r>:
 80060c4:	2300      	movs	r3, #0
 80060c6:	b570      	push	{r4, r5, r6, lr}
 80060c8:	4d06      	ldr	r5, [pc, #24]	@ (80060e4 <_close_r+0x20>)
 80060ca:	0004      	movs	r4, r0
 80060cc:	0008      	movs	r0, r1
 80060ce:	602b      	str	r3, [r5, #0]
 80060d0:	f7fb fdca 	bl	8001c68 <_close>
 80060d4:	1c43      	adds	r3, r0, #1
 80060d6:	d103      	bne.n	80060e0 <_close_r+0x1c>
 80060d8:	682b      	ldr	r3, [r5, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d000      	beq.n	80060e0 <_close_r+0x1c>
 80060de:	6023      	str	r3, [r4, #0]
 80060e0:	bd70      	pop	{r4, r5, r6, pc}
 80060e2:	46c0      	nop			@ (mov r8, r8)
 80060e4:	200013a0 	.word	0x200013a0

080060e8 <_lseek_r>:
 80060e8:	b570      	push	{r4, r5, r6, lr}
 80060ea:	0004      	movs	r4, r0
 80060ec:	0008      	movs	r0, r1
 80060ee:	0011      	movs	r1, r2
 80060f0:	001a      	movs	r2, r3
 80060f2:	2300      	movs	r3, #0
 80060f4:	4d05      	ldr	r5, [pc, #20]	@ (800610c <_lseek_r+0x24>)
 80060f6:	602b      	str	r3, [r5, #0]
 80060f8:	f7fb fdd7 	bl	8001caa <_lseek>
 80060fc:	1c43      	adds	r3, r0, #1
 80060fe:	d103      	bne.n	8006108 <_lseek_r+0x20>
 8006100:	682b      	ldr	r3, [r5, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d000      	beq.n	8006108 <_lseek_r+0x20>
 8006106:	6023      	str	r3, [r4, #0]
 8006108:	bd70      	pop	{r4, r5, r6, pc}
 800610a:	46c0      	nop			@ (mov r8, r8)
 800610c:	200013a0 	.word	0x200013a0

08006110 <_read_r>:
 8006110:	b570      	push	{r4, r5, r6, lr}
 8006112:	0004      	movs	r4, r0
 8006114:	0008      	movs	r0, r1
 8006116:	0011      	movs	r1, r2
 8006118:	001a      	movs	r2, r3
 800611a:	2300      	movs	r3, #0
 800611c:	4d05      	ldr	r5, [pc, #20]	@ (8006134 <_read_r+0x24>)
 800611e:	602b      	str	r3, [r5, #0]
 8006120:	f7fb fd69 	bl	8001bf6 <_read>
 8006124:	1c43      	adds	r3, r0, #1
 8006126:	d103      	bne.n	8006130 <_read_r+0x20>
 8006128:	682b      	ldr	r3, [r5, #0]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d000      	beq.n	8006130 <_read_r+0x20>
 800612e:	6023      	str	r3, [r4, #0]
 8006130:	bd70      	pop	{r4, r5, r6, pc}
 8006132:	46c0      	nop			@ (mov r8, r8)
 8006134:	200013a0 	.word	0x200013a0

08006138 <_sbrk_r>:
 8006138:	2300      	movs	r3, #0
 800613a:	b570      	push	{r4, r5, r6, lr}
 800613c:	4d06      	ldr	r5, [pc, #24]	@ (8006158 <_sbrk_r+0x20>)
 800613e:	0004      	movs	r4, r0
 8006140:	0008      	movs	r0, r1
 8006142:	602b      	str	r3, [r5, #0]
 8006144:	f7fb fdbc 	bl	8001cc0 <_sbrk>
 8006148:	1c43      	adds	r3, r0, #1
 800614a:	d103      	bne.n	8006154 <_sbrk_r+0x1c>
 800614c:	682b      	ldr	r3, [r5, #0]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d000      	beq.n	8006154 <_sbrk_r+0x1c>
 8006152:	6023      	str	r3, [r4, #0]
 8006154:	bd70      	pop	{r4, r5, r6, pc}
 8006156:	46c0      	nop			@ (mov r8, r8)
 8006158:	200013a0 	.word	0x200013a0

0800615c <_write_r>:
 800615c:	b570      	push	{r4, r5, r6, lr}
 800615e:	0004      	movs	r4, r0
 8006160:	0008      	movs	r0, r1
 8006162:	0011      	movs	r1, r2
 8006164:	001a      	movs	r2, r3
 8006166:	2300      	movs	r3, #0
 8006168:	4d05      	ldr	r5, [pc, #20]	@ (8006180 <_write_r+0x24>)
 800616a:	602b      	str	r3, [r5, #0]
 800616c:	f7fb fd60 	bl	8001c30 <_write>
 8006170:	1c43      	adds	r3, r0, #1
 8006172:	d103      	bne.n	800617c <_write_r+0x20>
 8006174:	682b      	ldr	r3, [r5, #0]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d000      	beq.n	800617c <_write_r+0x20>
 800617a:	6023      	str	r3, [r4, #0]
 800617c:	bd70      	pop	{r4, r5, r6, pc}
 800617e:	46c0      	nop			@ (mov r8, r8)
 8006180:	200013a0 	.word	0x200013a0

08006184 <abort>:
 8006184:	2006      	movs	r0, #6
 8006186:	b510      	push	{r4, lr}
 8006188:	f000 fc6a 	bl	8006a60 <raise>
 800618c:	2001      	movs	r0, #1
 800618e:	f7fb fd25 	bl	8001bdc <_exit>
	...

08006194 <_free_r>:
 8006194:	b570      	push	{r4, r5, r6, lr}
 8006196:	0005      	movs	r5, r0
 8006198:	1e0c      	subs	r4, r1, #0
 800619a:	d010      	beq.n	80061be <_free_r+0x2a>
 800619c:	3c04      	subs	r4, #4
 800619e:	6823      	ldr	r3, [r4, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	da00      	bge.n	80061a6 <_free_r+0x12>
 80061a4:	18e4      	adds	r4, r4, r3
 80061a6:	0028      	movs	r0, r5
 80061a8:	f7ff ff20 	bl	8005fec <__malloc_lock>
 80061ac:	4a1d      	ldr	r2, [pc, #116]	@ (8006224 <_free_r+0x90>)
 80061ae:	6813      	ldr	r3, [r2, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d105      	bne.n	80061c0 <_free_r+0x2c>
 80061b4:	6063      	str	r3, [r4, #4]
 80061b6:	6014      	str	r4, [r2, #0]
 80061b8:	0028      	movs	r0, r5
 80061ba:	f7ff ff1f 	bl	8005ffc <__malloc_unlock>
 80061be:	bd70      	pop	{r4, r5, r6, pc}
 80061c0:	42a3      	cmp	r3, r4
 80061c2:	d908      	bls.n	80061d6 <_free_r+0x42>
 80061c4:	6820      	ldr	r0, [r4, #0]
 80061c6:	1821      	adds	r1, r4, r0
 80061c8:	428b      	cmp	r3, r1
 80061ca:	d1f3      	bne.n	80061b4 <_free_r+0x20>
 80061cc:	6819      	ldr	r1, [r3, #0]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	1809      	adds	r1, r1, r0
 80061d2:	6021      	str	r1, [r4, #0]
 80061d4:	e7ee      	b.n	80061b4 <_free_r+0x20>
 80061d6:	001a      	movs	r2, r3
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d001      	beq.n	80061e2 <_free_r+0x4e>
 80061de:	42a3      	cmp	r3, r4
 80061e0:	d9f9      	bls.n	80061d6 <_free_r+0x42>
 80061e2:	6811      	ldr	r1, [r2, #0]
 80061e4:	1850      	adds	r0, r2, r1
 80061e6:	42a0      	cmp	r0, r4
 80061e8:	d10b      	bne.n	8006202 <_free_r+0x6e>
 80061ea:	6820      	ldr	r0, [r4, #0]
 80061ec:	1809      	adds	r1, r1, r0
 80061ee:	1850      	adds	r0, r2, r1
 80061f0:	6011      	str	r1, [r2, #0]
 80061f2:	4283      	cmp	r3, r0
 80061f4:	d1e0      	bne.n	80061b8 <_free_r+0x24>
 80061f6:	6818      	ldr	r0, [r3, #0]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	1841      	adds	r1, r0, r1
 80061fc:	6011      	str	r1, [r2, #0]
 80061fe:	6053      	str	r3, [r2, #4]
 8006200:	e7da      	b.n	80061b8 <_free_r+0x24>
 8006202:	42a0      	cmp	r0, r4
 8006204:	d902      	bls.n	800620c <_free_r+0x78>
 8006206:	230c      	movs	r3, #12
 8006208:	602b      	str	r3, [r5, #0]
 800620a:	e7d5      	b.n	80061b8 <_free_r+0x24>
 800620c:	6820      	ldr	r0, [r4, #0]
 800620e:	1821      	adds	r1, r4, r0
 8006210:	428b      	cmp	r3, r1
 8006212:	d103      	bne.n	800621c <_free_r+0x88>
 8006214:	6819      	ldr	r1, [r3, #0]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	1809      	adds	r1, r1, r0
 800621a:	6021      	str	r1, [r4, #0]
 800621c:	6063      	str	r3, [r4, #4]
 800621e:	6054      	str	r4, [r2, #4]
 8006220:	e7ca      	b.n	80061b8 <_free_r+0x24>
 8006222:	46c0      	nop			@ (mov r8, r8)
 8006224:	2000139c 	.word	0x2000139c

08006228 <__sfputc_r>:
 8006228:	6893      	ldr	r3, [r2, #8]
 800622a:	b510      	push	{r4, lr}
 800622c:	3b01      	subs	r3, #1
 800622e:	6093      	str	r3, [r2, #8]
 8006230:	2b00      	cmp	r3, #0
 8006232:	da04      	bge.n	800623e <__sfputc_r+0x16>
 8006234:	6994      	ldr	r4, [r2, #24]
 8006236:	42a3      	cmp	r3, r4
 8006238:	db07      	blt.n	800624a <__sfputc_r+0x22>
 800623a:	290a      	cmp	r1, #10
 800623c:	d005      	beq.n	800624a <__sfputc_r+0x22>
 800623e:	6813      	ldr	r3, [r2, #0]
 8006240:	1c58      	adds	r0, r3, #1
 8006242:	6010      	str	r0, [r2, #0]
 8006244:	7019      	strb	r1, [r3, #0]
 8006246:	0008      	movs	r0, r1
 8006248:	bd10      	pop	{r4, pc}
 800624a:	f000 faaf 	bl	80067ac <__swbuf_r>
 800624e:	0001      	movs	r1, r0
 8006250:	e7f9      	b.n	8006246 <__sfputc_r+0x1e>

08006252 <__sfputs_r>:
 8006252:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006254:	0006      	movs	r6, r0
 8006256:	000f      	movs	r7, r1
 8006258:	0014      	movs	r4, r2
 800625a:	18d5      	adds	r5, r2, r3
 800625c:	42ac      	cmp	r4, r5
 800625e:	d101      	bne.n	8006264 <__sfputs_r+0x12>
 8006260:	2000      	movs	r0, #0
 8006262:	e007      	b.n	8006274 <__sfputs_r+0x22>
 8006264:	7821      	ldrb	r1, [r4, #0]
 8006266:	003a      	movs	r2, r7
 8006268:	0030      	movs	r0, r6
 800626a:	f7ff ffdd 	bl	8006228 <__sfputc_r>
 800626e:	3401      	adds	r4, #1
 8006270:	1c43      	adds	r3, r0, #1
 8006272:	d1f3      	bne.n	800625c <__sfputs_r+0xa>
 8006274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006278 <_vfiprintf_r>:
 8006278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800627a:	b0a1      	sub	sp, #132	@ 0x84
 800627c:	000f      	movs	r7, r1
 800627e:	0015      	movs	r5, r2
 8006280:	001e      	movs	r6, r3
 8006282:	9003      	str	r0, [sp, #12]
 8006284:	2800      	cmp	r0, #0
 8006286:	d004      	beq.n	8006292 <_vfiprintf_r+0x1a>
 8006288:	6a03      	ldr	r3, [r0, #32]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d101      	bne.n	8006292 <_vfiprintf_r+0x1a>
 800628e:	f7ff fc91 	bl	8005bb4 <__sinit>
 8006292:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006294:	07db      	lsls	r3, r3, #31
 8006296:	d405      	bmi.n	80062a4 <_vfiprintf_r+0x2c>
 8006298:	89bb      	ldrh	r3, [r7, #12]
 800629a:	059b      	lsls	r3, r3, #22
 800629c:	d402      	bmi.n	80062a4 <_vfiprintf_r+0x2c>
 800629e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80062a0:	f7ff fd1d 	bl	8005cde <__retarget_lock_acquire_recursive>
 80062a4:	89bb      	ldrh	r3, [r7, #12]
 80062a6:	071b      	lsls	r3, r3, #28
 80062a8:	d502      	bpl.n	80062b0 <_vfiprintf_r+0x38>
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d113      	bne.n	80062d8 <_vfiprintf_r+0x60>
 80062b0:	0039      	movs	r1, r7
 80062b2:	9803      	ldr	r0, [sp, #12]
 80062b4:	f000 fabc 	bl	8006830 <__swsetup_r>
 80062b8:	2800      	cmp	r0, #0
 80062ba:	d00d      	beq.n	80062d8 <_vfiprintf_r+0x60>
 80062bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80062be:	07db      	lsls	r3, r3, #31
 80062c0:	d503      	bpl.n	80062ca <_vfiprintf_r+0x52>
 80062c2:	2001      	movs	r0, #1
 80062c4:	4240      	negs	r0, r0
 80062c6:	b021      	add	sp, #132	@ 0x84
 80062c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062ca:	89bb      	ldrh	r3, [r7, #12]
 80062cc:	059b      	lsls	r3, r3, #22
 80062ce:	d4f8      	bmi.n	80062c2 <_vfiprintf_r+0x4a>
 80062d0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80062d2:	f7ff fd05 	bl	8005ce0 <__retarget_lock_release_recursive>
 80062d6:	e7f4      	b.n	80062c2 <_vfiprintf_r+0x4a>
 80062d8:	2300      	movs	r3, #0
 80062da:	ac08      	add	r4, sp, #32
 80062dc:	6163      	str	r3, [r4, #20]
 80062de:	3320      	adds	r3, #32
 80062e0:	7663      	strb	r3, [r4, #25]
 80062e2:	3310      	adds	r3, #16
 80062e4:	76a3      	strb	r3, [r4, #26]
 80062e6:	9607      	str	r6, [sp, #28]
 80062e8:	002e      	movs	r6, r5
 80062ea:	7833      	ldrb	r3, [r6, #0]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d001      	beq.n	80062f4 <_vfiprintf_r+0x7c>
 80062f0:	2b25      	cmp	r3, #37	@ 0x25
 80062f2:	d148      	bne.n	8006386 <_vfiprintf_r+0x10e>
 80062f4:	1b73      	subs	r3, r6, r5
 80062f6:	9305      	str	r3, [sp, #20]
 80062f8:	42ae      	cmp	r6, r5
 80062fa:	d00b      	beq.n	8006314 <_vfiprintf_r+0x9c>
 80062fc:	002a      	movs	r2, r5
 80062fe:	0039      	movs	r1, r7
 8006300:	9803      	ldr	r0, [sp, #12]
 8006302:	f7ff ffa6 	bl	8006252 <__sfputs_r>
 8006306:	3001      	adds	r0, #1
 8006308:	d100      	bne.n	800630c <_vfiprintf_r+0x94>
 800630a:	e0ae      	b.n	800646a <_vfiprintf_r+0x1f2>
 800630c:	6963      	ldr	r3, [r4, #20]
 800630e:	9a05      	ldr	r2, [sp, #20]
 8006310:	189b      	adds	r3, r3, r2
 8006312:	6163      	str	r3, [r4, #20]
 8006314:	7833      	ldrb	r3, [r6, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d100      	bne.n	800631c <_vfiprintf_r+0xa4>
 800631a:	e0a6      	b.n	800646a <_vfiprintf_r+0x1f2>
 800631c:	2201      	movs	r2, #1
 800631e:	2300      	movs	r3, #0
 8006320:	4252      	negs	r2, r2
 8006322:	6062      	str	r2, [r4, #4]
 8006324:	a904      	add	r1, sp, #16
 8006326:	3254      	adds	r2, #84	@ 0x54
 8006328:	1852      	adds	r2, r2, r1
 800632a:	1c75      	adds	r5, r6, #1
 800632c:	6023      	str	r3, [r4, #0]
 800632e:	60e3      	str	r3, [r4, #12]
 8006330:	60a3      	str	r3, [r4, #8]
 8006332:	7013      	strb	r3, [r2, #0]
 8006334:	65a3      	str	r3, [r4, #88]	@ 0x58
 8006336:	4b59      	ldr	r3, [pc, #356]	@ (800649c <_vfiprintf_r+0x224>)
 8006338:	2205      	movs	r2, #5
 800633a:	0018      	movs	r0, r3
 800633c:	7829      	ldrb	r1, [r5, #0]
 800633e:	9305      	str	r3, [sp, #20]
 8006340:	f000 fbae 	bl	8006aa0 <memchr>
 8006344:	1c6e      	adds	r6, r5, #1
 8006346:	2800      	cmp	r0, #0
 8006348:	d11f      	bne.n	800638a <_vfiprintf_r+0x112>
 800634a:	6822      	ldr	r2, [r4, #0]
 800634c:	06d3      	lsls	r3, r2, #27
 800634e:	d504      	bpl.n	800635a <_vfiprintf_r+0xe2>
 8006350:	2353      	movs	r3, #83	@ 0x53
 8006352:	a904      	add	r1, sp, #16
 8006354:	185b      	adds	r3, r3, r1
 8006356:	2120      	movs	r1, #32
 8006358:	7019      	strb	r1, [r3, #0]
 800635a:	0713      	lsls	r3, r2, #28
 800635c:	d504      	bpl.n	8006368 <_vfiprintf_r+0xf0>
 800635e:	2353      	movs	r3, #83	@ 0x53
 8006360:	a904      	add	r1, sp, #16
 8006362:	185b      	adds	r3, r3, r1
 8006364:	212b      	movs	r1, #43	@ 0x2b
 8006366:	7019      	strb	r1, [r3, #0]
 8006368:	782b      	ldrb	r3, [r5, #0]
 800636a:	2b2a      	cmp	r3, #42	@ 0x2a
 800636c:	d016      	beq.n	800639c <_vfiprintf_r+0x124>
 800636e:	002e      	movs	r6, r5
 8006370:	2100      	movs	r1, #0
 8006372:	200a      	movs	r0, #10
 8006374:	68e3      	ldr	r3, [r4, #12]
 8006376:	7832      	ldrb	r2, [r6, #0]
 8006378:	1c75      	adds	r5, r6, #1
 800637a:	3a30      	subs	r2, #48	@ 0x30
 800637c:	2a09      	cmp	r2, #9
 800637e:	d950      	bls.n	8006422 <_vfiprintf_r+0x1aa>
 8006380:	2900      	cmp	r1, #0
 8006382:	d111      	bne.n	80063a8 <_vfiprintf_r+0x130>
 8006384:	e017      	b.n	80063b6 <_vfiprintf_r+0x13e>
 8006386:	3601      	adds	r6, #1
 8006388:	e7af      	b.n	80062ea <_vfiprintf_r+0x72>
 800638a:	9b05      	ldr	r3, [sp, #20]
 800638c:	6822      	ldr	r2, [r4, #0]
 800638e:	1ac0      	subs	r0, r0, r3
 8006390:	2301      	movs	r3, #1
 8006392:	4083      	lsls	r3, r0
 8006394:	4313      	orrs	r3, r2
 8006396:	0035      	movs	r5, r6
 8006398:	6023      	str	r3, [r4, #0]
 800639a:	e7cc      	b.n	8006336 <_vfiprintf_r+0xbe>
 800639c:	9b07      	ldr	r3, [sp, #28]
 800639e:	1d19      	adds	r1, r3, #4
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	9107      	str	r1, [sp, #28]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	db01      	blt.n	80063ac <_vfiprintf_r+0x134>
 80063a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80063aa:	e004      	b.n	80063b6 <_vfiprintf_r+0x13e>
 80063ac:	425b      	negs	r3, r3
 80063ae:	60e3      	str	r3, [r4, #12]
 80063b0:	2302      	movs	r3, #2
 80063b2:	4313      	orrs	r3, r2
 80063b4:	6023      	str	r3, [r4, #0]
 80063b6:	7833      	ldrb	r3, [r6, #0]
 80063b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80063ba:	d10c      	bne.n	80063d6 <_vfiprintf_r+0x15e>
 80063bc:	7873      	ldrb	r3, [r6, #1]
 80063be:	2b2a      	cmp	r3, #42	@ 0x2a
 80063c0:	d134      	bne.n	800642c <_vfiprintf_r+0x1b4>
 80063c2:	9b07      	ldr	r3, [sp, #28]
 80063c4:	3602      	adds	r6, #2
 80063c6:	1d1a      	adds	r2, r3, #4
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	9207      	str	r2, [sp, #28]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	da01      	bge.n	80063d4 <_vfiprintf_r+0x15c>
 80063d0:	2301      	movs	r3, #1
 80063d2:	425b      	negs	r3, r3
 80063d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80063d6:	4d32      	ldr	r5, [pc, #200]	@ (80064a0 <_vfiprintf_r+0x228>)
 80063d8:	2203      	movs	r2, #3
 80063da:	0028      	movs	r0, r5
 80063dc:	7831      	ldrb	r1, [r6, #0]
 80063de:	f000 fb5f 	bl	8006aa0 <memchr>
 80063e2:	2800      	cmp	r0, #0
 80063e4:	d006      	beq.n	80063f4 <_vfiprintf_r+0x17c>
 80063e6:	2340      	movs	r3, #64	@ 0x40
 80063e8:	1b40      	subs	r0, r0, r5
 80063ea:	4083      	lsls	r3, r0
 80063ec:	6822      	ldr	r2, [r4, #0]
 80063ee:	3601      	adds	r6, #1
 80063f0:	4313      	orrs	r3, r2
 80063f2:	6023      	str	r3, [r4, #0]
 80063f4:	7831      	ldrb	r1, [r6, #0]
 80063f6:	2206      	movs	r2, #6
 80063f8:	482a      	ldr	r0, [pc, #168]	@ (80064a4 <_vfiprintf_r+0x22c>)
 80063fa:	1c75      	adds	r5, r6, #1
 80063fc:	7621      	strb	r1, [r4, #24]
 80063fe:	f000 fb4f 	bl	8006aa0 <memchr>
 8006402:	2800      	cmp	r0, #0
 8006404:	d040      	beq.n	8006488 <_vfiprintf_r+0x210>
 8006406:	4b28      	ldr	r3, [pc, #160]	@ (80064a8 <_vfiprintf_r+0x230>)
 8006408:	2b00      	cmp	r3, #0
 800640a:	d122      	bne.n	8006452 <_vfiprintf_r+0x1da>
 800640c:	2207      	movs	r2, #7
 800640e:	9b07      	ldr	r3, [sp, #28]
 8006410:	3307      	adds	r3, #7
 8006412:	4393      	bics	r3, r2
 8006414:	3308      	adds	r3, #8
 8006416:	9307      	str	r3, [sp, #28]
 8006418:	6963      	ldr	r3, [r4, #20]
 800641a:	9a04      	ldr	r2, [sp, #16]
 800641c:	189b      	adds	r3, r3, r2
 800641e:	6163      	str	r3, [r4, #20]
 8006420:	e762      	b.n	80062e8 <_vfiprintf_r+0x70>
 8006422:	4343      	muls	r3, r0
 8006424:	002e      	movs	r6, r5
 8006426:	2101      	movs	r1, #1
 8006428:	189b      	adds	r3, r3, r2
 800642a:	e7a4      	b.n	8006376 <_vfiprintf_r+0xfe>
 800642c:	2300      	movs	r3, #0
 800642e:	200a      	movs	r0, #10
 8006430:	0019      	movs	r1, r3
 8006432:	3601      	adds	r6, #1
 8006434:	6063      	str	r3, [r4, #4]
 8006436:	7832      	ldrb	r2, [r6, #0]
 8006438:	1c75      	adds	r5, r6, #1
 800643a:	3a30      	subs	r2, #48	@ 0x30
 800643c:	2a09      	cmp	r2, #9
 800643e:	d903      	bls.n	8006448 <_vfiprintf_r+0x1d0>
 8006440:	2b00      	cmp	r3, #0
 8006442:	d0c8      	beq.n	80063d6 <_vfiprintf_r+0x15e>
 8006444:	9109      	str	r1, [sp, #36]	@ 0x24
 8006446:	e7c6      	b.n	80063d6 <_vfiprintf_r+0x15e>
 8006448:	4341      	muls	r1, r0
 800644a:	002e      	movs	r6, r5
 800644c:	2301      	movs	r3, #1
 800644e:	1889      	adds	r1, r1, r2
 8006450:	e7f1      	b.n	8006436 <_vfiprintf_r+0x1be>
 8006452:	aa07      	add	r2, sp, #28
 8006454:	9200      	str	r2, [sp, #0]
 8006456:	0021      	movs	r1, r4
 8006458:	003a      	movs	r2, r7
 800645a:	4b14      	ldr	r3, [pc, #80]	@ (80064ac <_vfiprintf_r+0x234>)
 800645c:	9803      	ldr	r0, [sp, #12]
 800645e:	e000      	b.n	8006462 <_vfiprintf_r+0x1ea>
 8006460:	bf00      	nop
 8006462:	9004      	str	r0, [sp, #16]
 8006464:	9b04      	ldr	r3, [sp, #16]
 8006466:	3301      	adds	r3, #1
 8006468:	d1d6      	bne.n	8006418 <_vfiprintf_r+0x1a0>
 800646a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800646c:	07db      	lsls	r3, r3, #31
 800646e:	d405      	bmi.n	800647c <_vfiprintf_r+0x204>
 8006470:	89bb      	ldrh	r3, [r7, #12]
 8006472:	059b      	lsls	r3, r3, #22
 8006474:	d402      	bmi.n	800647c <_vfiprintf_r+0x204>
 8006476:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006478:	f7ff fc32 	bl	8005ce0 <__retarget_lock_release_recursive>
 800647c:	89bb      	ldrh	r3, [r7, #12]
 800647e:	065b      	lsls	r3, r3, #25
 8006480:	d500      	bpl.n	8006484 <_vfiprintf_r+0x20c>
 8006482:	e71e      	b.n	80062c2 <_vfiprintf_r+0x4a>
 8006484:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8006486:	e71e      	b.n	80062c6 <_vfiprintf_r+0x4e>
 8006488:	aa07      	add	r2, sp, #28
 800648a:	9200      	str	r2, [sp, #0]
 800648c:	0021      	movs	r1, r4
 800648e:	003a      	movs	r2, r7
 8006490:	4b06      	ldr	r3, [pc, #24]	@ (80064ac <_vfiprintf_r+0x234>)
 8006492:	9803      	ldr	r0, [sp, #12]
 8006494:	f000 f87c 	bl	8006590 <_printf_i>
 8006498:	e7e3      	b.n	8006462 <_vfiprintf_r+0x1ea>
 800649a:	46c0      	nop			@ (mov r8, r8)
 800649c:	08006d03 	.word	0x08006d03
 80064a0:	08006d09 	.word	0x08006d09
 80064a4:	08006d0d 	.word	0x08006d0d
 80064a8:	00000000 	.word	0x00000000
 80064ac:	08006253 	.word	0x08006253

080064b0 <_printf_common>:
 80064b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064b2:	0016      	movs	r6, r2
 80064b4:	9301      	str	r3, [sp, #4]
 80064b6:	688a      	ldr	r2, [r1, #8]
 80064b8:	690b      	ldr	r3, [r1, #16]
 80064ba:	000c      	movs	r4, r1
 80064bc:	9000      	str	r0, [sp, #0]
 80064be:	4293      	cmp	r3, r2
 80064c0:	da00      	bge.n	80064c4 <_printf_common+0x14>
 80064c2:	0013      	movs	r3, r2
 80064c4:	0022      	movs	r2, r4
 80064c6:	6033      	str	r3, [r6, #0]
 80064c8:	3243      	adds	r2, #67	@ 0x43
 80064ca:	7812      	ldrb	r2, [r2, #0]
 80064cc:	2a00      	cmp	r2, #0
 80064ce:	d001      	beq.n	80064d4 <_printf_common+0x24>
 80064d0:	3301      	adds	r3, #1
 80064d2:	6033      	str	r3, [r6, #0]
 80064d4:	6823      	ldr	r3, [r4, #0]
 80064d6:	069b      	lsls	r3, r3, #26
 80064d8:	d502      	bpl.n	80064e0 <_printf_common+0x30>
 80064da:	6833      	ldr	r3, [r6, #0]
 80064dc:	3302      	adds	r3, #2
 80064de:	6033      	str	r3, [r6, #0]
 80064e0:	6822      	ldr	r2, [r4, #0]
 80064e2:	2306      	movs	r3, #6
 80064e4:	0015      	movs	r5, r2
 80064e6:	401d      	ands	r5, r3
 80064e8:	421a      	tst	r2, r3
 80064ea:	d027      	beq.n	800653c <_printf_common+0x8c>
 80064ec:	0023      	movs	r3, r4
 80064ee:	3343      	adds	r3, #67	@ 0x43
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	1e5a      	subs	r2, r3, #1
 80064f4:	4193      	sbcs	r3, r2
 80064f6:	6822      	ldr	r2, [r4, #0]
 80064f8:	0692      	lsls	r2, r2, #26
 80064fa:	d430      	bmi.n	800655e <_printf_common+0xae>
 80064fc:	0022      	movs	r2, r4
 80064fe:	9901      	ldr	r1, [sp, #4]
 8006500:	9800      	ldr	r0, [sp, #0]
 8006502:	9d08      	ldr	r5, [sp, #32]
 8006504:	3243      	adds	r2, #67	@ 0x43
 8006506:	47a8      	blx	r5
 8006508:	3001      	adds	r0, #1
 800650a:	d025      	beq.n	8006558 <_printf_common+0xa8>
 800650c:	2206      	movs	r2, #6
 800650e:	6823      	ldr	r3, [r4, #0]
 8006510:	2500      	movs	r5, #0
 8006512:	4013      	ands	r3, r2
 8006514:	2b04      	cmp	r3, #4
 8006516:	d105      	bne.n	8006524 <_printf_common+0x74>
 8006518:	6833      	ldr	r3, [r6, #0]
 800651a:	68e5      	ldr	r5, [r4, #12]
 800651c:	1aed      	subs	r5, r5, r3
 800651e:	43eb      	mvns	r3, r5
 8006520:	17db      	asrs	r3, r3, #31
 8006522:	401d      	ands	r5, r3
 8006524:	68a3      	ldr	r3, [r4, #8]
 8006526:	6922      	ldr	r2, [r4, #16]
 8006528:	4293      	cmp	r3, r2
 800652a:	dd01      	ble.n	8006530 <_printf_common+0x80>
 800652c:	1a9b      	subs	r3, r3, r2
 800652e:	18ed      	adds	r5, r5, r3
 8006530:	2600      	movs	r6, #0
 8006532:	42b5      	cmp	r5, r6
 8006534:	d120      	bne.n	8006578 <_printf_common+0xc8>
 8006536:	2000      	movs	r0, #0
 8006538:	e010      	b.n	800655c <_printf_common+0xac>
 800653a:	3501      	adds	r5, #1
 800653c:	68e3      	ldr	r3, [r4, #12]
 800653e:	6832      	ldr	r2, [r6, #0]
 8006540:	1a9b      	subs	r3, r3, r2
 8006542:	42ab      	cmp	r3, r5
 8006544:	ddd2      	ble.n	80064ec <_printf_common+0x3c>
 8006546:	0022      	movs	r2, r4
 8006548:	2301      	movs	r3, #1
 800654a:	9901      	ldr	r1, [sp, #4]
 800654c:	9800      	ldr	r0, [sp, #0]
 800654e:	9f08      	ldr	r7, [sp, #32]
 8006550:	3219      	adds	r2, #25
 8006552:	47b8      	blx	r7
 8006554:	3001      	adds	r0, #1
 8006556:	d1f0      	bne.n	800653a <_printf_common+0x8a>
 8006558:	2001      	movs	r0, #1
 800655a:	4240      	negs	r0, r0
 800655c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800655e:	2030      	movs	r0, #48	@ 0x30
 8006560:	18e1      	adds	r1, r4, r3
 8006562:	3143      	adds	r1, #67	@ 0x43
 8006564:	7008      	strb	r0, [r1, #0]
 8006566:	0021      	movs	r1, r4
 8006568:	1c5a      	adds	r2, r3, #1
 800656a:	3145      	adds	r1, #69	@ 0x45
 800656c:	7809      	ldrb	r1, [r1, #0]
 800656e:	18a2      	adds	r2, r4, r2
 8006570:	3243      	adds	r2, #67	@ 0x43
 8006572:	3302      	adds	r3, #2
 8006574:	7011      	strb	r1, [r2, #0]
 8006576:	e7c1      	b.n	80064fc <_printf_common+0x4c>
 8006578:	0022      	movs	r2, r4
 800657a:	2301      	movs	r3, #1
 800657c:	9901      	ldr	r1, [sp, #4]
 800657e:	9800      	ldr	r0, [sp, #0]
 8006580:	9f08      	ldr	r7, [sp, #32]
 8006582:	321a      	adds	r2, #26
 8006584:	47b8      	blx	r7
 8006586:	3001      	adds	r0, #1
 8006588:	d0e6      	beq.n	8006558 <_printf_common+0xa8>
 800658a:	3601      	adds	r6, #1
 800658c:	e7d1      	b.n	8006532 <_printf_common+0x82>
	...

08006590 <_printf_i>:
 8006590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006592:	b08b      	sub	sp, #44	@ 0x2c
 8006594:	9206      	str	r2, [sp, #24]
 8006596:	000a      	movs	r2, r1
 8006598:	3243      	adds	r2, #67	@ 0x43
 800659a:	9307      	str	r3, [sp, #28]
 800659c:	9005      	str	r0, [sp, #20]
 800659e:	9203      	str	r2, [sp, #12]
 80065a0:	7e0a      	ldrb	r2, [r1, #24]
 80065a2:	000c      	movs	r4, r1
 80065a4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80065a6:	2a78      	cmp	r2, #120	@ 0x78
 80065a8:	d809      	bhi.n	80065be <_printf_i+0x2e>
 80065aa:	2a62      	cmp	r2, #98	@ 0x62
 80065ac:	d80b      	bhi.n	80065c6 <_printf_i+0x36>
 80065ae:	2a00      	cmp	r2, #0
 80065b0:	d100      	bne.n	80065b4 <_printf_i+0x24>
 80065b2:	e0bc      	b.n	800672e <_printf_i+0x19e>
 80065b4:	497b      	ldr	r1, [pc, #492]	@ (80067a4 <_printf_i+0x214>)
 80065b6:	9104      	str	r1, [sp, #16]
 80065b8:	2a58      	cmp	r2, #88	@ 0x58
 80065ba:	d100      	bne.n	80065be <_printf_i+0x2e>
 80065bc:	e090      	b.n	80066e0 <_printf_i+0x150>
 80065be:	0025      	movs	r5, r4
 80065c0:	3542      	adds	r5, #66	@ 0x42
 80065c2:	702a      	strb	r2, [r5, #0]
 80065c4:	e022      	b.n	800660c <_printf_i+0x7c>
 80065c6:	0010      	movs	r0, r2
 80065c8:	3863      	subs	r0, #99	@ 0x63
 80065ca:	2815      	cmp	r0, #21
 80065cc:	d8f7      	bhi.n	80065be <_printf_i+0x2e>
 80065ce:	f7f9 fd99 	bl	8000104 <__gnu_thumb1_case_shi>
 80065d2:	0016      	.short	0x0016
 80065d4:	fff6001f 	.word	0xfff6001f
 80065d8:	fff6fff6 	.word	0xfff6fff6
 80065dc:	001ffff6 	.word	0x001ffff6
 80065e0:	fff6fff6 	.word	0xfff6fff6
 80065e4:	fff6fff6 	.word	0xfff6fff6
 80065e8:	003600a1 	.word	0x003600a1
 80065ec:	fff60080 	.word	0xfff60080
 80065f0:	00b2fff6 	.word	0x00b2fff6
 80065f4:	0036fff6 	.word	0x0036fff6
 80065f8:	fff6fff6 	.word	0xfff6fff6
 80065fc:	0084      	.short	0x0084
 80065fe:	0025      	movs	r5, r4
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	3542      	adds	r5, #66	@ 0x42
 8006604:	1d11      	adds	r1, r2, #4
 8006606:	6019      	str	r1, [r3, #0]
 8006608:	6813      	ldr	r3, [r2, #0]
 800660a:	702b      	strb	r3, [r5, #0]
 800660c:	2301      	movs	r3, #1
 800660e:	e0a0      	b.n	8006752 <_printf_i+0x1c2>
 8006610:	6818      	ldr	r0, [r3, #0]
 8006612:	6809      	ldr	r1, [r1, #0]
 8006614:	1d02      	adds	r2, r0, #4
 8006616:	060d      	lsls	r5, r1, #24
 8006618:	d50b      	bpl.n	8006632 <_printf_i+0xa2>
 800661a:	6806      	ldr	r6, [r0, #0]
 800661c:	601a      	str	r2, [r3, #0]
 800661e:	2e00      	cmp	r6, #0
 8006620:	da03      	bge.n	800662a <_printf_i+0x9a>
 8006622:	232d      	movs	r3, #45	@ 0x2d
 8006624:	9a03      	ldr	r2, [sp, #12]
 8006626:	4276      	negs	r6, r6
 8006628:	7013      	strb	r3, [r2, #0]
 800662a:	4b5e      	ldr	r3, [pc, #376]	@ (80067a4 <_printf_i+0x214>)
 800662c:	270a      	movs	r7, #10
 800662e:	9304      	str	r3, [sp, #16]
 8006630:	e018      	b.n	8006664 <_printf_i+0xd4>
 8006632:	6806      	ldr	r6, [r0, #0]
 8006634:	601a      	str	r2, [r3, #0]
 8006636:	0649      	lsls	r1, r1, #25
 8006638:	d5f1      	bpl.n	800661e <_printf_i+0x8e>
 800663a:	b236      	sxth	r6, r6
 800663c:	e7ef      	b.n	800661e <_printf_i+0x8e>
 800663e:	6808      	ldr	r0, [r1, #0]
 8006640:	6819      	ldr	r1, [r3, #0]
 8006642:	c940      	ldmia	r1!, {r6}
 8006644:	0605      	lsls	r5, r0, #24
 8006646:	d402      	bmi.n	800664e <_printf_i+0xbe>
 8006648:	0640      	lsls	r0, r0, #25
 800664a:	d500      	bpl.n	800664e <_printf_i+0xbe>
 800664c:	b2b6      	uxth	r6, r6
 800664e:	6019      	str	r1, [r3, #0]
 8006650:	4b54      	ldr	r3, [pc, #336]	@ (80067a4 <_printf_i+0x214>)
 8006652:	270a      	movs	r7, #10
 8006654:	9304      	str	r3, [sp, #16]
 8006656:	2a6f      	cmp	r2, #111	@ 0x6f
 8006658:	d100      	bne.n	800665c <_printf_i+0xcc>
 800665a:	3f02      	subs	r7, #2
 800665c:	0023      	movs	r3, r4
 800665e:	2200      	movs	r2, #0
 8006660:	3343      	adds	r3, #67	@ 0x43
 8006662:	701a      	strb	r2, [r3, #0]
 8006664:	6863      	ldr	r3, [r4, #4]
 8006666:	60a3      	str	r3, [r4, #8]
 8006668:	2b00      	cmp	r3, #0
 800666a:	db03      	blt.n	8006674 <_printf_i+0xe4>
 800666c:	2104      	movs	r1, #4
 800666e:	6822      	ldr	r2, [r4, #0]
 8006670:	438a      	bics	r2, r1
 8006672:	6022      	str	r2, [r4, #0]
 8006674:	2e00      	cmp	r6, #0
 8006676:	d102      	bne.n	800667e <_printf_i+0xee>
 8006678:	9d03      	ldr	r5, [sp, #12]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d00c      	beq.n	8006698 <_printf_i+0x108>
 800667e:	9d03      	ldr	r5, [sp, #12]
 8006680:	0030      	movs	r0, r6
 8006682:	0039      	movs	r1, r7
 8006684:	f7f9 fdce 	bl	8000224 <__aeabi_uidivmod>
 8006688:	9b04      	ldr	r3, [sp, #16]
 800668a:	3d01      	subs	r5, #1
 800668c:	5c5b      	ldrb	r3, [r3, r1]
 800668e:	702b      	strb	r3, [r5, #0]
 8006690:	0033      	movs	r3, r6
 8006692:	0006      	movs	r6, r0
 8006694:	429f      	cmp	r7, r3
 8006696:	d9f3      	bls.n	8006680 <_printf_i+0xf0>
 8006698:	2f08      	cmp	r7, #8
 800669a:	d109      	bne.n	80066b0 <_printf_i+0x120>
 800669c:	6823      	ldr	r3, [r4, #0]
 800669e:	07db      	lsls	r3, r3, #31
 80066a0:	d506      	bpl.n	80066b0 <_printf_i+0x120>
 80066a2:	6862      	ldr	r2, [r4, #4]
 80066a4:	6923      	ldr	r3, [r4, #16]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	dc02      	bgt.n	80066b0 <_printf_i+0x120>
 80066aa:	2330      	movs	r3, #48	@ 0x30
 80066ac:	3d01      	subs	r5, #1
 80066ae:	702b      	strb	r3, [r5, #0]
 80066b0:	9b03      	ldr	r3, [sp, #12]
 80066b2:	1b5b      	subs	r3, r3, r5
 80066b4:	6123      	str	r3, [r4, #16]
 80066b6:	9b07      	ldr	r3, [sp, #28]
 80066b8:	0021      	movs	r1, r4
 80066ba:	9300      	str	r3, [sp, #0]
 80066bc:	9805      	ldr	r0, [sp, #20]
 80066be:	9b06      	ldr	r3, [sp, #24]
 80066c0:	aa09      	add	r2, sp, #36	@ 0x24
 80066c2:	f7ff fef5 	bl	80064b0 <_printf_common>
 80066c6:	3001      	adds	r0, #1
 80066c8:	d148      	bne.n	800675c <_printf_i+0x1cc>
 80066ca:	2001      	movs	r0, #1
 80066cc:	4240      	negs	r0, r0
 80066ce:	b00b      	add	sp, #44	@ 0x2c
 80066d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066d2:	2220      	movs	r2, #32
 80066d4:	6809      	ldr	r1, [r1, #0]
 80066d6:	430a      	orrs	r2, r1
 80066d8:	6022      	str	r2, [r4, #0]
 80066da:	2278      	movs	r2, #120	@ 0x78
 80066dc:	4932      	ldr	r1, [pc, #200]	@ (80067a8 <_printf_i+0x218>)
 80066de:	9104      	str	r1, [sp, #16]
 80066e0:	0021      	movs	r1, r4
 80066e2:	3145      	adds	r1, #69	@ 0x45
 80066e4:	700a      	strb	r2, [r1, #0]
 80066e6:	6819      	ldr	r1, [r3, #0]
 80066e8:	6822      	ldr	r2, [r4, #0]
 80066ea:	c940      	ldmia	r1!, {r6}
 80066ec:	0610      	lsls	r0, r2, #24
 80066ee:	d402      	bmi.n	80066f6 <_printf_i+0x166>
 80066f0:	0650      	lsls	r0, r2, #25
 80066f2:	d500      	bpl.n	80066f6 <_printf_i+0x166>
 80066f4:	b2b6      	uxth	r6, r6
 80066f6:	6019      	str	r1, [r3, #0]
 80066f8:	07d3      	lsls	r3, r2, #31
 80066fa:	d502      	bpl.n	8006702 <_printf_i+0x172>
 80066fc:	2320      	movs	r3, #32
 80066fe:	4313      	orrs	r3, r2
 8006700:	6023      	str	r3, [r4, #0]
 8006702:	2e00      	cmp	r6, #0
 8006704:	d001      	beq.n	800670a <_printf_i+0x17a>
 8006706:	2710      	movs	r7, #16
 8006708:	e7a8      	b.n	800665c <_printf_i+0xcc>
 800670a:	2220      	movs	r2, #32
 800670c:	6823      	ldr	r3, [r4, #0]
 800670e:	4393      	bics	r3, r2
 8006710:	6023      	str	r3, [r4, #0]
 8006712:	e7f8      	b.n	8006706 <_printf_i+0x176>
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	680d      	ldr	r5, [r1, #0]
 8006718:	1d10      	adds	r0, r2, #4
 800671a:	6949      	ldr	r1, [r1, #20]
 800671c:	6018      	str	r0, [r3, #0]
 800671e:	6813      	ldr	r3, [r2, #0]
 8006720:	062e      	lsls	r6, r5, #24
 8006722:	d501      	bpl.n	8006728 <_printf_i+0x198>
 8006724:	6019      	str	r1, [r3, #0]
 8006726:	e002      	b.n	800672e <_printf_i+0x19e>
 8006728:	066d      	lsls	r5, r5, #25
 800672a:	d5fb      	bpl.n	8006724 <_printf_i+0x194>
 800672c:	8019      	strh	r1, [r3, #0]
 800672e:	2300      	movs	r3, #0
 8006730:	9d03      	ldr	r5, [sp, #12]
 8006732:	6123      	str	r3, [r4, #16]
 8006734:	e7bf      	b.n	80066b6 <_printf_i+0x126>
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	1d11      	adds	r1, r2, #4
 800673a:	6019      	str	r1, [r3, #0]
 800673c:	6815      	ldr	r5, [r2, #0]
 800673e:	2100      	movs	r1, #0
 8006740:	0028      	movs	r0, r5
 8006742:	6862      	ldr	r2, [r4, #4]
 8006744:	f000 f9ac 	bl	8006aa0 <memchr>
 8006748:	2800      	cmp	r0, #0
 800674a:	d001      	beq.n	8006750 <_printf_i+0x1c0>
 800674c:	1b40      	subs	r0, r0, r5
 800674e:	6060      	str	r0, [r4, #4]
 8006750:	6863      	ldr	r3, [r4, #4]
 8006752:	6123      	str	r3, [r4, #16]
 8006754:	2300      	movs	r3, #0
 8006756:	9a03      	ldr	r2, [sp, #12]
 8006758:	7013      	strb	r3, [r2, #0]
 800675a:	e7ac      	b.n	80066b6 <_printf_i+0x126>
 800675c:	002a      	movs	r2, r5
 800675e:	6923      	ldr	r3, [r4, #16]
 8006760:	9906      	ldr	r1, [sp, #24]
 8006762:	9805      	ldr	r0, [sp, #20]
 8006764:	9d07      	ldr	r5, [sp, #28]
 8006766:	47a8      	blx	r5
 8006768:	3001      	adds	r0, #1
 800676a:	d0ae      	beq.n	80066ca <_printf_i+0x13a>
 800676c:	6823      	ldr	r3, [r4, #0]
 800676e:	079b      	lsls	r3, r3, #30
 8006770:	d415      	bmi.n	800679e <_printf_i+0x20e>
 8006772:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006774:	68e0      	ldr	r0, [r4, #12]
 8006776:	4298      	cmp	r0, r3
 8006778:	daa9      	bge.n	80066ce <_printf_i+0x13e>
 800677a:	0018      	movs	r0, r3
 800677c:	e7a7      	b.n	80066ce <_printf_i+0x13e>
 800677e:	0022      	movs	r2, r4
 8006780:	2301      	movs	r3, #1
 8006782:	9906      	ldr	r1, [sp, #24]
 8006784:	9805      	ldr	r0, [sp, #20]
 8006786:	9e07      	ldr	r6, [sp, #28]
 8006788:	3219      	adds	r2, #25
 800678a:	47b0      	blx	r6
 800678c:	3001      	adds	r0, #1
 800678e:	d09c      	beq.n	80066ca <_printf_i+0x13a>
 8006790:	3501      	adds	r5, #1
 8006792:	68e3      	ldr	r3, [r4, #12]
 8006794:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006796:	1a9b      	subs	r3, r3, r2
 8006798:	42ab      	cmp	r3, r5
 800679a:	dcf0      	bgt.n	800677e <_printf_i+0x1ee>
 800679c:	e7e9      	b.n	8006772 <_printf_i+0x1e2>
 800679e:	2500      	movs	r5, #0
 80067a0:	e7f7      	b.n	8006792 <_printf_i+0x202>
 80067a2:	46c0      	nop			@ (mov r8, r8)
 80067a4:	08006d14 	.word	0x08006d14
 80067a8:	08006d25 	.word	0x08006d25

080067ac <__swbuf_r>:
 80067ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ae:	0006      	movs	r6, r0
 80067b0:	000d      	movs	r5, r1
 80067b2:	0014      	movs	r4, r2
 80067b4:	2800      	cmp	r0, #0
 80067b6:	d004      	beq.n	80067c2 <__swbuf_r+0x16>
 80067b8:	6a03      	ldr	r3, [r0, #32]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d101      	bne.n	80067c2 <__swbuf_r+0x16>
 80067be:	f7ff f9f9 	bl	8005bb4 <__sinit>
 80067c2:	69a3      	ldr	r3, [r4, #24]
 80067c4:	60a3      	str	r3, [r4, #8]
 80067c6:	89a3      	ldrh	r3, [r4, #12]
 80067c8:	071b      	lsls	r3, r3, #28
 80067ca:	d502      	bpl.n	80067d2 <__swbuf_r+0x26>
 80067cc:	6923      	ldr	r3, [r4, #16]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d109      	bne.n	80067e6 <__swbuf_r+0x3a>
 80067d2:	0021      	movs	r1, r4
 80067d4:	0030      	movs	r0, r6
 80067d6:	f000 f82b 	bl	8006830 <__swsetup_r>
 80067da:	2800      	cmp	r0, #0
 80067dc:	d003      	beq.n	80067e6 <__swbuf_r+0x3a>
 80067de:	2501      	movs	r5, #1
 80067e0:	426d      	negs	r5, r5
 80067e2:	0028      	movs	r0, r5
 80067e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067e6:	6923      	ldr	r3, [r4, #16]
 80067e8:	6820      	ldr	r0, [r4, #0]
 80067ea:	b2ef      	uxtb	r7, r5
 80067ec:	1ac0      	subs	r0, r0, r3
 80067ee:	6963      	ldr	r3, [r4, #20]
 80067f0:	b2ed      	uxtb	r5, r5
 80067f2:	4283      	cmp	r3, r0
 80067f4:	dc05      	bgt.n	8006802 <__swbuf_r+0x56>
 80067f6:	0021      	movs	r1, r4
 80067f8:	0030      	movs	r0, r6
 80067fa:	f7ff fbcb 	bl	8005f94 <_fflush_r>
 80067fe:	2800      	cmp	r0, #0
 8006800:	d1ed      	bne.n	80067de <__swbuf_r+0x32>
 8006802:	68a3      	ldr	r3, [r4, #8]
 8006804:	3001      	adds	r0, #1
 8006806:	3b01      	subs	r3, #1
 8006808:	60a3      	str	r3, [r4, #8]
 800680a:	6823      	ldr	r3, [r4, #0]
 800680c:	1c5a      	adds	r2, r3, #1
 800680e:	6022      	str	r2, [r4, #0]
 8006810:	701f      	strb	r7, [r3, #0]
 8006812:	6963      	ldr	r3, [r4, #20]
 8006814:	4283      	cmp	r3, r0
 8006816:	d004      	beq.n	8006822 <__swbuf_r+0x76>
 8006818:	89a3      	ldrh	r3, [r4, #12]
 800681a:	07db      	lsls	r3, r3, #31
 800681c:	d5e1      	bpl.n	80067e2 <__swbuf_r+0x36>
 800681e:	2d0a      	cmp	r5, #10
 8006820:	d1df      	bne.n	80067e2 <__swbuf_r+0x36>
 8006822:	0021      	movs	r1, r4
 8006824:	0030      	movs	r0, r6
 8006826:	f7ff fbb5 	bl	8005f94 <_fflush_r>
 800682a:	2800      	cmp	r0, #0
 800682c:	d0d9      	beq.n	80067e2 <__swbuf_r+0x36>
 800682e:	e7d6      	b.n	80067de <__swbuf_r+0x32>

08006830 <__swsetup_r>:
 8006830:	4b2d      	ldr	r3, [pc, #180]	@ (80068e8 <__swsetup_r+0xb8>)
 8006832:	b570      	push	{r4, r5, r6, lr}
 8006834:	0005      	movs	r5, r0
 8006836:	6818      	ldr	r0, [r3, #0]
 8006838:	000c      	movs	r4, r1
 800683a:	2800      	cmp	r0, #0
 800683c:	d004      	beq.n	8006848 <__swsetup_r+0x18>
 800683e:	6a03      	ldr	r3, [r0, #32]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d101      	bne.n	8006848 <__swsetup_r+0x18>
 8006844:	f7ff f9b6 	bl	8005bb4 <__sinit>
 8006848:	230c      	movs	r3, #12
 800684a:	5ee2      	ldrsh	r2, [r4, r3]
 800684c:	0713      	lsls	r3, r2, #28
 800684e:	d423      	bmi.n	8006898 <__swsetup_r+0x68>
 8006850:	06d3      	lsls	r3, r2, #27
 8006852:	d407      	bmi.n	8006864 <__swsetup_r+0x34>
 8006854:	2309      	movs	r3, #9
 8006856:	602b      	str	r3, [r5, #0]
 8006858:	2340      	movs	r3, #64	@ 0x40
 800685a:	2001      	movs	r0, #1
 800685c:	4313      	orrs	r3, r2
 800685e:	81a3      	strh	r3, [r4, #12]
 8006860:	4240      	negs	r0, r0
 8006862:	e03a      	b.n	80068da <__swsetup_r+0xaa>
 8006864:	0752      	lsls	r2, r2, #29
 8006866:	d513      	bpl.n	8006890 <__swsetup_r+0x60>
 8006868:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800686a:	2900      	cmp	r1, #0
 800686c:	d008      	beq.n	8006880 <__swsetup_r+0x50>
 800686e:	0023      	movs	r3, r4
 8006870:	3344      	adds	r3, #68	@ 0x44
 8006872:	4299      	cmp	r1, r3
 8006874:	d002      	beq.n	800687c <__swsetup_r+0x4c>
 8006876:	0028      	movs	r0, r5
 8006878:	f7ff fc8c 	bl	8006194 <_free_r>
 800687c:	2300      	movs	r3, #0
 800687e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006880:	2224      	movs	r2, #36	@ 0x24
 8006882:	89a3      	ldrh	r3, [r4, #12]
 8006884:	4393      	bics	r3, r2
 8006886:	81a3      	strh	r3, [r4, #12]
 8006888:	2300      	movs	r3, #0
 800688a:	6063      	str	r3, [r4, #4]
 800688c:	6923      	ldr	r3, [r4, #16]
 800688e:	6023      	str	r3, [r4, #0]
 8006890:	2308      	movs	r3, #8
 8006892:	89a2      	ldrh	r2, [r4, #12]
 8006894:	4313      	orrs	r3, r2
 8006896:	81a3      	strh	r3, [r4, #12]
 8006898:	6923      	ldr	r3, [r4, #16]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d10b      	bne.n	80068b6 <__swsetup_r+0x86>
 800689e:	21a0      	movs	r1, #160	@ 0xa0
 80068a0:	2280      	movs	r2, #128	@ 0x80
 80068a2:	89a3      	ldrh	r3, [r4, #12]
 80068a4:	0089      	lsls	r1, r1, #2
 80068a6:	0092      	lsls	r2, r2, #2
 80068a8:	400b      	ands	r3, r1
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d003      	beq.n	80068b6 <__swsetup_r+0x86>
 80068ae:	0021      	movs	r1, r4
 80068b0:	0028      	movs	r0, r5
 80068b2:	f000 f845 	bl	8006940 <__smakebuf_r>
 80068b6:	230c      	movs	r3, #12
 80068b8:	5ee2      	ldrsh	r2, [r4, r3]
 80068ba:	2101      	movs	r1, #1
 80068bc:	0013      	movs	r3, r2
 80068be:	400b      	ands	r3, r1
 80068c0:	420a      	tst	r2, r1
 80068c2:	d00b      	beq.n	80068dc <__swsetup_r+0xac>
 80068c4:	2300      	movs	r3, #0
 80068c6:	60a3      	str	r3, [r4, #8]
 80068c8:	6963      	ldr	r3, [r4, #20]
 80068ca:	425b      	negs	r3, r3
 80068cc:	61a3      	str	r3, [r4, #24]
 80068ce:	2000      	movs	r0, #0
 80068d0:	6923      	ldr	r3, [r4, #16]
 80068d2:	4283      	cmp	r3, r0
 80068d4:	d101      	bne.n	80068da <__swsetup_r+0xaa>
 80068d6:	0613      	lsls	r3, r2, #24
 80068d8:	d4be      	bmi.n	8006858 <__swsetup_r+0x28>
 80068da:	bd70      	pop	{r4, r5, r6, pc}
 80068dc:	0791      	lsls	r1, r2, #30
 80068de:	d400      	bmi.n	80068e2 <__swsetup_r+0xb2>
 80068e0:	6963      	ldr	r3, [r4, #20]
 80068e2:	60a3      	str	r3, [r4, #8]
 80068e4:	e7f3      	b.n	80068ce <__swsetup_r+0x9e>
 80068e6:	46c0      	nop			@ (mov r8, r8)
 80068e8:	2000041c 	.word	0x2000041c

080068ec <__swhatbuf_r>:
 80068ec:	b570      	push	{r4, r5, r6, lr}
 80068ee:	000e      	movs	r6, r1
 80068f0:	001d      	movs	r5, r3
 80068f2:	230e      	movs	r3, #14
 80068f4:	5ec9      	ldrsh	r1, [r1, r3]
 80068f6:	0014      	movs	r4, r2
 80068f8:	b096      	sub	sp, #88	@ 0x58
 80068fa:	2900      	cmp	r1, #0
 80068fc:	da0c      	bge.n	8006918 <__swhatbuf_r+0x2c>
 80068fe:	89b2      	ldrh	r2, [r6, #12]
 8006900:	2380      	movs	r3, #128	@ 0x80
 8006902:	0011      	movs	r1, r2
 8006904:	4019      	ands	r1, r3
 8006906:	421a      	tst	r2, r3
 8006908:	d114      	bne.n	8006934 <__swhatbuf_r+0x48>
 800690a:	2380      	movs	r3, #128	@ 0x80
 800690c:	00db      	lsls	r3, r3, #3
 800690e:	2000      	movs	r0, #0
 8006910:	6029      	str	r1, [r5, #0]
 8006912:	6023      	str	r3, [r4, #0]
 8006914:	b016      	add	sp, #88	@ 0x58
 8006916:	bd70      	pop	{r4, r5, r6, pc}
 8006918:	466a      	mov	r2, sp
 800691a:	f000 f853 	bl	80069c4 <_fstat_r>
 800691e:	2800      	cmp	r0, #0
 8006920:	dbed      	blt.n	80068fe <__swhatbuf_r+0x12>
 8006922:	23f0      	movs	r3, #240	@ 0xf0
 8006924:	9901      	ldr	r1, [sp, #4]
 8006926:	021b      	lsls	r3, r3, #8
 8006928:	4019      	ands	r1, r3
 800692a:	4b04      	ldr	r3, [pc, #16]	@ (800693c <__swhatbuf_r+0x50>)
 800692c:	18c9      	adds	r1, r1, r3
 800692e:	424b      	negs	r3, r1
 8006930:	4159      	adcs	r1, r3
 8006932:	e7ea      	b.n	800690a <__swhatbuf_r+0x1e>
 8006934:	2100      	movs	r1, #0
 8006936:	2340      	movs	r3, #64	@ 0x40
 8006938:	e7e9      	b.n	800690e <__swhatbuf_r+0x22>
 800693a:	46c0      	nop			@ (mov r8, r8)
 800693c:	ffffe000 	.word	0xffffe000

08006940 <__smakebuf_r>:
 8006940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006942:	2602      	movs	r6, #2
 8006944:	898b      	ldrh	r3, [r1, #12]
 8006946:	0005      	movs	r5, r0
 8006948:	000c      	movs	r4, r1
 800694a:	b085      	sub	sp, #20
 800694c:	4233      	tst	r3, r6
 800694e:	d007      	beq.n	8006960 <__smakebuf_r+0x20>
 8006950:	0023      	movs	r3, r4
 8006952:	3347      	adds	r3, #71	@ 0x47
 8006954:	6023      	str	r3, [r4, #0]
 8006956:	6123      	str	r3, [r4, #16]
 8006958:	2301      	movs	r3, #1
 800695a:	6163      	str	r3, [r4, #20]
 800695c:	b005      	add	sp, #20
 800695e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006960:	ab03      	add	r3, sp, #12
 8006962:	aa02      	add	r2, sp, #8
 8006964:	f7ff ffc2 	bl	80068ec <__swhatbuf_r>
 8006968:	9f02      	ldr	r7, [sp, #8]
 800696a:	9001      	str	r0, [sp, #4]
 800696c:	0039      	movs	r1, r7
 800696e:	0028      	movs	r0, r5
 8006970:	f7ff fa0a 	bl	8005d88 <_malloc_r>
 8006974:	2800      	cmp	r0, #0
 8006976:	d108      	bne.n	800698a <__smakebuf_r+0x4a>
 8006978:	220c      	movs	r2, #12
 800697a:	5ea3      	ldrsh	r3, [r4, r2]
 800697c:	059a      	lsls	r2, r3, #22
 800697e:	d4ed      	bmi.n	800695c <__smakebuf_r+0x1c>
 8006980:	2203      	movs	r2, #3
 8006982:	4393      	bics	r3, r2
 8006984:	431e      	orrs	r6, r3
 8006986:	81a6      	strh	r6, [r4, #12]
 8006988:	e7e2      	b.n	8006950 <__smakebuf_r+0x10>
 800698a:	2380      	movs	r3, #128	@ 0x80
 800698c:	89a2      	ldrh	r2, [r4, #12]
 800698e:	6020      	str	r0, [r4, #0]
 8006990:	4313      	orrs	r3, r2
 8006992:	81a3      	strh	r3, [r4, #12]
 8006994:	9b03      	ldr	r3, [sp, #12]
 8006996:	6120      	str	r0, [r4, #16]
 8006998:	6167      	str	r7, [r4, #20]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00c      	beq.n	80069b8 <__smakebuf_r+0x78>
 800699e:	0028      	movs	r0, r5
 80069a0:	230e      	movs	r3, #14
 80069a2:	5ee1      	ldrsh	r1, [r4, r3]
 80069a4:	f000 f820 	bl	80069e8 <_isatty_r>
 80069a8:	2800      	cmp	r0, #0
 80069aa:	d005      	beq.n	80069b8 <__smakebuf_r+0x78>
 80069ac:	2303      	movs	r3, #3
 80069ae:	89a2      	ldrh	r2, [r4, #12]
 80069b0:	439a      	bics	r2, r3
 80069b2:	3b02      	subs	r3, #2
 80069b4:	4313      	orrs	r3, r2
 80069b6:	81a3      	strh	r3, [r4, #12]
 80069b8:	89a3      	ldrh	r3, [r4, #12]
 80069ba:	9a01      	ldr	r2, [sp, #4]
 80069bc:	4313      	orrs	r3, r2
 80069be:	81a3      	strh	r3, [r4, #12]
 80069c0:	e7cc      	b.n	800695c <__smakebuf_r+0x1c>
	...

080069c4 <_fstat_r>:
 80069c4:	2300      	movs	r3, #0
 80069c6:	b570      	push	{r4, r5, r6, lr}
 80069c8:	4d06      	ldr	r5, [pc, #24]	@ (80069e4 <_fstat_r+0x20>)
 80069ca:	0004      	movs	r4, r0
 80069cc:	0008      	movs	r0, r1
 80069ce:	0011      	movs	r1, r2
 80069d0:	602b      	str	r3, [r5, #0]
 80069d2:	f7fb f953 	bl	8001c7c <_fstat>
 80069d6:	1c43      	adds	r3, r0, #1
 80069d8:	d103      	bne.n	80069e2 <_fstat_r+0x1e>
 80069da:	682b      	ldr	r3, [r5, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d000      	beq.n	80069e2 <_fstat_r+0x1e>
 80069e0:	6023      	str	r3, [r4, #0]
 80069e2:	bd70      	pop	{r4, r5, r6, pc}
 80069e4:	200013a0 	.word	0x200013a0

080069e8 <_isatty_r>:
 80069e8:	2300      	movs	r3, #0
 80069ea:	b570      	push	{r4, r5, r6, lr}
 80069ec:	4d06      	ldr	r5, [pc, #24]	@ (8006a08 <_isatty_r+0x20>)
 80069ee:	0004      	movs	r4, r0
 80069f0:	0008      	movs	r0, r1
 80069f2:	602b      	str	r3, [r5, #0]
 80069f4:	f7fb f950 	bl	8001c98 <_isatty>
 80069f8:	1c43      	adds	r3, r0, #1
 80069fa:	d103      	bne.n	8006a04 <_isatty_r+0x1c>
 80069fc:	682b      	ldr	r3, [r5, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d000      	beq.n	8006a04 <_isatty_r+0x1c>
 8006a02:	6023      	str	r3, [r4, #0]
 8006a04:	bd70      	pop	{r4, r5, r6, pc}
 8006a06:	46c0      	nop			@ (mov r8, r8)
 8006a08:	200013a0 	.word	0x200013a0

08006a0c <_raise_r>:
 8006a0c:	b570      	push	{r4, r5, r6, lr}
 8006a0e:	0004      	movs	r4, r0
 8006a10:	000d      	movs	r5, r1
 8006a12:	291f      	cmp	r1, #31
 8006a14:	d904      	bls.n	8006a20 <_raise_r+0x14>
 8006a16:	2316      	movs	r3, #22
 8006a18:	6003      	str	r3, [r0, #0]
 8006a1a:	2001      	movs	r0, #1
 8006a1c:	4240      	negs	r0, r0
 8006a1e:	bd70      	pop	{r4, r5, r6, pc}
 8006a20:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d004      	beq.n	8006a30 <_raise_r+0x24>
 8006a26:	008a      	lsls	r2, r1, #2
 8006a28:	189b      	adds	r3, r3, r2
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	2a00      	cmp	r2, #0
 8006a2e:	d108      	bne.n	8006a42 <_raise_r+0x36>
 8006a30:	0020      	movs	r0, r4
 8006a32:	f000 f831 	bl	8006a98 <_getpid_r>
 8006a36:	002a      	movs	r2, r5
 8006a38:	0001      	movs	r1, r0
 8006a3a:	0020      	movs	r0, r4
 8006a3c:	f000 f81a 	bl	8006a74 <_kill_r>
 8006a40:	e7ed      	b.n	8006a1e <_raise_r+0x12>
 8006a42:	2a01      	cmp	r2, #1
 8006a44:	d009      	beq.n	8006a5a <_raise_r+0x4e>
 8006a46:	1c51      	adds	r1, r2, #1
 8006a48:	d103      	bne.n	8006a52 <_raise_r+0x46>
 8006a4a:	2316      	movs	r3, #22
 8006a4c:	6003      	str	r3, [r0, #0]
 8006a4e:	2001      	movs	r0, #1
 8006a50:	e7e5      	b.n	8006a1e <_raise_r+0x12>
 8006a52:	2100      	movs	r1, #0
 8006a54:	0028      	movs	r0, r5
 8006a56:	6019      	str	r1, [r3, #0]
 8006a58:	4790      	blx	r2
 8006a5a:	2000      	movs	r0, #0
 8006a5c:	e7df      	b.n	8006a1e <_raise_r+0x12>
	...

08006a60 <raise>:
 8006a60:	b510      	push	{r4, lr}
 8006a62:	4b03      	ldr	r3, [pc, #12]	@ (8006a70 <raise+0x10>)
 8006a64:	0001      	movs	r1, r0
 8006a66:	6818      	ldr	r0, [r3, #0]
 8006a68:	f7ff ffd0 	bl	8006a0c <_raise_r>
 8006a6c:	bd10      	pop	{r4, pc}
 8006a6e:	46c0      	nop			@ (mov r8, r8)
 8006a70:	2000041c 	.word	0x2000041c

08006a74 <_kill_r>:
 8006a74:	2300      	movs	r3, #0
 8006a76:	b570      	push	{r4, r5, r6, lr}
 8006a78:	4d06      	ldr	r5, [pc, #24]	@ (8006a94 <_kill_r+0x20>)
 8006a7a:	0004      	movs	r4, r0
 8006a7c:	0008      	movs	r0, r1
 8006a7e:	0011      	movs	r1, r2
 8006a80:	602b      	str	r3, [r5, #0]
 8006a82:	f7fb f89b 	bl	8001bbc <_kill>
 8006a86:	1c43      	adds	r3, r0, #1
 8006a88:	d103      	bne.n	8006a92 <_kill_r+0x1e>
 8006a8a:	682b      	ldr	r3, [r5, #0]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d000      	beq.n	8006a92 <_kill_r+0x1e>
 8006a90:	6023      	str	r3, [r4, #0]
 8006a92:	bd70      	pop	{r4, r5, r6, pc}
 8006a94:	200013a0 	.word	0x200013a0

08006a98 <_getpid_r>:
 8006a98:	b510      	push	{r4, lr}
 8006a9a:	f7fb f889 	bl	8001bb0 <_getpid>
 8006a9e:	bd10      	pop	{r4, pc}

08006aa0 <memchr>:
 8006aa0:	b2c9      	uxtb	r1, r1
 8006aa2:	1882      	adds	r2, r0, r2
 8006aa4:	4290      	cmp	r0, r2
 8006aa6:	d101      	bne.n	8006aac <memchr+0xc>
 8006aa8:	2000      	movs	r0, #0
 8006aaa:	4770      	bx	lr
 8006aac:	7803      	ldrb	r3, [r0, #0]
 8006aae:	428b      	cmp	r3, r1
 8006ab0:	d0fb      	beq.n	8006aaa <memchr+0xa>
 8006ab2:	3001      	adds	r0, #1
 8006ab4:	e7f6      	b.n	8006aa4 <memchr+0x4>
	...

08006ab8 <round>:
 8006ab8:	b570      	push	{r4, r5, r6, lr}
 8006aba:	4b1f      	ldr	r3, [pc, #124]	@ (8006b38 <round+0x80>)
 8006abc:	004d      	lsls	r5, r1, #1
 8006abe:	0d6d      	lsrs	r5, r5, #21
 8006ac0:	18eb      	adds	r3, r5, r3
 8006ac2:	000a      	movs	r2, r1
 8006ac4:	0004      	movs	r4, r0
 8006ac6:	2b13      	cmp	r3, #19
 8006ac8:	dc18      	bgt.n	8006afc <round+0x44>
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	da0a      	bge.n	8006ae4 <round+0x2c>
 8006ace:	0fc9      	lsrs	r1, r1, #31
 8006ad0:	07c9      	lsls	r1, r1, #31
 8006ad2:	000a      	movs	r2, r1
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	d101      	bne.n	8006adc <round+0x24>
 8006ad8:	4a18      	ldr	r2, [pc, #96]	@ (8006b3c <round+0x84>)
 8006ada:	430a      	orrs	r2, r1
 8006adc:	2300      	movs	r3, #0
 8006ade:	0011      	movs	r1, r2
 8006ae0:	0018      	movs	r0, r3
 8006ae2:	e015      	b.n	8006b10 <round+0x58>
 8006ae4:	4d16      	ldr	r5, [pc, #88]	@ (8006b40 <round+0x88>)
 8006ae6:	000e      	movs	r6, r1
 8006ae8:	411d      	asrs	r5, r3
 8006aea:	402e      	ands	r6, r5
 8006aec:	4334      	orrs	r4, r6
 8006aee:	d00f      	beq.n	8006b10 <round+0x58>
 8006af0:	2180      	movs	r1, #128	@ 0x80
 8006af2:	0309      	lsls	r1, r1, #12
 8006af4:	4119      	asrs	r1, r3
 8006af6:	188a      	adds	r2, r1, r2
 8006af8:	43aa      	bics	r2, r5
 8006afa:	e7ef      	b.n	8006adc <round+0x24>
 8006afc:	2b33      	cmp	r3, #51	@ 0x33
 8006afe:	dd08      	ble.n	8006b12 <round+0x5a>
 8006b00:	2280      	movs	r2, #128	@ 0x80
 8006b02:	00d2      	lsls	r2, r2, #3
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d103      	bne.n	8006b10 <round+0x58>
 8006b08:	0002      	movs	r2, r0
 8006b0a:	000b      	movs	r3, r1
 8006b0c:	f7f9 fbbe 	bl	800028c <__aeabi_dadd>
 8006b10:	bd70      	pop	{r4, r5, r6, pc}
 8006b12:	4e0c      	ldr	r6, [pc, #48]	@ (8006b44 <round+0x8c>)
 8006b14:	19ae      	adds	r6, r5, r6
 8006b16:	2501      	movs	r5, #1
 8006b18:	426d      	negs	r5, r5
 8006b1a:	40f5      	lsrs	r5, r6
 8006b1c:	4228      	tst	r0, r5
 8006b1e:	d0f7      	beq.n	8006b10 <round+0x58>
 8006b20:	2133      	movs	r1, #51	@ 0x33
 8006b22:	1ac9      	subs	r1, r1, r3
 8006b24:	2301      	movs	r3, #1
 8006b26:	408b      	lsls	r3, r1
 8006b28:	181b      	adds	r3, r3, r0
 8006b2a:	4283      	cmp	r3, r0
 8006b2c:	41a4      	sbcs	r4, r4
 8006b2e:	4264      	negs	r4, r4
 8006b30:	1912      	adds	r2, r2, r4
 8006b32:	43ab      	bics	r3, r5
 8006b34:	e7d3      	b.n	8006ade <round+0x26>
 8006b36:	46c0      	nop			@ (mov r8, r8)
 8006b38:	fffffc01 	.word	0xfffffc01
 8006b3c:	3ff00000 	.word	0x3ff00000
 8006b40:	000fffff 	.word	0x000fffff
 8006b44:	fffffbed 	.word	0xfffffbed

08006b48 <_gettimeofday>:
 8006b48:	2258      	movs	r2, #88	@ 0x58
 8006b4a:	2001      	movs	r0, #1
 8006b4c:	4b01      	ldr	r3, [pc, #4]	@ (8006b54 <_gettimeofday+0xc>)
 8006b4e:	4240      	negs	r0, r0
 8006b50:	601a      	str	r2, [r3, #0]
 8006b52:	4770      	bx	lr
 8006b54:	200013a0 	.word	0x200013a0

08006b58 <_init>:
 8006b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b5a:	46c0      	nop			@ (mov r8, r8)
 8006b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b5e:	bc08      	pop	{r3}
 8006b60:	469e      	mov	lr, r3
 8006b62:	4770      	bx	lr

08006b64 <_fini>:
 8006b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b66:	46c0      	nop			@ (mov r8, r8)
 8006b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b6a:	bc08      	pop	{r3}
 8006b6c:	469e      	mov	lr, r3
 8006b6e:	4770      	bx	lr
