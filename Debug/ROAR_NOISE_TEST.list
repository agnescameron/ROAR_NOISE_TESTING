
ROAR_NOISE_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a64  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  08006b20  08006b20  00007b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ce8  08006ce8  0000846c  2**0
                  CONTENTS
  4 .ARM          00000000  08006ce8  08006ce8  0000846c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ce8  08006ce8  0000846c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ce8  08006ce8  00007ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006cec  08006cec  00007cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000046c  20000000  08006cf0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f38  2000046c  0800715c  0000846c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013a4  0800715c  000093a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000846c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da7a  00000000  00000000  00008494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024bd  00000000  00000000  00015f0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f18  00000000  00000000  000183d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b9c  00000000  00000000  000192e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018360  00000000  00000000  00019e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010425  00000000  00000000  000321e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099d6e  00000000  00000000  00042609  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dc377  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004188  00000000  00000000  000dc3bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000e0544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000046c 	.word	0x2000046c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006b08 	.word	0x08006b08

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000470 	.word	0x20000470
 8000100:	08006b08 	.word	0x08006b08

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_lmul>:
 8000230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000232:	46ce      	mov	lr, r9
 8000234:	4699      	mov	r9, r3
 8000236:	0c03      	lsrs	r3, r0, #16
 8000238:	469c      	mov	ip, r3
 800023a:	0413      	lsls	r3, r2, #16
 800023c:	4647      	mov	r7, r8
 800023e:	0c1b      	lsrs	r3, r3, #16
 8000240:	001d      	movs	r5, r3
 8000242:	000e      	movs	r6, r1
 8000244:	4661      	mov	r1, ip
 8000246:	0404      	lsls	r4, r0, #16
 8000248:	0c24      	lsrs	r4, r4, #16
 800024a:	b580      	push	{r7, lr}
 800024c:	0007      	movs	r7, r0
 800024e:	0c10      	lsrs	r0, r2, #16
 8000250:	434b      	muls	r3, r1
 8000252:	4365      	muls	r5, r4
 8000254:	4341      	muls	r1, r0
 8000256:	4360      	muls	r0, r4
 8000258:	0c2c      	lsrs	r4, r5, #16
 800025a:	18c0      	adds	r0, r0, r3
 800025c:	1824      	adds	r4, r4, r0
 800025e:	468c      	mov	ip, r1
 8000260:	42a3      	cmp	r3, r4
 8000262:	d903      	bls.n	800026c <__aeabi_lmul+0x3c>
 8000264:	2380      	movs	r3, #128	@ 0x80
 8000266:	025b      	lsls	r3, r3, #9
 8000268:	4698      	mov	r8, r3
 800026a:	44c4      	add	ip, r8
 800026c:	4649      	mov	r1, r9
 800026e:	4379      	muls	r1, r7
 8000270:	4356      	muls	r6, r2
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	042d      	lsls	r5, r5, #16
 8000276:	0c2d      	lsrs	r5, r5, #16
 8000278:	1989      	adds	r1, r1, r6
 800027a:	4463      	add	r3, ip
 800027c:	0424      	lsls	r4, r4, #16
 800027e:	1960      	adds	r0, r4, r5
 8000280:	18c9      	adds	r1, r1, r3
 8000282:	bcc0      	pop	{r6, r7}
 8000284:	46b9      	mov	r9, r7
 8000286:	46b0      	mov	r8, r6
 8000288:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800028a:	46c0      	nop			@ (mov r8, r8)

0800028c <__aeabi_dadd>:
 800028c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800028e:	4657      	mov	r7, sl
 8000290:	464e      	mov	r6, r9
 8000292:	4645      	mov	r5, r8
 8000294:	46de      	mov	lr, fp
 8000296:	b5e0      	push	{r5, r6, r7, lr}
 8000298:	b083      	sub	sp, #12
 800029a:	9000      	str	r0, [sp, #0]
 800029c:	9101      	str	r1, [sp, #4]
 800029e:	030c      	lsls	r4, r1, #12
 80002a0:	004f      	lsls	r7, r1, #1
 80002a2:	0fce      	lsrs	r6, r1, #31
 80002a4:	0a61      	lsrs	r1, r4, #9
 80002a6:	9c00      	ldr	r4, [sp, #0]
 80002a8:	031d      	lsls	r5, r3, #12
 80002aa:	0f64      	lsrs	r4, r4, #29
 80002ac:	430c      	orrs	r4, r1
 80002ae:	9900      	ldr	r1, [sp, #0]
 80002b0:	9200      	str	r2, [sp, #0]
 80002b2:	9301      	str	r3, [sp, #4]
 80002b4:	00c8      	lsls	r0, r1, #3
 80002b6:	0059      	lsls	r1, r3, #1
 80002b8:	0d4b      	lsrs	r3, r1, #21
 80002ba:	4699      	mov	r9, r3
 80002bc:	9a00      	ldr	r2, [sp, #0]
 80002be:	9b01      	ldr	r3, [sp, #4]
 80002c0:	0a6d      	lsrs	r5, r5, #9
 80002c2:	0fd9      	lsrs	r1, r3, #31
 80002c4:	0f53      	lsrs	r3, r2, #29
 80002c6:	432b      	orrs	r3, r5
 80002c8:	469a      	mov	sl, r3
 80002ca:	9b00      	ldr	r3, [sp, #0]
 80002cc:	0d7f      	lsrs	r7, r7, #21
 80002ce:	00da      	lsls	r2, r3, #3
 80002d0:	4694      	mov	ip, r2
 80002d2:	464a      	mov	r2, r9
 80002d4:	46b0      	mov	r8, r6
 80002d6:	1aba      	subs	r2, r7, r2
 80002d8:	428e      	cmp	r6, r1
 80002da:	d100      	bne.n	80002de <__aeabi_dadd+0x52>
 80002dc:	e0b0      	b.n	8000440 <__aeabi_dadd+0x1b4>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	dc00      	bgt.n	80002e4 <__aeabi_dadd+0x58>
 80002e2:	e078      	b.n	80003d6 <__aeabi_dadd+0x14a>
 80002e4:	4649      	mov	r1, r9
 80002e6:	2900      	cmp	r1, #0
 80002e8:	d100      	bne.n	80002ec <__aeabi_dadd+0x60>
 80002ea:	e0e9      	b.n	80004c0 <__aeabi_dadd+0x234>
 80002ec:	49c9      	ldr	r1, [pc, #804]	@ (8000614 <__aeabi_dadd+0x388>)
 80002ee:	428f      	cmp	r7, r1
 80002f0:	d100      	bne.n	80002f4 <__aeabi_dadd+0x68>
 80002f2:	e195      	b.n	8000620 <__aeabi_dadd+0x394>
 80002f4:	2501      	movs	r5, #1
 80002f6:	2a38      	cmp	r2, #56	@ 0x38
 80002f8:	dc16      	bgt.n	8000328 <__aeabi_dadd+0x9c>
 80002fa:	2180      	movs	r1, #128	@ 0x80
 80002fc:	4653      	mov	r3, sl
 80002fe:	0409      	lsls	r1, r1, #16
 8000300:	430b      	orrs	r3, r1
 8000302:	469a      	mov	sl, r3
 8000304:	2a1f      	cmp	r2, #31
 8000306:	dd00      	ble.n	800030a <__aeabi_dadd+0x7e>
 8000308:	e1e7      	b.n	80006da <__aeabi_dadd+0x44e>
 800030a:	2120      	movs	r1, #32
 800030c:	4655      	mov	r5, sl
 800030e:	1a8b      	subs	r3, r1, r2
 8000310:	4661      	mov	r1, ip
 8000312:	409d      	lsls	r5, r3
 8000314:	40d1      	lsrs	r1, r2
 8000316:	430d      	orrs	r5, r1
 8000318:	4661      	mov	r1, ip
 800031a:	4099      	lsls	r1, r3
 800031c:	1e4b      	subs	r3, r1, #1
 800031e:	4199      	sbcs	r1, r3
 8000320:	4653      	mov	r3, sl
 8000322:	40d3      	lsrs	r3, r2
 8000324:	430d      	orrs	r5, r1
 8000326:	1ae4      	subs	r4, r4, r3
 8000328:	1b45      	subs	r5, r0, r5
 800032a:	42a8      	cmp	r0, r5
 800032c:	4180      	sbcs	r0, r0
 800032e:	4240      	negs	r0, r0
 8000330:	1a24      	subs	r4, r4, r0
 8000332:	0223      	lsls	r3, r4, #8
 8000334:	d400      	bmi.n	8000338 <__aeabi_dadd+0xac>
 8000336:	e10f      	b.n	8000558 <__aeabi_dadd+0x2cc>
 8000338:	0264      	lsls	r4, r4, #9
 800033a:	0a64      	lsrs	r4, r4, #9
 800033c:	2c00      	cmp	r4, #0
 800033e:	d100      	bne.n	8000342 <__aeabi_dadd+0xb6>
 8000340:	e139      	b.n	80005b6 <__aeabi_dadd+0x32a>
 8000342:	0020      	movs	r0, r4
 8000344:	f000 fe38 	bl	8000fb8 <__clzsi2>
 8000348:	0003      	movs	r3, r0
 800034a:	3b08      	subs	r3, #8
 800034c:	2120      	movs	r1, #32
 800034e:	0028      	movs	r0, r5
 8000350:	1aca      	subs	r2, r1, r3
 8000352:	40d0      	lsrs	r0, r2
 8000354:	409c      	lsls	r4, r3
 8000356:	0002      	movs	r2, r0
 8000358:	409d      	lsls	r5, r3
 800035a:	4322      	orrs	r2, r4
 800035c:	429f      	cmp	r7, r3
 800035e:	dd00      	ble.n	8000362 <__aeabi_dadd+0xd6>
 8000360:	e173      	b.n	800064a <__aeabi_dadd+0x3be>
 8000362:	1bd8      	subs	r0, r3, r7
 8000364:	3001      	adds	r0, #1
 8000366:	1a09      	subs	r1, r1, r0
 8000368:	002c      	movs	r4, r5
 800036a:	408d      	lsls	r5, r1
 800036c:	40c4      	lsrs	r4, r0
 800036e:	1e6b      	subs	r3, r5, #1
 8000370:	419d      	sbcs	r5, r3
 8000372:	0013      	movs	r3, r2
 8000374:	40c2      	lsrs	r2, r0
 8000376:	408b      	lsls	r3, r1
 8000378:	4325      	orrs	r5, r4
 800037a:	2700      	movs	r7, #0
 800037c:	0014      	movs	r4, r2
 800037e:	431d      	orrs	r5, r3
 8000380:	076b      	lsls	r3, r5, #29
 8000382:	d009      	beq.n	8000398 <__aeabi_dadd+0x10c>
 8000384:	230f      	movs	r3, #15
 8000386:	402b      	ands	r3, r5
 8000388:	2b04      	cmp	r3, #4
 800038a:	d005      	beq.n	8000398 <__aeabi_dadd+0x10c>
 800038c:	1d2b      	adds	r3, r5, #4
 800038e:	42ab      	cmp	r3, r5
 8000390:	41ad      	sbcs	r5, r5
 8000392:	426d      	negs	r5, r5
 8000394:	1964      	adds	r4, r4, r5
 8000396:	001d      	movs	r5, r3
 8000398:	0223      	lsls	r3, r4, #8
 800039a:	d400      	bmi.n	800039e <__aeabi_dadd+0x112>
 800039c:	e12d      	b.n	80005fa <__aeabi_dadd+0x36e>
 800039e:	4a9d      	ldr	r2, [pc, #628]	@ (8000614 <__aeabi_dadd+0x388>)
 80003a0:	3701      	adds	r7, #1
 80003a2:	4297      	cmp	r7, r2
 80003a4:	d100      	bne.n	80003a8 <__aeabi_dadd+0x11c>
 80003a6:	e0d3      	b.n	8000550 <__aeabi_dadd+0x2c4>
 80003a8:	4646      	mov	r6, r8
 80003aa:	499b      	ldr	r1, [pc, #620]	@ (8000618 <__aeabi_dadd+0x38c>)
 80003ac:	08ed      	lsrs	r5, r5, #3
 80003ae:	4021      	ands	r1, r4
 80003b0:	074a      	lsls	r2, r1, #29
 80003b2:	432a      	orrs	r2, r5
 80003b4:	057c      	lsls	r4, r7, #21
 80003b6:	024d      	lsls	r5, r1, #9
 80003b8:	0b2d      	lsrs	r5, r5, #12
 80003ba:	0d64      	lsrs	r4, r4, #21
 80003bc:	0524      	lsls	r4, r4, #20
 80003be:	432c      	orrs	r4, r5
 80003c0:	07f6      	lsls	r6, r6, #31
 80003c2:	4334      	orrs	r4, r6
 80003c4:	0010      	movs	r0, r2
 80003c6:	0021      	movs	r1, r4
 80003c8:	b003      	add	sp, #12
 80003ca:	bcf0      	pop	{r4, r5, r6, r7}
 80003cc:	46bb      	mov	fp, r7
 80003ce:	46b2      	mov	sl, r6
 80003d0:	46a9      	mov	r9, r5
 80003d2:	46a0      	mov	r8, r4
 80003d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d100      	bne.n	80003dc <__aeabi_dadd+0x150>
 80003da:	e084      	b.n	80004e6 <__aeabi_dadd+0x25a>
 80003dc:	464a      	mov	r2, r9
 80003de:	1bd2      	subs	r2, r2, r7
 80003e0:	2f00      	cmp	r7, #0
 80003e2:	d000      	beq.n	80003e6 <__aeabi_dadd+0x15a>
 80003e4:	e16d      	b.n	80006c2 <__aeabi_dadd+0x436>
 80003e6:	0025      	movs	r5, r4
 80003e8:	4305      	orrs	r5, r0
 80003ea:	d100      	bne.n	80003ee <__aeabi_dadd+0x162>
 80003ec:	e127      	b.n	800063e <__aeabi_dadd+0x3b2>
 80003ee:	1e56      	subs	r6, r2, #1
 80003f0:	2a01      	cmp	r2, #1
 80003f2:	d100      	bne.n	80003f6 <__aeabi_dadd+0x16a>
 80003f4:	e23b      	b.n	800086e <__aeabi_dadd+0x5e2>
 80003f6:	4d87      	ldr	r5, [pc, #540]	@ (8000614 <__aeabi_dadd+0x388>)
 80003f8:	42aa      	cmp	r2, r5
 80003fa:	d100      	bne.n	80003fe <__aeabi_dadd+0x172>
 80003fc:	e26a      	b.n	80008d4 <__aeabi_dadd+0x648>
 80003fe:	2501      	movs	r5, #1
 8000400:	2e38      	cmp	r6, #56	@ 0x38
 8000402:	dc12      	bgt.n	800042a <__aeabi_dadd+0x19e>
 8000404:	0032      	movs	r2, r6
 8000406:	2a1f      	cmp	r2, #31
 8000408:	dd00      	ble.n	800040c <__aeabi_dadd+0x180>
 800040a:	e1f8      	b.n	80007fe <__aeabi_dadd+0x572>
 800040c:	2620      	movs	r6, #32
 800040e:	0025      	movs	r5, r4
 8000410:	1ab6      	subs	r6, r6, r2
 8000412:	0007      	movs	r7, r0
 8000414:	4653      	mov	r3, sl
 8000416:	40b0      	lsls	r0, r6
 8000418:	40d4      	lsrs	r4, r2
 800041a:	40b5      	lsls	r5, r6
 800041c:	40d7      	lsrs	r7, r2
 800041e:	1e46      	subs	r6, r0, #1
 8000420:	41b0      	sbcs	r0, r6
 8000422:	1b1b      	subs	r3, r3, r4
 8000424:	469a      	mov	sl, r3
 8000426:	433d      	orrs	r5, r7
 8000428:	4305      	orrs	r5, r0
 800042a:	4662      	mov	r2, ip
 800042c:	1b55      	subs	r5, r2, r5
 800042e:	45ac      	cmp	ip, r5
 8000430:	4192      	sbcs	r2, r2
 8000432:	4653      	mov	r3, sl
 8000434:	4252      	negs	r2, r2
 8000436:	000e      	movs	r6, r1
 8000438:	464f      	mov	r7, r9
 800043a:	4688      	mov	r8, r1
 800043c:	1a9c      	subs	r4, r3, r2
 800043e:	e778      	b.n	8000332 <__aeabi_dadd+0xa6>
 8000440:	2a00      	cmp	r2, #0
 8000442:	dc00      	bgt.n	8000446 <__aeabi_dadd+0x1ba>
 8000444:	e08e      	b.n	8000564 <__aeabi_dadd+0x2d8>
 8000446:	4649      	mov	r1, r9
 8000448:	2900      	cmp	r1, #0
 800044a:	d175      	bne.n	8000538 <__aeabi_dadd+0x2ac>
 800044c:	4661      	mov	r1, ip
 800044e:	4653      	mov	r3, sl
 8000450:	4319      	orrs	r1, r3
 8000452:	d100      	bne.n	8000456 <__aeabi_dadd+0x1ca>
 8000454:	e0f6      	b.n	8000644 <__aeabi_dadd+0x3b8>
 8000456:	1e51      	subs	r1, r2, #1
 8000458:	2a01      	cmp	r2, #1
 800045a:	d100      	bne.n	800045e <__aeabi_dadd+0x1d2>
 800045c:	e191      	b.n	8000782 <__aeabi_dadd+0x4f6>
 800045e:	4d6d      	ldr	r5, [pc, #436]	@ (8000614 <__aeabi_dadd+0x388>)
 8000460:	42aa      	cmp	r2, r5
 8000462:	d100      	bne.n	8000466 <__aeabi_dadd+0x1da>
 8000464:	e0dc      	b.n	8000620 <__aeabi_dadd+0x394>
 8000466:	2501      	movs	r5, #1
 8000468:	2938      	cmp	r1, #56	@ 0x38
 800046a:	dc14      	bgt.n	8000496 <__aeabi_dadd+0x20a>
 800046c:	000a      	movs	r2, r1
 800046e:	2a1f      	cmp	r2, #31
 8000470:	dd00      	ble.n	8000474 <__aeabi_dadd+0x1e8>
 8000472:	e1a2      	b.n	80007ba <__aeabi_dadd+0x52e>
 8000474:	2120      	movs	r1, #32
 8000476:	4653      	mov	r3, sl
 8000478:	1a89      	subs	r1, r1, r2
 800047a:	408b      	lsls	r3, r1
 800047c:	001d      	movs	r5, r3
 800047e:	4663      	mov	r3, ip
 8000480:	40d3      	lsrs	r3, r2
 8000482:	431d      	orrs	r5, r3
 8000484:	4663      	mov	r3, ip
 8000486:	408b      	lsls	r3, r1
 8000488:	0019      	movs	r1, r3
 800048a:	1e4b      	subs	r3, r1, #1
 800048c:	4199      	sbcs	r1, r3
 800048e:	4653      	mov	r3, sl
 8000490:	40d3      	lsrs	r3, r2
 8000492:	430d      	orrs	r5, r1
 8000494:	18e4      	adds	r4, r4, r3
 8000496:	182d      	adds	r5, r5, r0
 8000498:	4285      	cmp	r5, r0
 800049a:	4180      	sbcs	r0, r0
 800049c:	4240      	negs	r0, r0
 800049e:	1824      	adds	r4, r4, r0
 80004a0:	0223      	lsls	r3, r4, #8
 80004a2:	d559      	bpl.n	8000558 <__aeabi_dadd+0x2cc>
 80004a4:	4b5b      	ldr	r3, [pc, #364]	@ (8000614 <__aeabi_dadd+0x388>)
 80004a6:	3701      	adds	r7, #1
 80004a8:	429f      	cmp	r7, r3
 80004aa:	d051      	beq.n	8000550 <__aeabi_dadd+0x2c4>
 80004ac:	2101      	movs	r1, #1
 80004ae:	4b5a      	ldr	r3, [pc, #360]	@ (8000618 <__aeabi_dadd+0x38c>)
 80004b0:	086a      	lsrs	r2, r5, #1
 80004b2:	401c      	ands	r4, r3
 80004b4:	4029      	ands	r1, r5
 80004b6:	430a      	orrs	r2, r1
 80004b8:	07e5      	lsls	r5, r4, #31
 80004ba:	4315      	orrs	r5, r2
 80004bc:	0864      	lsrs	r4, r4, #1
 80004be:	e75f      	b.n	8000380 <__aeabi_dadd+0xf4>
 80004c0:	4661      	mov	r1, ip
 80004c2:	4653      	mov	r3, sl
 80004c4:	4319      	orrs	r1, r3
 80004c6:	d100      	bne.n	80004ca <__aeabi_dadd+0x23e>
 80004c8:	e0bc      	b.n	8000644 <__aeabi_dadd+0x3b8>
 80004ca:	1e51      	subs	r1, r2, #1
 80004cc:	2a01      	cmp	r2, #1
 80004ce:	d100      	bne.n	80004d2 <__aeabi_dadd+0x246>
 80004d0:	e164      	b.n	800079c <__aeabi_dadd+0x510>
 80004d2:	4d50      	ldr	r5, [pc, #320]	@ (8000614 <__aeabi_dadd+0x388>)
 80004d4:	42aa      	cmp	r2, r5
 80004d6:	d100      	bne.n	80004da <__aeabi_dadd+0x24e>
 80004d8:	e16a      	b.n	80007b0 <__aeabi_dadd+0x524>
 80004da:	2501      	movs	r5, #1
 80004dc:	2938      	cmp	r1, #56	@ 0x38
 80004de:	dd00      	ble.n	80004e2 <__aeabi_dadd+0x256>
 80004e0:	e722      	b.n	8000328 <__aeabi_dadd+0x9c>
 80004e2:	000a      	movs	r2, r1
 80004e4:	e70e      	b.n	8000304 <__aeabi_dadd+0x78>
 80004e6:	4a4d      	ldr	r2, [pc, #308]	@ (800061c <__aeabi_dadd+0x390>)
 80004e8:	1c7d      	adds	r5, r7, #1
 80004ea:	4215      	tst	r5, r2
 80004ec:	d000      	beq.n	80004f0 <__aeabi_dadd+0x264>
 80004ee:	e0d0      	b.n	8000692 <__aeabi_dadd+0x406>
 80004f0:	0025      	movs	r5, r4
 80004f2:	4662      	mov	r2, ip
 80004f4:	4653      	mov	r3, sl
 80004f6:	4305      	orrs	r5, r0
 80004f8:	431a      	orrs	r2, r3
 80004fa:	2f00      	cmp	r7, #0
 80004fc:	d000      	beq.n	8000500 <__aeabi_dadd+0x274>
 80004fe:	e137      	b.n	8000770 <__aeabi_dadd+0x4e4>
 8000500:	2d00      	cmp	r5, #0
 8000502:	d100      	bne.n	8000506 <__aeabi_dadd+0x27a>
 8000504:	e1a8      	b.n	8000858 <__aeabi_dadd+0x5cc>
 8000506:	2a00      	cmp	r2, #0
 8000508:	d100      	bne.n	800050c <__aeabi_dadd+0x280>
 800050a:	e16a      	b.n	80007e2 <__aeabi_dadd+0x556>
 800050c:	4663      	mov	r3, ip
 800050e:	1ac5      	subs	r5, r0, r3
 8000510:	4653      	mov	r3, sl
 8000512:	1ae2      	subs	r2, r4, r3
 8000514:	42a8      	cmp	r0, r5
 8000516:	419b      	sbcs	r3, r3
 8000518:	425b      	negs	r3, r3
 800051a:	1ad3      	subs	r3, r2, r3
 800051c:	021a      	lsls	r2, r3, #8
 800051e:	d400      	bmi.n	8000522 <__aeabi_dadd+0x296>
 8000520:	e203      	b.n	800092a <__aeabi_dadd+0x69e>
 8000522:	4663      	mov	r3, ip
 8000524:	1a1d      	subs	r5, r3, r0
 8000526:	45ac      	cmp	ip, r5
 8000528:	4192      	sbcs	r2, r2
 800052a:	4653      	mov	r3, sl
 800052c:	4252      	negs	r2, r2
 800052e:	1b1c      	subs	r4, r3, r4
 8000530:	000e      	movs	r6, r1
 8000532:	4688      	mov	r8, r1
 8000534:	1aa4      	subs	r4, r4, r2
 8000536:	e723      	b.n	8000380 <__aeabi_dadd+0xf4>
 8000538:	4936      	ldr	r1, [pc, #216]	@ (8000614 <__aeabi_dadd+0x388>)
 800053a:	428f      	cmp	r7, r1
 800053c:	d070      	beq.n	8000620 <__aeabi_dadd+0x394>
 800053e:	2501      	movs	r5, #1
 8000540:	2a38      	cmp	r2, #56	@ 0x38
 8000542:	dca8      	bgt.n	8000496 <__aeabi_dadd+0x20a>
 8000544:	2180      	movs	r1, #128	@ 0x80
 8000546:	4653      	mov	r3, sl
 8000548:	0409      	lsls	r1, r1, #16
 800054a:	430b      	orrs	r3, r1
 800054c:	469a      	mov	sl, r3
 800054e:	e78e      	b.n	800046e <__aeabi_dadd+0x1e2>
 8000550:	003c      	movs	r4, r7
 8000552:	2500      	movs	r5, #0
 8000554:	2200      	movs	r2, #0
 8000556:	e731      	b.n	80003bc <__aeabi_dadd+0x130>
 8000558:	2307      	movs	r3, #7
 800055a:	402b      	ands	r3, r5
 800055c:	2b00      	cmp	r3, #0
 800055e:	d000      	beq.n	8000562 <__aeabi_dadd+0x2d6>
 8000560:	e710      	b.n	8000384 <__aeabi_dadd+0xf8>
 8000562:	e093      	b.n	800068c <__aeabi_dadd+0x400>
 8000564:	2a00      	cmp	r2, #0
 8000566:	d074      	beq.n	8000652 <__aeabi_dadd+0x3c6>
 8000568:	464a      	mov	r2, r9
 800056a:	1bd2      	subs	r2, r2, r7
 800056c:	2f00      	cmp	r7, #0
 800056e:	d100      	bne.n	8000572 <__aeabi_dadd+0x2e6>
 8000570:	e0c7      	b.n	8000702 <__aeabi_dadd+0x476>
 8000572:	4928      	ldr	r1, [pc, #160]	@ (8000614 <__aeabi_dadd+0x388>)
 8000574:	4589      	cmp	r9, r1
 8000576:	d100      	bne.n	800057a <__aeabi_dadd+0x2ee>
 8000578:	e185      	b.n	8000886 <__aeabi_dadd+0x5fa>
 800057a:	2501      	movs	r5, #1
 800057c:	2a38      	cmp	r2, #56	@ 0x38
 800057e:	dc12      	bgt.n	80005a6 <__aeabi_dadd+0x31a>
 8000580:	2180      	movs	r1, #128	@ 0x80
 8000582:	0409      	lsls	r1, r1, #16
 8000584:	430c      	orrs	r4, r1
 8000586:	2a1f      	cmp	r2, #31
 8000588:	dd00      	ble.n	800058c <__aeabi_dadd+0x300>
 800058a:	e1ab      	b.n	80008e4 <__aeabi_dadd+0x658>
 800058c:	2120      	movs	r1, #32
 800058e:	0025      	movs	r5, r4
 8000590:	1a89      	subs	r1, r1, r2
 8000592:	0007      	movs	r7, r0
 8000594:	4088      	lsls	r0, r1
 8000596:	408d      	lsls	r5, r1
 8000598:	40d7      	lsrs	r7, r2
 800059a:	1e41      	subs	r1, r0, #1
 800059c:	4188      	sbcs	r0, r1
 800059e:	40d4      	lsrs	r4, r2
 80005a0:	433d      	orrs	r5, r7
 80005a2:	4305      	orrs	r5, r0
 80005a4:	44a2      	add	sl, r4
 80005a6:	4465      	add	r5, ip
 80005a8:	4565      	cmp	r5, ip
 80005aa:	4192      	sbcs	r2, r2
 80005ac:	4252      	negs	r2, r2
 80005ae:	4452      	add	r2, sl
 80005b0:	0014      	movs	r4, r2
 80005b2:	464f      	mov	r7, r9
 80005b4:	e774      	b.n	80004a0 <__aeabi_dadd+0x214>
 80005b6:	0028      	movs	r0, r5
 80005b8:	f000 fcfe 	bl	8000fb8 <__clzsi2>
 80005bc:	0003      	movs	r3, r0
 80005be:	3318      	adds	r3, #24
 80005c0:	2b1f      	cmp	r3, #31
 80005c2:	dc00      	bgt.n	80005c6 <__aeabi_dadd+0x33a>
 80005c4:	e6c2      	b.n	800034c <__aeabi_dadd+0xc0>
 80005c6:	002a      	movs	r2, r5
 80005c8:	3808      	subs	r0, #8
 80005ca:	4082      	lsls	r2, r0
 80005cc:	429f      	cmp	r7, r3
 80005ce:	dd00      	ble.n	80005d2 <__aeabi_dadd+0x346>
 80005d0:	e0a9      	b.n	8000726 <__aeabi_dadd+0x49a>
 80005d2:	1bdb      	subs	r3, r3, r7
 80005d4:	1c58      	adds	r0, r3, #1
 80005d6:	281f      	cmp	r0, #31
 80005d8:	dc00      	bgt.n	80005dc <__aeabi_dadd+0x350>
 80005da:	e1ac      	b.n	8000936 <__aeabi_dadd+0x6aa>
 80005dc:	0015      	movs	r5, r2
 80005de:	3b1f      	subs	r3, #31
 80005e0:	40dd      	lsrs	r5, r3
 80005e2:	2820      	cmp	r0, #32
 80005e4:	d005      	beq.n	80005f2 <__aeabi_dadd+0x366>
 80005e6:	2340      	movs	r3, #64	@ 0x40
 80005e8:	1a1b      	subs	r3, r3, r0
 80005ea:	409a      	lsls	r2, r3
 80005ec:	1e53      	subs	r3, r2, #1
 80005ee:	419a      	sbcs	r2, r3
 80005f0:	4315      	orrs	r5, r2
 80005f2:	2307      	movs	r3, #7
 80005f4:	2700      	movs	r7, #0
 80005f6:	402b      	ands	r3, r5
 80005f8:	e7b0      	b.n	800055c <__aeabi_dadd+0x2d0>
 80005fa:	08ed      	lsrs	r5, r5, #3
 80005fc:	4b05      	ldr	r3, [pc, #20]	@ (8000614 <__aeabi_dadd+0x388>)
 80005fe:	0762      	lsls	r2, r4, #29
 8000600:	432a      	orrs	r2, r5
 8000602:	08e4      	lsrs	r4, r4, #3
 8000604:	429f      	cmp	r7, r3
 8000606:	d00f      	beq.n	8000628 <__aeabi_dadd+0x39c>
 8000608:	0324      	lsls	r4, r4, #12
 800060a:	0b25      	lsrs	r5, r4, #12
 800060c:	057c      	lsls	r4, r7, #21
 800060e:	0d64      	lsrs	r4, r4, #21
 8000610:	e6d4      	b.n	80003bc <__aeabi_dadd+0x130>
 8000612:	46c0      	nop			@ (mov r8, r8)
 8000614:	000007ff 	.word	0x000007ff
 8000618:	ff7fffff 	.word	0xff7fffff
 800061c:	000007fe 	.word	0x000007fe
 8000620:	08c0      	lsrs	r0, r0, #3
 8000622:	0762      	lsls	r2, r4, #29
 8000624:	4302      	orrs	r2, r0
 8000626:	08e4      	lsrs	r4, r4, #3
 8000628:	0013      	movs	r3, r2
 800062a:	4323      	orrs	r3, r4
 800062c:	d100      	bne.n	8000630 <__aeabi_dadd+0x3a4>
 800062e:	e186      	b.n	800093e <__aeabi_dadd+0x6b2>
 8000630:	2580      	movs	r5, #128	@ 0x80
 8000632:	032d      	lsls	r5, r5, #12
 8000634:	4325      	orrs	r5, r4
 8000636:	032d      	lsls	r5, r5, #12
 8000638:	4cc3      	ldr	r4, [pc, #780]	@ (8000948 <__aeabi_dadd+0x6bc>)
 800063a:	0b2d      	lsrs	r5, r5, #12
 800063c:	e6be      	b.n	80003bc <__aeabi_dadd+0x130>
 800063e:	4660      	mov	r0, ip
 8000640:	4654      	mov	r4, sl
 8000642:	000e      	movs	r6, r1
 8000644:	0017      	movs	r7, r2
 8000646:	08c5      	lsrs	r5, r0, #3
 8000648:	e7d8      	b.n	80005fc <__aeabi_dadd+0x370>
 800064a:	4cc0      	ldr	r4, [pc, #768]	@ (800094c <__aeabi_dadd+0x6c0>)
 800064c:	1aff      	subs	r7, r7, r3
 800064e:	4014      	ands	r4, r2
 8000650:	e696      	b.n	8000380 <__aeabi_dadd+0xf4>
 8000652:	4abf      	ldr	r2, [pc, #764]	@ (8000950 <__aeabi_dadd+0x6c4>)
 8000654:	1c79      	adds	r1, r7, #1
 8000656:	4211      	tst	r1, r2
 8000658:	d16b      	bne.n	8000732 <__aeabi_dadd+0x4a6>
 800065a:	0022      	movs	r2, r4
 800065c:	4302      	orrs	r2, r0
 800065e:	2f00      	cmp	r7, #0
 8000660:	d000      	beq.n	8000664 <__aeabi_dadd+0x3d8>
 8000662:	e0db      	b.n	800081c <__aeabi_dadd+0x590>
 8000664:	2a00      	cmp	r2, #0
 8000666:	d100      	bne.n	800066a <__aeabi_dadd+0x3de>
 8000668:	e12d      	b.n	80008c6 <__aeabi_dadd+0x63a>
 800066a:	4662      	mov	r2, ip
 800066c:	4653      	mov	r3, sl
 800066e:	431a      	orrs	r2, r3
 8000670:	d100      	bne.n	8000674 <__aeabi_dadd+0x3e8>
 8000672:	e0b6      	b.n	80007e2 <__aeabi_dadd+0x556>
 8000674:	4663      	mov	r3, ip
 8000676:	18c5      	adds	r5, r0, r3
 8000678:	4285      	cmp	r5, r0
 800067a:	4180      	sbcs	r0, r0
 800067c:	4454      	add	r4, sl
 800067e:	4240      	negs	r0, r0
 8000680:	1824      	adds	r4, r4, r0
 8000682:	0223      	lsls	r3, r4, #8
 8000684:	d502      	bpl.n	800068c <__aeabi_dadd+0x400>
 8000686:	000f      	movs	r7, r1
 8000688:	4bb0      	ldr	r3, [pc, #704]	@ (800094c <__aeabi_dadd+0x6c0>)
 800068a:	401c      	ands	r4, r3
 800068c:	003a      	movs	r2, r7
 800068e:	0028      	movs	r0, r5
 8000690:	e7d8      	b.n	8000644 <__aeabi_dadd+0x3b8>
 8000692:	4662      	mov	r2, ip
 8000694:	1a85      	subs	r5, r0, r2
 8000696:	42a8      	cmp	r0, r5
 8000698:	4192      	sbcs	r2, r2
 800069a:	4653      	mov	r3, sl
 800069c:	4252      	negs	r2, r2
 800069e:	4691      	mov	r9, r2
 80006a0:	1ae3      	subs	r3, r4, r3
 80006a2:	001a      	movs	r2, r3
 80006a4:	464b      	mov	r3, r9
 80006a6:	1ad2      	subs	r2, r2, r3
 80006a8:	0013      	movs	r3, r2
 80006aa:	4691      	mov	r9, r2
 80006ac:	021a      	lsls	r2, r3, #8
 80006ae:	d454      	bmi.n	800075a <__aeabi_dadd+0x4ce>
 80006b0:	464a      	mov	r2, r9
 80006b2:	464c      	mov	r4, r9
 80006b4:	432a      	orrs	r2, r5
 80006b6:	d000      	beq.n	80006ba <__aeabi_dadd+0x42e>
 80006b8:	e640      	b.n	800033c <__aeabi_dadd+0xb0>
 80006ba:	2600      	movs	r6, #0
 80006bc:	2400      	movs	r4, #0
 80006be:	2500      	movs	r5, #0
 80006c0:	e67c      	b.n	80003bc <__aeabi_dadd+0x130>
 80006c2:	4da1      	ldr	r5, [pc, #644]	@ (8000948 <__aeabi_dadd+0x6bc>)
 80006c4:	45a9      	cmp	r9, r5
 80006c6:	d100      	bne.n	80006ca <__aeabi_dadd+0x43e>
 80006c8:	e090      	b.n	80007ec <__aeabi_dadd+0x560>
 80006ca:	2501      	movs	r5, #1
 80006cc:	2a38      	cmp	r2, #56	@ 0x38
 80006ce:	dd00      	ble.n	80006d2 <__aeabi_dadd+0x446>
 80006d0:	e6ab      	b.n	800042a <__aeabi_dadd+0x19e>
 80006d2:	2580      	movs	r5, #128	@ 0x80
 80006d4:	042d      	lsls	r5, r5, #16
 80006d6:	432c      	orrs	r4, r5
 80006d8:	e695      	b.n	8000406 <__aeabi_dadd+0x17a>
 80006da:	0011      	movs	r1, r2
 80006dc:	4655      	mov	r5, sl
 80006de:	3920      	subs	r1, #32
 80006e0:	40cd      	lsrs	r5, r1
 80006e2:	46a9      	mov	r9, r5
 80006e4:	2a20      	cmp	r2, #32
 80006e6:	d006      	beq.n	80006f6 <__aeabi_dadd+0x46a>
 80006e8:	2140      	movs	r1, #64	@ 0x40
 80006ea:	4653      	mov	r3, sl
 80006ec:	1a8a      	subs	r2, r1, r2
 80006ee:	4093      	lsls	r3, r2
 80006f0:	4662      	mov	r2, ip
 80006f2:	431a      	orrs	r2, r3
 80006f4:	4694      	mov	ip, r2
 80006f6:	4665      	mov	r5, ip
 80006f8:	1e6b      	subs	r3, r5, #1
 80006fa:	419d      	sbcs	r5, r3
 80006fc:	464b      	mov	r3, r9
 80006fe:	431d      	orrs	r5, r3
 8000700:	e612      	b.n	8000328 <__aeabi_dadd+0x9c>
 8000702:	0021      	movs	r1, r4
 8000704:	4301      	orrs	r1, r0
 8000706:	d100      	bne.n	800070a <__aeabi_dadd+0x47e>
 8000708:	e0c4      	b.n	8000894 <__aeabi_dadd+0x608>
 800070a:	1e51      	subs	r1, r2, #1
 800070c:	2a01      	cmp	r2, #1
 800070e:	d100      	bne.n	8000712 <__aeabi_dadd+0x486>
 8000710:	e0fb      	b.n	800090a <__aeabi_dadd+0x67e>
 8000712:	4d8d      	ldr	r5, [pc, #564]	@ (8000948 <__aeabi_dadd+0x6bc>)
 8000714:	42aa      	cmp	r2, r5
 8000716:	d100      	bne.n	800071a <__aeabi_dadd+0x48e>
 8000718:	e0b5      	b.n	8000886 <__aeabi_dadd+0x5fa>
 800071a:	2501      	movs	r5, #1
 800071c:	2938      	cmp	r1, #56	@ 0x38
 800071e:	dd00      	ble.n	8000722 <__aeabi_dadd+0x496>
 8000720:	e741      	b.n	80005a6 <__aeabi_dadd+0x31a>
 8000722:	000a      	movs	r2, r1
 8000724:	e72f      	b.n	8000586 <__aeabi_dadd+0x2fa>
 8000726:	4c89      	ldr	r4, [pc, #548]	@ (800094c <__aeabi_dadd+0x6c0>)
 8000728:	1aff      	subs	r7, r7, r3
 800072a:	4014      	ands	r4, r2
 800072c:	0762      	lsls	r2, r4, #29
 800072e:	08e4      	lsrs	r4, r4, #3
 8000730:	e76a      	b.n	8000608 <__aeabi_dadd+0x37c>
 8000732:	4a85      	ldr	r2, [pc, #532]	@ (8000948 <__aeabi_dadd+0x6bc>)
 8000734:	4291      	cmp	r1, r2
 8000736:	d100      	bne.n	800073a <__aeabi_dadd+0x4ae>
 8000738:	e0e3      	b.n	8000902 <__aeabi_dadd+0x676>
 800073a:	4663      	mov	r3, ip
 800073c:	18c2      	adds	r2, r0, r3
 800073e:	4282      	cmp	r2, r0
 8000740:	4180      	sbcs	r0, r0
 8000742:	0023      	movs	r3, r4
 8000744:	4240      	negs	r0, r0
 8000746:	4453      	add	r3, sl
 8000748:	181b      	adds	r3, r3, r0
 800074a:	07dd      	lsls	r5, r3, #31
 800074c:	085c      	lsrs	r4, r3, #1
 800074e:	2307      	movs	r3, #7
 8000750:	0852      	lsrs	r2, r2, #1
 8000752:	4315      	orrs	r5, r2
 8000754:	000f      	movs	r7, r1
 8000756:	402b      	ands	r3, r5
 8000758:	e700      	b.n	800055c <__aeabi_dadd+0x2d0>
 800075a:	4663      	mov	r3, ip
 800075c:	1a1d      	subs	r5, r3, r0
 800075e:	45ac      	cmp	ip, r5
 8000760:	4192      	sbcs	r2, r2
 8000762:	4653      	mov	r3, sl
 8000764:	4252      	negs	r2, r2
 8000766:	1b1c      	subs	r4, r3, r4
 8000768:	000e      	movs	r6, r1
 800076a:	4688      	mov	r8, r1
 800076c:	1aa4      	subs	r4, r4, r2
 800076e:	e5e5      	b.n	800033c <__aeabi_dadd+0xb0>
 8000770:	2d00      	cmp	r5, #0
 8000772:	d000      	beq.n	8000776 <__aeabi_dadd+0x4ea>
 8000774:	e091      	b.n	800089a <__aeabi_dadd+0x60e>
 8000776:	2a00      	cmp	r2, #0
 8000778:	d138      	bne.n	80007ec <__aeabi_dadd+0x560>
 800077a:	2480      	movs	r4, #128	@ 0x80
 800077c:	2600      	movs	r6, #0
 800077e:	0324      	lsls	r4, r4, #12
 8000780:	e756      	b.n	8000630 <__aeabi_dadd+0x3a4>
 8000782:	4663      	mov	r3, ip
 8000784:	18c5      	adds	r5, r0, r3
 8000786:	4285      	cmp	r5, r0
 8000788:	4180      	sbcs	r0, r0
 800078a:	4454      	add	r4, sl
 800078c:	4240      	negs	r0, r0
 800078e:	1824      	adds	r4, r4, r0
 8000790:	2701      	movs	r7, #1
 8000792:	0223      	lsls	r3, r4, #8
 8000794:	d400      	bmi.n	8000798 <__aeabi_dadd+0x50c>
 8000796:	e6df      	b.n	8000558 <__aeabi_dadd+0x2cc>
 8000798:	2702      	movs	r7, #2
 800079a:	e687      	b.n	80004ac <__aeabi_dadd+0x220>
 800079c:	4663      	mov	r3, ip
 800079e:	1ac5      	subs	r5, r0, r3
 80007a0:	42a8      	cmp	r0, r5
 80007a2:	4180      	sbcs	r0, r0
 80007a4:	4653      	mov	r3, sl
 80007a6:	4240      	negs	r0, r0
 80007a8:	1ae4      	subs	r4, r4, r3
 80007aa:	2701      	movs	r7, #1
 80007ac:	1a24      	subs	r4, r4, r0
 80007ae:	e5c0      	b.n	8000332 <__aeabi_dadd+0xa6>
 80007b0:	0762      	lsls	r2, r4, #29
 80007b2:	08c0      	lsrs	r0, r0, #3
 80007b4:	4302      	orrs	r2, r0
 80007b6:	08e4      	lsrs	r4, r4, #3
 80007b8:	e736      	b.n	8000628 <__aeabi_dadd+0x39c>
 80007ba:	0011      	movs	r1, r2
 80007bc:	4653      	mov	r3, sl
 80007be:	3920      	subs	r1, #32
 80007c0:	40cb      	lsrs	r3, r1
 80007c2:	4699      	mov	r9, r3
 80007c4:	2a20      	cmp	r2, #32
 80007c6:	d006      	beq.n	80007d6 <__aeabi_dadd+0x54a>
 80007c8:	2140      	movs	r1, #64	@ 0x40
 80007ca:	4653      	mov	r3, sl
 80007cc:	1a8a      	subs	r2, r1, r2
 80007ce:	4093      	lsls	r3, r2
 80007d0:	4662      	mov	r2, ip
 80007d2:	431a      	orrs	r2, r3
 80007d4:	4694      	mov	ip, r2
 80007d6:	4665      	mov	r5, ip
 80007d8:	1e6b      	subs	r3, r5, #1
 80007da:	419d      	sbcs	r5, r3
 80007dc:	464b      	mov	r3, r9
 80007de:	431d      	orrs	r5, r3
 80007e0:	e659      	b.n	8000496 <__aeabi_dadd+0x20a>
 80007e2:	0762      	lsls	r2, r4, #29
 80007e4:	08c0      	lsrs	r0, r0, #3
 80007e6:	4302      	orrs	r2, r0
 80007e8:	08e4      	lsrs	r4, r4, #3
 80007ea:	e70d      	b.n	8000608 <__aeabi_dadd+0x37c>
 80007ec:	4653      	mov	r3, sl
 80007ee:	075a      	lsls	r2, r3, #29
 80007f0:	4663      	mov	r3, ip
 80007f2:	08d8      	lsrs	r0, r3, #3
 80007f4:	4653      	mov	r3, sl
 80007f6:	000e      	movs	r6, r1
 80007f8:	4302      	orrs	r2, r0
 80007fa:	08dc      	lsrs	r4, r3, #3
 80007fc:	e714      	b.n	8000628 <__aeabi_dadd+0x39c>
 80007fe:	0015      	movs	r5, r2
 8000800:	0026      	movs	r6, r4
 8000802:	3d20      	subs	r5, #32
 8000804:	40ee      	lsrs	r6, r5
 8000806:	2a20      	cmp	r2, #32
 8000808:	d003      	beq.n	8000812 <__aeabi_dadd+0x586>
 800080a:	2540      	movs	r5, #64	@ 0x40
 800080c:	1aaa      	subs	r2, r5, r2
 800080e:	4094      	lsls	r4, r2
 8000810:	4320      	orrs	r0, r4
 8000812:	1e42      	subs	r2, r0, #1
 8000814:	4190      	sbcs	r0, r2
 8000816:	0005      	movs	r5, r0
 8000818:	4335      	orrs	r5, r6
 800081a:	e606      	b.n	800042a <__aeabi_dadd+0x19e>
 800081c:	2a00      	cmp	r2, #0
 800081e:	d07c      	beq.n	800091a <__aeabi_dadd+0x68e>
 8000820:	4662      	mov	r2, ip
 8000822:	4653      	mov	r3, sl
 8000824:	08c0      	lsrs	r0, r0, #3
 8000826:	431a      	orrs	r2, r3
 8000828:	d100      	bne.n	800082c <__aeabi_dadd+0x5a0>
 800082a:	e6fa      	b.n	8000622 <__aeabi_dadd+0x396>
 800082c:	0762      	lsls	r2, r4, #29
 800082e:	4310      	orrs	r0, r2
 8000830:	2280      	movs	r2, #128	@ 0x80
 8000832:	08e4      	lsrs	r4, r4, #3
 8000834:	0312      	lsls	r2, r2, #12
 8000836:	4214      	tst	r4, r2
 8000838:	d008      	beq.n	800084c <__aeabi_dadd+0x5c0>
 800083a:	08d9      	lsrs	r1, r3, #3
 800083c:	4211      	tst	r1, r2
 800083e:	d105      	bne.n	800084c <__aeabi_dadd+0x5c0>
 8000840:	4663      	mov	r3, ip
 8000842:	08d8      	lsrs	r0, r3, #3
 8000844:	4653      	mov	r3, sl
 8000846:	000c      	movs	r4, r1
 8000848:	075b      	lsls	r3, r3, #29
 800084a:	4318      	orrs	r0, r3
 800084c:	0f42      	lsrs	r2, r0, #29
 800084e:	00c0      	lsls	r0, r0, #3
 8000850:	08c0      	lsrs	r0, r0, #3
 8000852:	0752      	lsls	r2, r2, #29
 8000854:	4302      	orrs	r2, r0
 8000856:	e6e7      	b.n	8000628 <__aeabi_dadd+0x39c>
 8000858:	2a00      	cmp	r2, #0
 800085a:	d100      	bne.n	800085e <__aeabi_dadd+0x5d2>
 800085c:	e72d      	b.n	80006ba <__aeabi_dadd+0x42e>
 800085e:	4663      	mov	r3, ip
 8000860:	08d8      	lsrs	r0, r3, #3
 8000862:	4653      	mov	r3, sl
 8000864:	075a      	lsls	r2, r3, #29
 8000866:	000e      	movs	r6, r1
 8000868:	4302      	orrs	r2, r0
 800086a:	08dc      	lsrs	r4, r3, #3
 800086c:	e6cc      	b.n	8000608 <__aeabi_dadd+0x37c>
 800086e:	4663      	mov	r3, ip
 8000870:	1a1d      	subs	r5, r3, r0
 8000872:	45ac      	cmp	ip, r5
 8000874:	4192      	sbcs	r2, r2
 8000876:	4653      	mov	r3, sl
 8000878:	4252      	negs	r2, r2
 800087a:	1b1c      	subs	r4, r3, r4
 800087c:	000e      	movs	r6, r1
 800087e:	4688      	mov	r8, r1
 8000880:	1aa4      	subs	r4, r4, r2
 8000882:	3701      	adds	r7, #1
 8000884:	e555      	b.n	8000332 <__aeabi_dadd+0xa6>
 8000886:	4663      	mov	r3, ip
 8000888:	08d9      	lsrs	r1, r3, #3
 800088a:	4653      	mov	r3, sl
 800088c:	075a      	lsls	r2, r3, #29
 800088e:	430a      	orrs	r2, r1
 8000890:	08dc      	lsrs	r4, r3, #3
 8000892:	e6c9      	b.n	8000628 <__aeabi_dadd+0x39c>
 8000894:	4660      	mov	r0, ip
 8000896:	4654      	mov	r4, sl
 8000898:	e6d4      	b.n	8000644 <__aeabi_dadd+0x3b8>
 800089a:	08c0      	lsrs	r0, r0, #3
 800089c:	2a00      	cmp	r2, #0
 800089e:	d100      	bne.n	80008a2 <__aeabi_dadd+0x616>
 80008a0:	e6bf      	b.n	8000622 <__aeabi_dadd+0x396>
 80008a2:	0762      	lsls	r2, r4, #29
 80008a4:	4310      	orrs	r0, r2
 80008a6:	2280      	movs	r2, #128	@ 0x80
 80008a8:	08e4      	lsrs	r4, r4, #3
 80008aa:	0312      	lsls	r2, r2, #12
 80008ac:	4214      	tst	r4, r2
 80008ae:	d0cd      	beq.n	800084c <__aeabi_dadd+0x5c0>
 80008b0:	08dd      	lsrs	r5, r3, #3
 80008b2:	4215      	tst	r5, r2
 80008b4:	d1ca      	bne.n	800084c <__aeabi_dadd+0x5c0>
 80008b6:	4663      	mov	r3, ip
 80008b8:	08d8      	lsrs	r0, r3, #3
 80008ba:	4653      	mov	r3, sl
 80008bc:	075b      	lsls	r3, r3, #29
 80008be:	000e      	movs	r6, r1
 80008c0:	002c      	movs	r4, r5
 80008c2:	4318      	orrs	r0, r3
 80008c4:	e7c2      	b.n	800084c <__aeabi_dadd+0x5c0>
 80008c6:	4663      	mov	r3, ip
 80008c8:	08d9      	lsrs	r1, r3, #3
 80008ca:	4653      	mov	r3, sl
 80008cc:	075a      	lsls	r2, r3, #29
 80008ce:	430a      	orrs	r2, r1
 80008d0:	08dc      	lsrs	r4, r3, #3
 80008d2:	e699      	b.n	8000608 <__aeabi_dadd+0x37c>
 80008d4:	4663      	mov	r3, ip
 80008d6:	08d8      	lsrs	r0, r3, #3
 80008d8:	4653      	mov	r3, sl
 80008da:	075a      	lsls	r2, r3, #29
 80008dc:	000e      	movs	r6, r1
 80008de:	4302      	orrs	r2, r0
 80008e0:	08dc      	lsrs	r4, r3, #3
 80008e2:	e6a1      	b.n	8000628 <__aeabi_dadd+0x39c>
 80008e4:	0011      	movs	r1, r2
 80008e6:	0027      	movs	r7, r4
 80008e8:	3920      	subs	r1, #32
 80008ea:	40cf      	lsrs	r7, r1
 80008ec:	2a20      	cmp	r2, #32
 80008ee:	d003      	beq.n	80008f8 <__aeabi_dadd+0x66c>
 80008f0:	2140      	movs	r1, #64	@ 0x40
 80008f2:	1a8a      	subs	r2, r1, r2
 80008f4:	4094      	lsls	r4, r2
 80008f6:	4320      	orrs	r0, r4
 80008f8:	1e42      	subs	r2, r0, #1
 80008fa:	4190      	sbcs	r0, r2
 80008fc:	0005      	movs	r5, r0
 80008fe:	433d      	orrs	r5, r7
 8000900:	e651      	b.n	80005a6 <__aeabi_dadd+0x31a>
 8000902:	000c      	movs	r4, r1
 8000904:	2500      	movs	r5, #0
 8000906:	2200      	movs	r2, #0
 8000908:	e558      	b.n	80003bc <__aeabi_dadd+0x130>
 800090a:	4460      	add	r0, ip
 800090c:	4560      	cmp	r0, ip
 800090e:	4192      	sbcs	r2, r2
 8000910:	4454      	add	r4, sl
 8000912:	4252      	negs	r2, r2
 8000914:	0005      	movs	r5, r0
 8000916:	18a4      	adds	r4, r4, r2
 8000918:	e73a      	b.n	8000790 <__aeabi_dadd+0x504>
 800091a:	4653      	mov	r3, sl
 800091c:	075a      	lsls	r2, r3, #29
 800091e:	4663      	mov	r3, ip
 8000920:	08d9      	lsrs	r1, r3, #3
 8000922:	4653      	mov	r3, sl
 8000924:	430a      	orrs	r2, r1
 8000926:	08dc      	lsrs	r4, r3, #3
 8000928:	e67e      	b.n	8000628 <__aeabi_dadd+0x39c>
 800092a:	001a      	movs	r2, r3
 800092c:	001c      	movs	r4, r3
 800092e:	432a      	orrs	r2, r5
 8000930:	d000      	beq.n	8000934 <__aeabi_dadd+0x6a8>
 8000932:	e6ab      	b.n	800068c <__aeabi_dadd+0x400>
 8000934:	e6c1      	b.n	80006ba <__aeabi_dadd+0x42e>
 8000936:	2120      	movs	r1, #32
 8000938:	2500      	movs	r5, #0
 800093a:	1a09      	subs	r1, r1, r0
 800093c:	e519      	b.n	8000372 <__aeabi_dadd+0xe6>
 800093e:	2200      	movs	r2, #0
 8000940:	2500      	movs	r5, #0
 8000942:	4c01      	ldr	r4, [pc, #4]	@ (8000948 <__aeabi_dadd+0x6bc>)
 8000944:	e53a      	b.n	80003bc <__aeabi_dadd+0x130>
 8000946:	46c0      	nop			@ (mov r8, r8)
 8000948:	000007ff 	.word	0x000007ff
 800094c:	ff7fffff 	.word	0xff7fffff
 8000950:	000007fe 	.word	0x000007fe

08000954 <__aeabi_dmul>:
 8000954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000956:	4657      	mov	r7, sl
 8000958:	46de      	mov	lr, fp
 800095a:	464e      	mov	r6, r9
 800095c:	4645      	mov	r5, r8
 800095e:	b5e0      	push	{r5, r6, r7, lr}
 8000960:	001f      	movs	r7, r3
 8000962:	030b      	lsls	r3, r1, #12
 8000964:	0b1b      	lsrs	r3, r3, #12
 8000966:	0016      	movs	r6, r2
 8000968:	469a      	mov	sl, r3
 800096a:	0fca      	lsrs	r2, r1, #31
 800096c:	004b      	lsls	r3, r1, #1
 800096e:	0004      	movs	r4, r0
 8000970:	4693      	mov	fp, r2
 8000972:	b087      	sub	sp, #28
 8000974:	0d5b      	lsrs	r3, r3, #21
 8000976:	d100      	bne.n	800097a <__aeabi_dmul+0x26>
 8000978:	e0d5      	b.n	8000b26 <__aeabi_dmul+0x1d2>
 800097a:	4abb      	ldr	r2, [pc, #748]	@ (8000c68 <__aeabi_dmul+0x314>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d100      	bne.n	8000982 <__aeabi_dmul+0x2e>
 8000980:	e0f8      	b.n	8000b74 <__aeabi_dmul+0x220>
 8000982:	4651      	mov	r1, sl
 8000984:	0f42      	lsrs	r2, r0, #29
 8000986:	00c9      	lsls	r1, r1, #3
 8000988:	430a      	orrs	r2, r1
 800098a:	2180      	movs	r1, #128	@ 0x80
 800098c:	0409      	lsls	r1, r1, #16
 800098e:	4311      	orrs	r1, r2
 8000990:	00c2      	lsls	r2, r0, #3
 8000992:	4691      	mov	r9, r2
 8000994:	4ab5      	ldr	r2, [pc, #724]	@ (8000c6c <__aeabi_dmul+0x318>)
 8000996:	468a      	mov	sl, r1
 8000998:	189d      	adds	r5, r3, r2
 800099a:	2300      	movs	r3, #0
 800099c:	4698      	mov	r8, r3
 800099e:	9302      	str	r3, [sp, #8]
 80009a0:	033c      	lsls	r4, r7, #12
 80009a2:	007b      	lsls	r3, r7, #1
 80009a4:	0ffa      	lsrs	r2, r7, #31
 80009a6:	0030      	movs	r0, r6
 80009a8:	0b24      	lsrs	r4, r4, #12
 80009aa:	0d5b      	lsrs	r3, r3, #21
 80009ac:	9200      	str	r2, [sp, #0]
 80009ae:	d100      	bne.n	80009b2 <__aeabi_dmul+0x5e>
 80009b0:	e096      	b.n	8000ae0 <__aeabi_dmul+0x18c>
 80009b2:	4aad      	ldr	r2, [pc, #692]	@ (8000c68 <__aeabi_dmul+0x314>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d031      	beq.n	8000a1c <__aeabi_dmul+0xc8>
 80009b8:	0f72      	lsrs	r2, r6, #29
 80009ba:	00e4      	lsls	r4, r4, #3
 80009bc:	4322      	orrs	r2, r4
 80009be:	2480      	movs	r4, #128	@ 0x80
 80009c0:	0424      	lsls	r4, r4, #16
 80009c2:	4314      	orrs	r4, r2
 80009c4:	4aa9      	ldr	r2, [pc, #676]	@ (8000c6c <__aeabi_dmul+0x318>)
 80009c6:	00f0      	lsls	r0, r6, #3
 80009c8:	4694      	mov	ip, r2
 80009ca:	4463      	add	r3, ip
 80009cc:	195b      	adds	r3, r3, r5
 80009ce:	1c5a      	adds	r2, r3, #1
 80009d0:	9201      	str	r2, [sp, #4]
 80009d2:	4642      	mov	r2, r8
 80009d4:	2600      	movs	r6, #0
 80009d6:	2a0a      	cmp	r2, #10
 80009d8:	dc42      	bgt.n	8000a60 <__aeabi_dmul+0x10c>
 80009da:	465a      	mov	r2, fp
 80009dc:	9900      	ldr	r1, [sp, #0]
 80009de:	404a      	eors	r2, r1
 80009e0:	4693      	mov	fp, r2
 80009e2:	4642      	mov	r2, r8
 80009e4:	2a02      	cmp	r2, #2
 80009e6:	dc32      	bgt.n	8000a4e <__aeabi_dmul+0xfa>
 80009e8:	3a01      	subs	r2, #1
 80009ea:	2a01      	cmp	r2, #1
 80009ec:	d900      	bls.n	80009f0 <__aeabi_dmul+0x9c>
 80009ee:	e149      	b.n	8000c84 <__aeabi_dmul+0x330>
 80009f0:	2e02      	cmp	r6, #2
 80009f2:	d100      	bne.n	80009f6 <__aeabi_dmul+0xa2>
 80009f4:	e0ca      	b.n	8000b8c <__aeabi_dmul+0x238>
 80009f6:	2e01      	cmp	r6, #1
 80009f8:	d13d      	bne.n	8000a76 <__aeabi_dmul+0x122>
 80009fa:	2300      	movs	r3, #0
 80009fc:	2400      	movs	r4, #0
 80009fe:	2200      	movs	r2, #0
 8000a00:	0010      	movs	r0, r2
 8000a02:	465a      	mov	r2, fp
 8000a04:	051b      	lsls	r3, r3, #20
 8000a06:	4323      	orrs	r3, r4
 8000a08:	07d2      	lsls	r2, r2, #31
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	0019      	movs	r1, r3
 8000a0e:	b007      	add	sp, #28
 8000a10:	bcf0      	pop	{r4, r5, r6, r7}
 8000a12:	46bb      	mov	fp, r7
 8000a14:	46b2      	mov	sl, r6
 8000a16:	46a9      	mov	r9, r5
 8000a18:	46a0      	mov	r8, r4
 8000a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a1c:	4b92      	ldr	r3, [pc, #584]	@ (8000c68 <__aeabi_dmul+0x314>)
 8000a1e:	4326      	orrs	r6, r4
 8000a20:	18eb      	adds	r3, r5, r3
 8000a22:	2e00      	cmp	r6, #0
 8000a24:	d100      	bne.n	8000a28 <__aeabi_dmul+0xd4>
 8000a26:	e0bb      	b.n	8000ba0 <__aeabi_dmul+0x24c>
 8000a28:	2203      	movs	r2, #3
 8000a2a:	4641      	mov	r1, r8
 8000a2c:	4311      	orrs	r1, r2
 8000a2e:	465a      	mov	r2, fp
 8000a30:	4688      	mov	r8, r1
 8000a32:	9900      	ldr	r1, [sp, #0]
 8000a34:	404a      	eors	r2, r1
 8000a36:	2180      	movs	r1, #128	@ 0x80
 8000a38:	0109      	lsls	r1, r1, #4
 8000a3a:	468c      	mov	ip, r1
 8000a3c:	0029      	movs	r1, r5
 8000a3e:	4461      	add	r1, ip
 8000a40:	9101      	str	r1, [sp, #4]
 8000a42:	4641      	mov	r1, r8
 8000a44:	290a      	cmp	r1, #10
 8000a46:	dd00      	ble.n	8000a4a <__aeabi_dmul+0xf6>
 8000a48:	e233      	b.n	8000eb2 <__aeabi_dmul+0x55e>
 8000a4a:	4693      	mov	fp, r2
 8000a4c:	2603      	movs	r6, #3
 8000a4e:	4642      	mov	r2, r8
 8000a50:	2701      	movs	r7, #1
 8000a52:	4097      	lsls	r7, r2
 8000a54:	21a6      	movs	r1, #166	@ 0xa6
 8000a56:	003a      	movs	r2, r7
 8000a58:	00c9      	lsls	r1, r1, #3
 8000a5a:	400a      	ands	r2, r1
 8000a5c:	420f      	tst	r7, r1
 8000a5e:	d031      	beq.n	8000ac4 <__aeabi_dmul+0x170>
 8000a60:	9e02      	ldr	r6, [sp, #8]
 8000a62:	2e02      	cmp	r6, #2
 8000a64:	d100      	bne.n	8000a68 <__aeabi_dmul+0x114>
 8000a66:	e235      	b.n	8000ed4 <__aeabi_dmul+0x580>
 8000a68:	2e03      	cmp	r6, #3
 8000a6a:	d100      	bne.n	8000a6e <__aeabi_dmul+0x11a>
 8000a6c:	e1d2      	b.n	8000e14 <__aeabi_dmul+0x4c0>
 8000a6e:	4654      	mov	r4, sl
 8000a70:	4648      	mov	r0, r9
 8000a72:	2e01      	cmp	r6, #1
 8000a74:	d0c1      	beq.n	80009fa <__aeabi_dmul+0xa6>
 8000a76:	9a01      	ldr	r2, [sp, #4]
 8000a78:	4b7d      	ldr	r3, [pc, #500]	@ (8000c70 <__aeabi_dmul+0x31c>)
 8000a7a:	4694      	mov	ip, r2
 8000a7c:	4463      	add	r3, ip
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	dc00      	bgt.n	8000a84 <__aeabi_dmul+0x130>
 8000a82:	e0c0      	b.n	8000c06 <__aeabi_dmul+0x2b2>
 8000a84:	0742      	lsls	r2, r0, #29
 8000a86:	d009      	beq.n	8000a9c <__aeabi_dmul+0x148>
 8000a88:	220f      	movs	r2, #15
 8000a8a:	4002      	ands	r2, r0
 8000a8c:	2a04      	cmp	r2, #4
 8000a8e:	d005      	beq.n	8000a9c <__aeabi_dmul+0x148>
 8000a90:	1d02      	adds	r2, r0, #4
 8000a92:	4282      	cmp	r2, r0
 8000a94:	4180      	sbcs	r0, r0
 8000a96:	4240      	negs	r0, r0
 8000a98:	1824      	adds	r4, r4, r0
 8000a9a:	0010      	movs	r0, r2
 8000a9c:	01e2      	lsls	r2, r4, #7
 8000a9e:	d506      	bpl.n	8000aae <__aeabi_dmul+0x15a>
 8000aa0:	4b74      	ldr	r3, [pc, #464]	@ (8000c74 <__aeabi_dmul+0x320>)
 8000aa2:	9a01      	ldr	r2, [sp, #4]
 8000aa4:	401c      	ands	r4, r3
 8000aa6:	2380      	movs	r3, #128	@ 0x80
 8000aa8:	4694      	mov	ip, r2
 8000aaa:	00db      	lsls	r3, r3, #3
 8000aac:	4463      	add	r3, ip
 8000aae:	4a72      	ldr	r2, [pc, #456]	@ (8000c78 <__aeabi_dmul+0x324>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	dc6b      	bgt.n	8000b8c <__aeabi_dmul+0x238>
 8000ab4:	0762      	lsls	r2, r4, #29
 8000ab6:	08c0      	lsrs	r0, r0, #3
 8000ab8:	0264      	lsls	r4, r4, #9
 8000aba:	055b      	lsls	r3, r3, #21
 8000abc:	4302      	orrs	r2, r0
 8000abe:	0b24      	lsrs	r4, r4, #12
 8000ac0:	0d5b      	lsrs	r3, r3, #21
 8000ac2:	e79d      	b.n	8000a00 <__aeabi_dmul+0xac>
 8000ac4:	2190      	movs	r1, #144	@ 0x90
 8000ac6:	0089      	lsls	r1, r1, #2
 8000ac8:	420f      	tst	r7, r1
 8000aca:	d163      	bne.n	8000b94 <__aeabi_dmul+0x240>
 8000acc:	2288      	movs	r2, #136	@ 0x88
 8000ace:	423a      	tst	r2, r7
 8000ad0:	d100      	bne.n	8000ad4 <__aeabi_dmul+0x180>
 8000ad2:	e0d7      	b.n	8000c84 <__aeabi_dmul+0x330>
 8000ad4:	9b00      	ldr	r3, [sp, #0]
 8000ad6:	46a2      	mov	sl, r4
 8000ad8:	469b      	mov	fp, r3
 8000ada:	4681      	mov	r9, r0
 8000adc:	9602      	str	r6, [sp, #8]
 8000ade:	e7bf      	b.n	8000a60 <__aeabi_dmul+0x10c>
 8000ae0:	0023      	movs	r3, r4
 8000ae2:	4333      	orrs	r3, r6
 8000ae4:	d100      	bne.n	8000ae8 <__aeabi_dmul+0x194>
 8000ae6:	e07f      	b.n	8000be8 <__aeabi_dmul+0x294>
 8000ae8:	2c00      	cmp	r4, #0
 8000aea:	d100      	bne.n	8000aee <__aeabi_dmul+0x19a>
 8000aec:	e1ad      	b.n	8000e4a <__aeabi_dmul+0x4f6>
 8000aee:	0020      	movs	r0, r4
 8000af0:	f000 fa62 	bl	8000fb8 <__clzsi2>
 8000af4:	0002      	movs	r2, r0
 8000af6:	0003      	movs	r3, r0
 8000af8:	3a0b      	subs	r2, #11
 8000afa:	201d      	movs	r0, #29
 8000afc:	0019      	movs	r1, r3
 8000afe:	1a82      	subs	r2, r0, r2
 8000b00:	0030      	movs	r0, r6
 8000b02:	3908      	subs	r1, #8
 8000b04:	40d0      	lsrs	r0, r2
 8000b06:	408c      	lsls	r4, r1
 8000b08:	4304      	orrs	r4, r0
 8000b0a:	0030      	movs	r0, r6
 8000b0c:	4088      	lsls	r0, r1
 8000b0e:	4a5b      	ldr	r2, [pc, #364]	@ (8000c7c <__aeabi_dmul+0x328>)
 8000b10:	1aeb      	subs	r3, r5, r3
 8000b12:	4694      	mov	ip, r2
 8000b14:	4463      	add	r3, ip
 8000b16:	1c5a      	adds	r2, r3, #1
 8000b18:	9201      	str	r2, [sp, #4]
 8000b1a:	4642      	mov	r2, r8
 8000b1c:	2600      	movs	r6, #0
 8000b1e:	2a0a      	cmp	r2, #10
 8000b20:	dc00      	bgt.n	8000b24 <__aeabi_dmul+0x1d0>
 8000b22:	e75a      	b.n	80009da <__aeabi_dmul+0x86>
 8000b24:	e79c      	b.n	8000a60 <__aeabi_dmul+0x10c>
 8000b26:	4653      	mov	r3, sl
 8000b28:	4303      	orrs	r3, r0
 8000b2a:	4699      	mov	r9, r3
 8000b2c:	d054      	beq.n	8000bd8 <__aeabi_dmul+0x284>
 8000b2e:	4653      	mov	r3, sl
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d100      	bne.n	8000b36 <__aeabi_dmul+0x1e2>
 8000b34:	e177      	b.n	8000e26 <__aeabi_dmul+0x4d2>
 8000b36:	4650      	mov	r0, sl
 8000b38:	f000 fa3e 	bl	8000fb8 <__clzsi2>
 8000b3c:	230b      	movs	r3, #11
 8000b3e:	425b      	negs	r3, r3
 8000b40:	469c      	mov	ip, r3
 8000b42:	0002      	movs	r2, r0
 8000b44:	4484      	add	ip, r0
 8000b46:	0011      	movs	r1, r2
 8000b48:	4650      	mov	r0, sl
 8000b4a:	3908      	subs	r1, #8
 8000b4c:	4088      	lsls	r0, r1
 8000b4e:	231d      	movs	r3, #29
 8000b50:	4680      	mov	r8, r0
 8000b52:	4660      	mov	r0, ip
 8000b54:	1a1b      	subs	r3, r3, r0
 8000b56:	0020      	movs	r0, r4
 8000b58:	40d8      	lsrs	r0, r3
 8000b5a:	0003      	movs	r3, r0
 8000b5c:	4640      	mov	r0, r8
 8000b5e:	4303      	orrs	r3, r0
 8000b60:	469a      	mov	sl, r3
 8000b62:	0023      	movs	r3, r4
 8000b64:	408b      	lsls	r3, r1
 8000b66:	4699      	mov	r9, r3
 8000b68:	2300      	movs	r3, #0
 8000b6a:	4d44      	ldr	r5, [pc, #272]	@ (8000c7c <__aeabi_dmul+0x328>)
 8000b6c:	4698      	mov	r8, r3
 8000b6e:	1aad      	subs	r5, r5, r2
 8000b70:	9302      	str	r3, [sp, #8]
 8000b72:	e715      	b.n	80009a0 <__aeabi_dmul+0x4c>
 8000b74:	4652      	mov	r2, sl
 8000b76:	4302      	orrs	r2, r0
 8000b78:	4691      	mov	r9, r2
 8000b7a:	d126      	bne.n	8000bca <__aeabi_dmul+0x276>
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	001d      	movs	r5, r3
 8000b80:	2302      	movs	r3, #2
 8000b82:	4692      	mov	sl, r2
 8000b84:	3208      	adds	r2, #8
 8000b86:	4690      	mov	r8, r2
 8000b88:	9302      	str	r3, [sp, #8]
 8000b8a:	e709      	b.n	80009a0 <__aeabi_dmul+0x4c>
 8000b8c:	2400      	movs	r4, #0
 8000b8e:	2200      	movs	r2, #0
 8000b90:	4b35      	ldr	r3, [pc, #212]	@ (8000c68 <__aeabi_dmul+0x314>)
 8000b92:	e735      	b.n	8000a00 <__aeabi_dmul+0xac>
 8000b94:	2300      	movs	r3, #0
 8000b96:	2480      	movs	r4, #128	@ 0x80
 8000b98:	469b      	mov	fp, r3
 8000b9a:	0324      	lsls	r4, r4, #12
 8000b9c:	4b32      	ldr	r3, [pc, #200]	@ (8000c68 <__aeabi_dmul+0x314>)
 8000b9e:	e72f      	b.n	8000a00 <__aeabi_dmul+0xac>
 8000ba0:	2202      	movs	r2, #2
 8000ba2:	4641      	mov	r1, r8
 8000ba4:	4311      	orrs	r1, r2
 8000ba6:	2280      	movs	r2, #128	@ 0x80
 8000ba8:	0112      	lsls	r2, r2, #4
 8000baa:	4694      	mov	ip, r2
 8000bac:	002a      	movs	r2, r5
 8000bae:	4462      	add	r2, ip
 8000bb0:	4688      	mov	r8, r1
 8000bb2:	9201      	str	r2, [sp, #4]
 8000bb4:	290a      	cmp	r1, #10
 8000bb6:	dd00      	ble.n	8000bba <__aeabi_dmul+0x266>
 8000bb8:	e752      	b.n	8000a60 <__aeabi_dmul+0x10c>
 8000bba:	465a      	mov	r2, fp
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	9900      	ldr	r1, [sp, #0]
 8000bc0:	0004      	movs	r4, r0
 8000bc2:	404a      	eors	r2, r1
 8000bc4:	4693      	mov	fp, r2
 8000bc6:	2602      	movs	r6, #2
 8000bc8:	e70b      	b.n	80009e2 <__aeabi_dmul+0x8e>
 8000bca:	220c      	movs	r2, #12
 8000bcc:	001d      	movs	r5, r3
 8000bce:	2303      	movs	r3, #3
 8000bd0:	4681      	mov	r9, r0
 8000bd2:	4690      	mov	r8, r2
 8000bd4:	9302      	str	r3, [sp, #8]
 8000bd6:	e6e3      	b.n	80009a0 <__aeabi_dmul+0x4c>
 8000bd8:	2300      	movs	r3, #0
 8000bda:	469a      	mov	sl, r3
 8000bdc:	3304      	adds	r3, #4
 8000bde:	4698      	mov	r8, r3
 8000be0:	3b03      	subs	r3, #3
 8000be2:	2500      	movs	r5, #0
 8000be4:	9302      	str	r3, [sp, #8]
 8000be6:	e6db      	b.n	80009a0 <__aeabi_dmul+0x4c>
 8000be8:	4642      	mov	r2, r8
 8000bea:	3301      	adds	r3, #1
 8000bec:	431a      	orrs	r2, r3
 8000bee:	002b      	movs	r3, r5
 8000bf0:	4690      	mov	r8, r2
 8000bf2:	1c5a      	adds	r2, r3, #1
 8000bf4:	9201      	str	r2, [sp, #4]
 8000bf6:	4642      	mov	r2, r8
 8000bf8:	2400      	movs	r4, #0
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	2601      	movs	r6, #1
 8000bfe:	2a0a      	cmp	r2, #10
 8000c00:	dc00      	bgt.n	8000c04 <__aeabi_dmul+0x2b0>
 8000c02:	e6ea      	b.n	80009da <__aeabi_dmul+0x86>
 8000c04:	e72c      	b.n	8000a60 <__aeabi_dmul+0x10c>
 8000c06:	2201      	movs	r2, #1
 8000c08:	1ad2      	subs	r2, r2, r3
 8000c0a:	2a38      	cmp	r2, #56	@ 0x38
 8000c0c:	dd00      	ble.n	8000c10 <__aeabi_dmul+0x2bc>
 8000c0e:	e6f4      	b.n	80009fa <__aeabi_dmul+0xa6>
 8000c10:	2a1f      	cmp	r2, #31
 8000c12:	dc00      	bgt.n	8000c16 <__aeabi_dmul+0x2c2>
 8000c14:	e12a      	b.n	8000e6c <__aeabi_dmul+0x518>
 8000c16:	211f      	movs	r1, #31
 8000c18:	4249      	negs	r1, r1
 8000c1a:	1acb      	subs	r3, r1, r3
 8000c1c:	0021      	movs	r1, r4
 8000c1e:	40d9      	lsrs	r1, r3
 8000c20:	000b      	movs	r3, r1
 8000c22:	2a20      	cmp	r2, #32
 8000c24:	d005      	beq.n	8000c32 <__aeabi_dmul+0x2de>
 8000c26:	4a16      	ldr	r2, [pc, #88]	@ (8000c80 <__aeabi_dmul+0x32c>)
 8000c28:	9d01      	ldr	r5, [sp, #4]
 8000c2a:	4694      	mov	ip, r2
 8000c2c:	4465      	add	r5, ip
 8000c2e:	40ac      	lsls	r4, r5
 8000c30:	4320      	orrs	r0, r4
 8000c32:	1e42      	subs	r2, r0, #1
 8000c34:	4190      	sbcs	r0, r2
 8000c36:	4318      	orrs	r0, r3
 8000c38:	2307      	movs	r3, #7
 8000c3a:	0019      	movs	r1, r3
 8000c3c:	2400      	movs	r4, #0
 8000c3e:	4001      	ands	r1, r0
 8000c40:	4203      	tst	r3, r0
 8000c42:	d00c      	beq.n	8000c5e <__aeabi_dmul+0x30a>
 8000c44:	230f      	movs	r3, #15
 8000c46:	4003      	ands	r3, r0
 8000c48:	2b04      	cmp	r3, #4
 8000c4a:	d100      	bne.n	8000c4e <__aeabi_dmul+0x2fa>
 8000c4c:	e140      	b.n	8000ed0 <__aeabi_dmul+0x57c>
 8000c4e:	1d03      	adds	r3, r0, #4
 8000c50:	4283      	cmp	r3, r0
 8000c52:	41a4      	sbcs	r4, r4
 8000c54:	0018      	movs	r0, r3
 8000c56:	4264      	negs	r4, r4
 8000c58:	0761      	lsls	r1, r4, #29
 8000c5a:	0264      	lsls	r4, r4, #9
 8000c5c:	0b24      	lsrs	r4, r4, #12
 8000c5e:	08c2      	lsrs	r2, r0, #3
 8000c60:	2300      	movs	r3, #0
 8000c62:	430a      	orrs	r2, r1
 8000c64:	e6cc      	b.n	8000a00 <__aeabi_dmul+0xac>
 8000c66:	46c0      	nop			@ (mov r8, r8)
 8000c68:	000007ff 	.word	0x000007ff
 8000c6c:	fffffc01 	.word	0xfffffc01
 8000c70:	000003ff 	.word	0x000003ff
 8000c74:	feffffff 	.word	0xfeffffff
 8000c78:	000007fe 	.word	0x000007fe
 8000c7c:	fffffc0d 	.word	0xfffffc0d
 8000c80:	0000043e 	.word	0x0000043e
 8000c84:	4649      	mov	r1, r9
 8000c86:	464a      	mov	r2, r9
 8000c88:	0409      	lsls	r1, r1, #16
 8000c8a:	0c09      	lsrs	r1, r1, #16
 8000c8c:	000d      	movs	r5, r1
 8000c8e:	0c16      	lsrs	r6, r2, #16
 8000c90:	0c02      	lsrs	r2, r0, #16
 8000c92:	0400      	lsls	r0, r0, #16
 8000c94:	0c00      	lsrs	r0, r0, #16
 8000c96:	4345      	muls	r5, r0
 8000c98:	46ac      	mov	ip, r5
 8000c9a:	0005      	movs	r5, r0
 8000c9c:	4375      	muls	r5, r6
 8000c9e:	46a8      	mov	r8, r5
 8000ca0:	0015      	movs	r5, r2
 8000ca2:	000f      	movs	r7, r1
 8000ca4:	4375      	muls	r5, r6
 8000ca6:	9200      	str	r2, [sp, #0]
 8000ca8:	9502      	str	r5, [sp, #8]
 8000caa:	002a      	movs	r2, r5
 8000cac:	9d00      	ldr	r5, [sp, #0]
 8000cae:	436f      	muls	r7, r5
 8000cb0:	4665      	mov	r5, ip
 8000cb2:	0c2d      	lsrs	r5, r5, #16
 8000cb4:	46a9      	mov	r9, r5
 8000cb6:	4447      	add	r7, r8
 8000cb8:	444f      	add	r7, r9
 8000cba:	45b8      	cmp	r8, r7
 8000cbc:	d905      	bls.n	8000cca <__aeabi_dmul+0x376>
 8000cbe:	0015      	movs	r5, r2
 8000cc0:	2280      	movs	r2, #128	@ 0x80
 8000cc2:	0252      	lsls	r2, r2, #9
 8000cc4:	4690      	mov	r8, r2
 8000cc6:	4445      	add	r5, r8
 8000cc8:	9502      	str	r5, [sp, #8]
 8000cca:	0c3d      	lsrs	r5, r7, #16
 8000ccc:	9503      	str	r5, [sp, #12]
 8000cce:	4665      	mov	r5, ip
 8000cd0:	042d      	lsls	r5, r5, #16
 8000cd2:	043f      	lsls	r7, r7, #16
 8000cd4:	0c2d      	lsrs	r5, r5, #16
 8000cd6:	46ac      	mov	ip, r5
 8000cd8:	003d      	movs	r5, r7
 8000cda:	4465      	add	r5, ip
 8000cdc:	9504      	str	r5, [sp, #16]
 8000cde:	0c25      	lsrs	r5, r4, #16
 8000ce0:	0424      	lsls	r4, r4, #16
 8000ce2:	0c24      	lsrs	r4, r4, #16
 8000ce4:	46ac      	mov	ip, r5
 8000ce6:	0025      	movs	r5, r4
 8000ce8:	4375      	muls	r5, r6
 8000cea:	46a8      	mov	r8, r5
 8000cec:	4665      	mov	r5, ip
 8000cee:	000f      	movs	r7, r1
 8000cf0:	4369      	muls	r1, r5
 8000cf2:	4441      	add	r1, r8
 8000cf4:	4689      	mov	r9, r1
 8000cf6:	4367      	muls	r7, r4
 8000cf8:	0c39      	lsrs	r1, r7, #16
 8000cfa:	4449      	add	r1, r9
 8000cfc:	436e      	muls	r6, r5
 8000cfe:	4588      	cmp	r8, r1
 8000d00:	d903      	bls.n	8000d0a <__aeabi_dmul+0x3b6>
 8000d02:	2280      	movs	r2, #128	@ 0x80
 8000d04:	0252      	lsls	r2, r2, #9
 8000d06:	4690      	mov	r8, r2
 8000d08:	4446      	add	r6, r8
 8000d0a:	0c0d      	lsrs	r5, r1, #16
 8000d0c:	46a8      	mov	r8, r5
 8000d0e:	0035      	movs	r5, r6
 8000d10:	4445      	add	r5, r8
 8000d12:	9505      	str	r5, [sp, #20]
 8000d14:	9d03      	ldr	r5, [sp, #12]
 8000d16:	043f      	lsls	r7, r7, #16
 8000d18:	46a8      	mov	r8, r5
 8000d1a:	0c3f      	lsrs	r7, r7, #16
 8000d1c:	0409      	lsls	r1, r1, #16
 8000d1e:	19c9      	adds	r1, r1, r7
 8000d20:	4488      	add	r8, r1
 8000d22:	4645      	mov	r5, r8
 8000d24:	9503      	str	r5, [sp, #12]
 8000d26:	4655      	mov	r5, sl
 8000d28:	042e      	lsls	r6, r5, #16
 8000d2a:	0c36      	lsrs	r6, r6, #16
 8000d2c:	0c2f      	lsrs	r7, r5, #16
 8000d2e:	0035      	movs	r5, r6
 8000d30:	4345      	muls	r5, r0
 8000d32:	4378      	muls	r0, r7
 8000d34:	4681      	mov	r9, r0
 8000d36:	0038      	movs	r0, r7
 8000d38:	46a8      	mov	r8, r5
 8000d3a:	0c2d      	lsrs	r5, r5, #16
 8000d3c:	46aa      	mov	sl, r5
 8000d3e:	9a00      	ldr	r2, [sp, #0]
 8000d40:	4350      	muls	r0, r2
 8000d42:	4372      	muls	r2, r6
 8000d44:	444a      	add	r2, r9
 8000d46:	4452      	add	r2, sl
 8000d48:	4591      	cmp	r9, r2
 8000d4a:	d903      	bls.n	8000d54 <__aeabi_dmul+0x400>
 8000d4c:	2580      	movs	r5, #128	@ 0x80
 8000d4e:	026d      	lsls	r5, r5, #9
 8000d50:	46a9      	mov	r9, r5
 8000d52:	4448      	add	r0, r9
 8000d54:	0c15      	lsrs	r5, r2, #16
 8000d56:	46a9      	mov	r9, r5
 8000d58:	4645      	mov	r5, r8
 8000d5a:	042d      	lsls	r5, r5, #16
 8000d5c:	0c2d      	lsrs	r5, r5, #16
 8000d5e:	46a8      	mov	r8, r5
 8000d60:	4665      	mov	r5, ip
 8000d62:	437d      	muls	r5, r7
 8000d64:	0412      	lsls	r2, r2, #16
 8000d66:	4448      	add	r0, r9
 8000d68:	4490      	add	r8, r2
 8000d6a:	46a9      	mov	r9, r5
 8000d6c:	0032      	movs	r2, r6
 8000d6e:	4665      	mov	r5, ip
 8000d70:	4362      	muls	r2, r4
 8000d72:	436e      	muls	r6, r5
 8000d74:	437c      	muls	r4, r7
 8000d76:	0c17      	lsrs	r7, r2, #16
 8000d78:	1936      	adds	r6, r6, r4
 8000d7a:	19bf      	adds	r7, r7, r6
 8000d7c:	42bc      	cmp	r4, r7
 8000d7e:	d903      	bls.n	8000d88 <__aeabi_dmul+0x434>
 8000d80:	2480      	movs	r4, #128	@ 0x80
 8000d82:	0264      	lsls	r4, r4, #9
 8000d84:	46a4      	mov	ip, r4
 8000d86:	44e1      	add	r9, ip
 8000d88:	9c02      	ldr	r4, [sp, #8]
 8000d8a:	9e03      	ldr	r6, [sp, #12]
 8000d8c:	46a4      	mov	ip, r4
 8000d8e:	9d05      	ldr	r5, [sp, #20]
 8000d90:	4466      	add	r6, ip
 8000d92:	428e      	cmp	r6, r1
 8000d94:	4189      	sbcs	r1, r1
 8000d96:	46ac      	mov	ip, r5
 8000d98:	0412      	lsls	r2, r2, #16
 8000d9a:	043c      	lsls	r4, r7, #16
 8000d9c:	0c12      	lsrs	r2, r2, #16
 8000d9e:	18a2      	adds	r2, r4, r2
 8000da0:	4462      	add	r2, ip
 8000da2:	4249      	negs	r1, r1
 8000da4:	1854      	adds	r4, r2, r1
 8000da6:	4446      	add	r6, r8
 8000da8:	46a4      	mov	ip, r4
 8000daa:	4546      	cmp	r6, r8
 8000dac:	41a4      	sbcs	r4, r4
 8000dae:	4682      	mov	sl, r0
 8000db0:	4264      	negs	r4, r4
 8000db2:	46a0      	mov	r8, r4
 8000db4:	42aa      	cmp	r2, r5
 8000db6:	4192      	sbcs	r2, r2
 8000db8:	458c      	cmp	ip, r1
 8000dba:	4189      	sbcs	r1, r1
 8000dbc:	44e2      	add	sl, ip
 8000dbe:	44d0      	add	r8, sl
 8000dc0:	4249      	negs	r1, r1
 8000dc2:	4252      	negs	r2, r2
 8000dc4:	430a      	orrs	r2, r1
 8000dc6:	45a0      	cmp	r8, r4
 8000dc8:	41a4      	sbcs	r4, r4
 8000dca:	4582      	cmp	sl, r0
 8000dcc:	4189      	sbcs	r1, r1
 8000dce:	4264      	negs	r4, r4
 8000dd0:	4249      	negs	r1, r1
 8000dd2:	430c      	orrs	r4, r1
 8000dd4:	4641      	mov	r1, r8
 8000dd6:	0c3f      	lsrs	r7, r7, #16
 8000dd8:	19d2      	adds	r2, r2, r7
 8000dda:	1912      	adds	r2, r2, r4
 8000ddc:	0dcc      	lsrs	r4, r1, #23
 8000dde:	9904      	ldr	r1, [sp, #16]
 8000de0:	0270      	lsls	r0, r6, #9
 8000de2:	4308      	orrs	r0, r1
 8000de4:	1e41      	subs	r1, r0, #1
 8000de6:	4188      	sbcs	r0, r1
 8000de8:	4641      	mov	r1, r8
 8000dea:	444a      	add	r2, r9
 8000dec:	0df6      	lsrs	r6, r6, #23
 8000dee:	0252      	lsls	r2, r2, #9
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0249      	lsls	r1, r1, #9
 8000df4:	4314      	orrs	r4, r2
 8000df6:	4308      	orrs	r0, r1
 8000df8:	01d2      	lsls	r2, r2, #7
 8000dfa:	d535      	bpl.n	8000e68 <__aeabi_dmul+0x514>
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	0843      	lsrs	r3, r0, #1
 8000e00:	4002      	ands	r2, r0
 8000e02:	4313      	orrs	r3, r2
 8000e04:	07e0      	lsls	r0, r4, #31
 8000e06:	4318      	orrs	r0, r3
 8000e08:	0864      	lsrs	r4, r4, #1
 8000e0a:	e634      	b.n	8000a76 <__aeabi_dmul+0x122>
 8000e0c:	9b00      	ldr	r3, [sp, #0]
 8000e0e:	46a2      	mov	sl, r4
 8000e10:	469b      	mov	fp, r3
 8000e12:	4681      	mov	r9, r0
 8000e14:	2480      	movs	r4, #128	@ 0x80
 8000e16:	4653      	mov	r3, sl
 8000e18:	0324      	lsls	r4, r4, #12
 8000e1a:	431c      	orrs	r4, r3
 8000e1c:	0324      	lsls	r4, r4, #12
 8000e1e:	464a      	mov	r2, r9
 8000e20:	4b2e      	ldr	r3, [pc, #184]	@ (8000edc <__aeabi_dmul+0x588>)
 8000e22:	0b24      	lsrs	r4, r4, #12
 8000e24:	e5ec      	b.n	8000a00 <__aeabi_dmul+0xac>
 8000e26:	f000 f8c7 	bl	8000fb8 <__clzsi2>
 8000e2a:	2315      	movs	r3, #21
 8000e2c:	469c      	mov	ip, r3
 8000e2e:	4484      	add	ip, r0
 8000e30:	0002      	movs	r2, r0
 8000e32:	4663      	mov	r3, ip
 8000e34:	3220      	adds	r2, #32
 8000e36:	2b1c      	cmp	r3, #28
 8000e38:	dc00      	bgt.n	8000e3c <__aeabi_dmul+0x4e8>
 8000e3a:	e684      	b.n	8000b46 <__aeabi_dmul+0x1f2>
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	4699      	mov	r9, r3
 8000e40:	0023      	movs	r3, r4
 8000e42:	3808      	subs	r0, #8
 8000e44:	4083      	lsls	r3, r0
 8000e46:	469a      	mov	sl, r3
 8000e48:	e68e      	b.n	8000b68 <__aeabi_dmul+0x214>
 8000e4a:	f000 f8b5 	bl	8000fb8 <__clzsi2>
 8000e4e:	0002      	movs	r2, r0
 8000e50:	0003      	movs	r3, r0
 8000e52:	3215      	adds	r2, #21
 8000e54:	3320      	adds	r3, #32
 8000e56:	2a1c      	cmp	r2, #28
 8000e58:	dc00      	bgt.n	8000e5c <__aeabi_dmul+0x508>
 8000e5a:	e64e      	b.n	8000afa <__aeabi_dmul+0x1a6>
 8000e5c:	0002      	movs	r2, r0
 8000e5e:	0034      	movs	r4, r6
 8000e60:	3a08      	subs	r2, #8
 8000e62:	2000      	movs	r0, #0
 8000e64:	4094      	lsls	r4, r2
 8000e66:	e652      	b.n	8000b0e <__aeabi_dmul+0x1ba>
 8000e68:	9301      	str	r3, [sp, #4]
 8000e6a:	e604      	b.n	8000a76 <__aeabi_dmul+0x122>
 8000e6c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ee0 <__aeabi_dmul+0x58c>)
 8000e6e:	0021      	movs	r1, r4
 8000e70:	469c      	mov	ip, r3
 8000e72:	0003      	movs	r3, r0
 8000e74:	9d01      	ldr	r5, [sp, #4]
 8000e76:	40d3      	lsrs	r3, r2
 8000e78:	4465      	add	r5, ip
 8000e7a:	40a9      	lsls	r1, r5
 8000e7c:	4319      	orrs	r1, r3
 8000e7e:	0003      	movs	r3, r0
 8000e80:	40ab      	lsls	r3, r5
 8000e82:	1e58      	subs	r0, r3, #1
 8000e84:	4183      	sbcs	r3, r0
 8000e86:	4319      	orrs	r1, r3
 8000e88:	0008      	movs	r0, r1
 8000e8a:	40d4      	lsrs	r4, r2
 8000e8c:	074b      	lsls	r3, r1, #29
 8000e8e:	d009      	beq.n	8000ea4 <__aeabi_dmul+0x550>
 8000e90:	230f      	movs	r3, #15
 8000e92:	400b      	ands	r3, r1
 8000e94:	2b04      	cmp	r3, #4
 8000e96:	d005      	beq.n	8000ea4 <__aeabi_dmul+0x550>
 8000e98:	1d0b      	adds	r3, r1, #4
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	4180      	sbcs	r0, r0
 8000e9e:	4240      	negs	r0, r0
 8000ea0:	1824      	adds	r4, r4, r0
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	0223      	lsls	r3, r4, #8
 8000ea6:	d400      	bmi.n	8000eaa <__aeabi_dmul+0x556>
 8000ea8:	e6d6      	b.n	8000c58 <__aeabi_dmul+0x304>
 8000eaa:	2301      	movs	r3, #1
 8000eac:	2400      	movs	r4, #0
 8000eae:	2200      	movs	r2, #0
 8000eb0:	e5a6      	b.n	8000a00 <__aeabi_dmul+0xac>
 8000eb2:	290f      	cmp	r1, #15
 8000eb4:	d1aa      	bne.n	8000e0c <__aeabi_dmul+0x4b8>
 8000eb6:	2380      	movs	r3, #128	@ 0x80
 8000eb8:	4652      	mov	r2, sl
 8000eba:	031b      	lsls	r3, r3, #12
 8000ebc:	421a      	tst	r2, r3
 8000ebe:	d0a9      	beq.n	8000e14 <__aeabi_dmul+0x4c0>
 8000ec0:	421c      	tst	r4, r3
 8000ec2:	d1a7      	bne.n	8000e14 <__aeabi_dmul+0x4c0>
 8000ec4:	431c      	orrs	r4, r3
 8000ec6:	9b00      	ldr	r3, [sp, #0]
 8000ec8:	0002      	movs	r2, r0
 8000eca:	469b      	mov	fp, r3
 8000ecc:	4b03      	ldr	r3, [pc, #12]	@ (8000edc <__aeabi_dmul+0x588>)
 8000ece:	e597      	b.n	8000a00 <__aeabi_dmul+0xac>
 8000ed0:	2400      	movs	r4, #0
 8000ed2:	e6c1      	b.n	8000c58 <__aeabi_dmul+0x304>
 8000ed4:	2400      	movs	r4, #0
 8000ed6:	4b01      	ldr	r3, [pc, #4]	@ (8000edc <__aeabi_dmul+0x588>)
 8000ed8:	0022      	movs	r2, r4
 8000eda:	e591      	b.n	8000a00 <__aeabi_dmul+0xac>
 8000edc:	000007ff 	.word	0x000007ff
 8000ee0:	0000041e 	.word	0x0000041e

08000ee4 <__aeabi_d2iz>:
 8000ee4:	000b      	movs	r3, r1
 8000ee6:	0002      	movs	r2, r0
 8000ee8:	b570      	push	{r4, r5, r6, lr}
 8000eea:	4d16      	ldr	r5, [pc, #88]	@ (8000f44 <__aeabi_d2iz+0x60>)
 8000eec:	030c      	lsls	r4, r1, #12
 8000eee:	b082      	sub	sp, #8
 8000ef0:	0049      	lsls	r1, r1, #1
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	9200      	str	r2, [sp, #0]
 8000ef6:	9301      	str	r3, [sp, #4]
 8000ef8:	0b24      	lsrs	r4, r4, #12
 8000efa:	0d49      	lsrs	r1, r1, #21
 8000efc:	0fde      	lsrs	r6, r3, #31
 8000efe:	42a9      	cmp	r1, r5
 8000f00:	dd04      	ble.n	8000f0c <__aeabi_d2iz+0x28>
 8000f02:	4811      	ldr	r0, [pc, #68]	@ (8000f48 <__aeabi_d2iz+0x64>)
 8000f04:	4281      	cmp	r1, r0
 8000f06:	dd03      	ble.n	8000f10 <__aeabi_d2iz+0x2c>
 8000f08:	4b10      	ldr	r3, [pc, #64]	@ (8000f4c <__aeabi_d2iz+0x68>)
 8000f0a:	18f0      	adds	r0, r6, r3
 8000f0c:	b002      	add	sp, #8
 8000f0e:	bd70      	pop	{r4, r5, r6, pc}
 8000f10:	2080      	movs	r0, #128	@ 0x80
 8000f12:	0340      	lsls	r0, r0, #13
 8000f14:	4320      	orrs	r0, r4
 8000f16:	4c0e      	ldr	r4, [pc, #56]	@ (8000f50 <__aeabi_d2iz+0x6c>)
 8000f18:	1a64      	subs	r4, r4, r1
 8000f1a:	2c1f      	cmp	r4, #31
 8000f1c:	dd08      	ble.n	8000f30 <__aeabi_d2iz+0x4c>
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f54 <__aeabi_d2iz+0x70>)
 8000f20:	1a5b      	subs	r3, r3, r1
 8000f22:	40d8      	lsrs	r0, r3
 8000f24:	0003      	movs	r3, r0
 8000f26:	4258      	negs	r0, r3
 8000f28:	2e00      	cmp	r6, #0
 8000f2a:	d1ef      	bne.n	8000f0c <__aeabi_d2iz+0x28>
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	e7ed      	b.n	8000f0c <__aeabi_d2iz+0x28>
 8000f30:	4b09      	ldr	r3, [pc, #36]	@ (8000f58 <__aeabi_d2iz+0x74>)
 8000f32:	9a00      	ldr	r2, [sp, #0]
 8000f34:	469c      	mov	ip, r3
 8000f36:	0003      	movs	r3, r0
 8000f38:	4461      	add	r1, ip
 8000f3a:	408b      	lsls	r3, r1
 8000f3c:	40e2      	lsrs	r2, r4
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	e7f1      	b.n	8000f26 <__aeabi_d2iz+0x42>
 8000f42:	46c0      	nop			@ (mov r8, r8)
 8000f44:	000003fe 	.word	0x000003fe
 8000f48:	0000041d 	.word	0x0000041d
 8000f4c:	7fffffff 	.word	0x7fffffff
 8000f50:	00000433 	.word	0x00000433
 8000f54:	00000413 	.word	0x00000413
 8000f58:	fffffbed 	.word	0xfffffbed

08000f5c <__aeabi_i2d>:
 8000f5c:	b570      	push	{r4, r5, r6, lr}
 8000f5e:	2800      	cmp	r0, #0
 8000f60:	d016      	beq.n	8000f90 <__aeabi_i2d+0x34>
 8000f62:	17c3      	asrs	r3, r0, #31
 8000f64:	18c5      	adds	r5, r0, r3
 8000f66:	405d      	eors	r5, r3
 8000f68:	0fc4      	lsrs	r4, r0, #31
 8000f6a:	0028      	movs	r0, r5
 8000f6c:	f000 f824 	bl	8000fb8 <__clzsi2>
 8000f70:	4b10      	ldr	r3, [pc, #64]	@ (8000fb4 <__aeabi_i2d+0x58>)
 8000f72:	1a1b      	subs	r3, r3, r0
 8000f74:	055b      	lsls	r3, r3, #21
 8000f76:	0d5b      	lsrs	r3, r3, #21
 8000f78:	280a      	cmp	r0, #10
 8000f7a:	dc14      	bgt.n	8000fa6 <__aeabi_i2d+0x4a>
 8000f7c:	0002      	movs	r2, r0
 8000f7e:	002e      	movs	r6, r5
 8000f80:	3215      	adds	r2, #21
 8000f82:	4096      	lsls	r6, r2
 8000f84:	220b      	movs	r2, #11
 8000f86:	1a12      	subs	r2, r2, r0
 8000f88:	40d5      	lsrs	r5, r2
 8000f8a:	032d      	lsls	r5, r5, #12
 8000f8c:	0b2d      	lsrs	r5, r5, #12
 8000f8e:	e003      	b.n	8000f98 <__aeabi_i2d+0x3c>
 8000f90:	2400      	movs	r4, #0
 8000f92:	2300      	movs	r3, #0
 8000f94:	2500      	movs	r5, #0
 8000f96:	2600      	movs	r6, #0
 8000f98:	051b      	lsls	r3, r3, #20
 8000f9a:	432b      	orrs	r3, r5
 8000f9c:	07e4      	lsls	r4, r4, #31
 8000f9e:	4323      	orrs	r3, r4
 8000fa0:	0030      	movs	r0, r6
 8000fa2:	0019      	movs	r1, r3
 8000fa4:	bd70      	pop	{r4, r5, r6, pc}
 8000fa6:	380b      	subs	r0, #11
 8000fa8:	4085      	lsls	r5, r0
 8000faa:	032d      	lsls	r5, r5, #12
 8000fac:	2600      	movs	r6, #0
 8000fae:	0b2d      	lsrs	r5, r5, #12
 8000fb0:	e7f2      	b.n	8000f98 <__aeabi_i2d+0x3c>
 8000fb2:	46c0      	nop			@ (mov r8, r8)
 8000fb4:	0000041e 	.word	0x0000041e

08000fb8 <__clzsi2>:
 8000fb8:	211c      	movs	r1, #28
 8000fba:	2301      	movs	r3, #1
 8000fbc:	041b      	lsls	r3, r3, #16
 8000fbe:	4298      	cmp	r0, r3
 8000fc0:	d301      	bcc.n	8000fc6 <__clzsi2+0xe>
 8000fc2:	0c00      	lsrs	r0, r0, #16
 8000fc4:	3910      	subs	r1, #16
 8000fc6:	0a1b      	lsrs	r3, r3, #8
 8000fc8:	4298      	cmp	r0, r3
 8000fca:	d301      	bcc.n	8000fd0 <__clzsi2+0x18>
 8000fcc:	0a00      	lsrs	r0, r0, #8
 8000fce:	3908      	subs	r1, #8
 8000fd0:	091b      	lsrs	r3, r3, #4
 8000fd2:	4298      	cmp	r0, r3
 8000fd4:	d301      	bcc.n	8000fda <__clzsi2+0x22>
 8000fd6:	0900      	lsrs	r0, r0, #4
 8000fd8:	3904      	subs	r1, #4
 8000fda:	a202      	add	r2, pc, #8	@ (adr r2, 8000fe4 <__clzsi2+0x2c>)
 8000fdc:	5c10      	ldrb	r0, [r2, r0]
 8000fde:	1840      	adds	r0, r0, r1
 8000fe0:	4770      	bx	lr
 8000fe2:	46c0      	nop			@ (mov r8, r8)
 8000fe4:	02020304 	.word	0x02020304
 8000fe8:	01010101 	.word	0x01010101
	...

08000ff4 <HAL_GPIO_EXTI_Rising_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// EXTI Line9 External Interrupt ISR Handler CallBackFun
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	0002      	movs	r2, r0
 8000ffc:	1dbb      	adds	r3, r7, #6
 8000ffe:	801a      	strh	r2, [r3, #0]

	currentMillis = HAL_GetTick(); // debounce
 8001000:	f000 ff18 	bl	8001e34 <HAL_GetTick>
 8001004:	0002      	movs	r2, r0
 8001006:	4b0c      	ldr	r3, [pc, #48]	@ (8001038 <HAL_GPIO_EXTI_Rising_Callback+0x44>)
 8001008:	601a      	str	r2, [r3, #0]
//
	if (GPIO_Pin == GPIO_PIN_9 && (currentMillis - previousMillis > 20)) { // 20 ms debounce
 800100a:	1dbb      	adds	r3, r7, #6
 800100c:	881a      	ldrh	r2, [r3, #0]
 800100e:	2380      	movs	r3, #128	@ 0x80
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	429a      	cmp	r2, r3
 8001014:	d10c      	bne.n	8001030 <HAL_GPIO_EXTI_Rising_Callback+0x3c>
 8001016:	4b08      	ldr	r3, [pc, #32]	@ (8001038 <HAL_GPIO_EXTI_Rising_Callback+0x44>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	4b08      	ldr	r3, [pc, #32]	@ (800103c <HAL_GPIO_EXTI_Rising_Callback+0x48>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	2b14      	cmp	r3, #20
 8001022:	d905      	bls.n	8001030 <HAL_GPIO_EXTI_Rising_Callback+0x3c>
		decay_multiplier += 1;
 8001024:	4b06      	ldr	r3, [pc, #24]	@ (8001040 <HAL_GPIO_EXTI_Rising_Callback+0x4c>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	3301      	adds	r3, #1
 800102a:	b2da      	uxtb	r2, r3
 800102c:	4b04      	ldr	r3, [pc, #16]	@ (8001040 <HAL_GPIO_EXTI_Rising_Callback+0x4c>)
 800102e:	701a      	strb	r2, [r3, #0]
////
//	if (mode_sel > MODES) { // see defines
//		mode_sel = 1;
//
//	}
}
 8001030:	46c0      	nop			@ (mov r8, r8)
 8001032:	46bd      	mov	sp, r7
 8001034:	b002      	add	sp, #8
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20001244 	.word	0x20001244
 800103c:	20001240 	.word	0x20001240
 8001040:	2000123c 	.word	0x2000123c

08001044 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001044:	b590      	push	{r4, r7, lr}
 8001046:	b08d      	sub	sp, #52	@ 0x34
 8001048:	af00      	add	r7, sp, #0
 800104a:	2340      	movs	r3, #64	@ 0x40
 800104c:	18fb      	adds	r3, r7, r3
 800104e:	607b      	str	r3, [r7, #4]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001050:	f000 fe74 	bl	8001d3c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001054:	f000 f958 	bl	8001308 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001058:	f000 fb9e 	bl	8001798 <MX_GPIO_Init>
	MX_DMA_Init();
 800105c:	f000 fb76 	bl	800174c <MX_DMA_Init>
	MX_TIM1_Init();
 8001060:	f000 fa30 	bl	80014c4 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001064:	f000 faf8 	bl	8001658 <MX_TIM2_Init>
	MX_ADC1_Init();
 8001068:	f000 f9ac 	bl	80013c4 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */

////PWM test
//	TIM1->CCR1 = 128;
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800106c:	4b4f      	ldr	r3, [pc, #316]	@ (80011ac <main+0x168>)
 800106e:	2100      	movs	r1, #0
 8001070:	0018      	movs	r0, r3
 8001072:	f003 fc81 	bl	8004978 <HAL_TIM_PWM_Start>
	HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1);
 8001076:	4b4e      	ldr	r3, [pc, #312]	@ (80011b0 <main+0x16c>)
 8001078:	2100      	movs	r1, #0
 800107a:	0018      	movs	r0, r3
 800107c:	f003 fb3e 	bl	80046fc <HAL_TIM_OC_Start>
	HAL_DMA_Start_IT(&hdma_tim2_ch1, (uint32_t) sine, DstAddress, NS);
 8001080:	494c      	ldr	r1, [pc, #304]	@ (80011b4 <main+0x170>)
 8001082:	4b4d      	ldr	r3, [pc, #308]	@ (80011b8 <main+0x174>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	2380      	movs	r3, #128	@ 0x80
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	484c      	ldr	r0, [pc, #304]	@ (80011bc <main+0x178>)
 800108c:	f002 f8c0 	bl	8003210 <HAL_DMA_Start_IT>
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 8001090:	4b47      	ldr	r3, [pc, #284]	@ (80011b0 <main+0x16c>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	68da      	ldr	r2, [r3, #12]
 8001096:	4b46      	ldr	r3, [pc, #280]	@ (80011b0 <main+0x16c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2180      	movs	r1, #128	@ 0x80
 800109c:	0089      	lsls	r1, r1, #2
 800109e:	430a      	orrs	r2, r1
 80010a0:	60da      	str	r2, [r3, #12]
	// Calibrate The ADC On Power-Up For Better Accuracy
	HAL_ADCEx_Calibration_Start(&hadc1);
 80010a2:	4b47      	ldr	r3, [pc, #284]	@ (80011c0 <main+0x17c>)
 80010a4:	0018      	movs	r0, r3
 80010a6:	f001 fe4f 	bl	8002d48 <HAL_ADCEx_Calibration_Start>

	//set up variables
	memcpy(wave_LUT, sine, sizeof(sine));
 80010aa:	4a46      	ldr	r2, [pc, #280]	@ (80011c4 <main+0x180>)
 80010ac:	4b41      	ldr	r3, [pc, #260]	@ (80011b4 <main+0x170>)
 80010ae:	0010      	movs	r0, r2
 80010b0:	0019      	movs	r1, r3
 80010b2:	2380      	movs	r3, #128	@ 0x80
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	001a      	movs	r2, r3
 80010b8:	f004 fdeb 	bl	8005c92 <memcpy>
	srand(time(NULL));
 80010bc:	2000      	movs	r0, #0
 80010be:	f004 fd8d 	bl	8005bdc <time>
 80010c2:	0003      	movs	r3, r0
 80010c4:	0018      	movs	r0, r3
 80010c6:	f004 fc4f 	bl	8005968 <srand>


	uint32_t random_number = rand();
 80010ca:	f004 fc7d 	bl	80059c8 <rand>
 80010ce:	0003      	movs	r3, r0
 80010d0:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t decay_rate = 1 + random_number%DECAY_RANGE;
 80010d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010d4:	2114      	movs	r1, #20
 80010d6:	0018      	movs	r0, r3
 80010d8:	f7ff f8a4 	bl	8000224 <__aeabi_uidivmod>
 80010dc:	000b      	movs	r3, r1
 80010de:	3301      	adds	r3, #1
 80010e0:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t ctr = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	623b      	str	r3, [r7, #32]
	uint32_t phase = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
	uint32_t phase_add = 15;
 80010ea:	230f      	movs	r3, #15
 80010ec:	61bb      	str	r3, [r7, #24]
	uint32_t freq = 1000;
 80010ee:	23fa      	movs	r3, #250	@ 0xfa
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t ctr_scale = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
	uint32_t table_lookup = 1000; // renamed
 80010f8:	23fa      	movs	r3, #250	@ 0xfa
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	613b      	str	r3, [r7, #16]
	uint32_t ad0_bitshift = 1000;
 80010fe:	23fa      	movs	r3, #250	@ 0xfa
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1) {

		if(decay_multiplier > 0){
 8001104:	4b30      	ldr	r3, [pc, #192]	@ (80011c8 <main+0x184>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d02c      	beq.n	8001166 <main+0x122>
			int rate = decay_rate*decay_multiplier;
 800110c:	4b2e      	ldr	r3, [pc, #184]	@ (80011c8 <main+0x184>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	001a      	movs	r2, r3
 8001112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001114:	4353      	muls	r3, r2
 8001116:	60bb      	str	r3, [r7, #8]
			// xor then rot -- goes to noise
//			inc_XOR(tmp_wav_1, sine, NS, rate);
//			rot(tmp_wav, tmp_wav_1, NS, rate);

			// rot then xor -- goes to 0
			rot(tmp_wav_1, sine, NS, rate);
 8001118:	68bc      	ldr	r4, [r7, #8]
 800111a:	2380      	movs	r3, #128	@ 0x80
 800111c:	005a      	lsls	r2, r3, #1
 800111e:	4925      	ldr	r1, [pc, #148]	@ (80011b4 <main+0x170>)
 8001120:	482a      	ldr	r0, [pc, #168]	@ (80011cc <main+0x188>)
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	469c      	mov	ip, r3
 8001126:	0023      	movs	r3, r4
 8001128:	f000 f85a 	bl	80011e0 <rot.0>
			inc_XOR(tmp_wav, tmp_wav_1, NS, rate);
 800112c:	68bc      	ldr	r4, [r7, #8]
 800112e:	2380      	movs	r3, #128	@ 0x80
 8001130:	005a      	lsls	r2, r3, #1
 8001132:	4926      	ldr	r1, [pc, #152]	@ (80011cc <main+0x188>)
 8001134:	4826      	ldr	r0, [pc, #152]	@ (80011d0 <main+0x18c>)
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	469c      	mov	ip, r3
 800113a:	0023      	movs	r3, r4
 800113c:	f000 f8b6 	bl	80012ac <inc_XOR.1>
			//			XOR_func(tmp_wav_1, sine, NS, decay_rate*decay_multiplier);
	//		clipper_func(tmp_wav, sine, NS, decay_rate*decay_multiplier);
//			noise_func(tmp_wav, tmp_wav_1, NS, decay_rate*decay_multiplier);

	//		shuffle_func(tmp_wav, sine, NS, decay_rate*decay_multiplier);
			memcpy(wave_LUT, tmp_wav, sizeof(tmp_wav)); // dest, src, size(src) - acts as a buffer for passing to DMA1
 8001140:	4a20      	ldr	r2, [pc, #128]	@ (80011c4 <main+0x180>)
 8001142:	4b23      	ldr	r3, [pc, #140]	@ (80011d0 <main+0x18c>)
 8001144:	0010      	movs	r0, r2
 8001146:	0019      	movs	r1, r3
 8001148:	2380      	movs	r3, #128	@ 0x80
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	001a      	movs	r2, r3
 800114e:	f004 fda0 	bl	8005c92 <memcpy>
			DMA1_Channel1->CMAR = (uint32_t) wave_LUT; // SrcAddress
 8001152:	4b20      	ldr	r3, [pc, #128]	@ (80011d4 <main+0x190>)
 8001154:	4a1b      	ldr	r2, [pc, #108]	@ (80011c4 <main+0x180>)
 8001156:	60da      	str	r2, [r3, #12]

			if (rate > NS-1) decay_multiplier = 0;
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	2bff      	cmp	r3, #255	@ 0xff
 800115c:	dd06      	ble.n	800116c <main+0x128>
 800115e:	4b1a      	ldr	r3, [pc, #104]	@ (80011c8 <main+0x184>)
 8001160:	2200      	movs	r2, #0
 8001162:	701a      	strb	r2, [r3, #0]
 8001164:	e002      	b.n	800116c <main+0x128>
		}

		else DMA1_Channel1->CMAR = (uint32_t) sine; // SrcAddress
 8001166:	4b1b      	ldr	r3, [pc, #108]	@ (80011d4 <main+0x190>)
 8001168:	4a12      	ldr	r2, [pc, #72]	@ (80011b4 <main+0x170>)
 800116a:	60da      	str	r2, [r3, #12]

		freq = (adcResultsDMA[0] >> 3);
 800116c:	4b1a      	ldr	r3, [pc, #104]	@ (80011d8 <main+0x194>)
 800116e:	881b      	ldrh	r3, [r3, #0]
 8001170:	b29b      	uxth	r3, r3
 8001172:	08db      	lsrs	r3, r3, #3
 8001174:	b29b      	uxth	r3, r3
 8001176:	62fb      	str	r3, [r7, #44]	@ 0x2c


		if (freq <= 0) freq = 1;
 8001178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800117a:	2b00      	cmp	r3, #0
 800117c:	d101      	bne.n	8001182 <main+0x13e>
 800117e:	2301      	movs	r3, #1
 8001180:	62fb      	str	r3, [r7, #44]	@ 0x2c
		TIM2 -> ARR = freq;
 8001182:	2380      	movs	r3, #128	@ 0x80
 8001184:	05db      	lsls	r3, r3, #23
 8001186:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001188:	62da      	str	r2, [r3, #44]	@ 0x2c

		/* USER CODE BEGIN 3 */
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcResultsDMA, adcChannelCount);
 800118a:	2302      	movs	r3, #2
 800118c:	001a      	movs	r2, r3
 800118e:	4912      	ldr	r1, [pc, #72]	@ (80011d8 <main+0x194>)
 8001190:	4b0b      	ldr	r3, [pc, #44]	@ (80011c0 <main+0x17c>)
 8001192:	0018      	movs	r0, r3
 8001194:	f001 f958 	bl	8002448 <HAL_ADC_Start_DMA>
		while (adcConversionComplete == 0) {
 8001198:	46c0      	nop			@ (mov r8, r8)
 800119a:	4b10      	ldr	r3, [pc, #64]	@ (80011dc <main+0x198>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d0fb      	beq.n	800119a <main+0x156>

		}
		adcConversionComplete = 0;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	@ (80011dc <main+0x198>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
		if(decay_multiplier > 0){
 80011a8:	e7ac      	b.n	8001104 <main+0xc0>
 80011aa:	46c0      	nop			@ (mov r8, r8)
 80011ac:	20001148 	.word	0x20001148
 80011b0:	20001194 	.word	0x20001194
 80011b4:	20000004 	.word	0x20000004
 80011b8:	20000000 	.word	0x20000000
 80011bc:	200011e0 	.word	0x200011e0
 80011c0:	20001088 	.word	0x20001088
 80011c4:	20000488 	.word	0x20000488
 80011c8:	2000123c 	.word	0x2000123c
 80011cc:	20000888 	.word	0x20000888
 80011d0:	20000c88 	.word	0x20000c88
 80011d4:	40020008 	.word	0x40020008
 80011d8:	20001248 	.word	0x20001248
 80011dc:	2000124c 	.word	0x2000124c

080011e0 <rot.0>:
	void rot(uint32_t dest[], uint32_t src[], uint32_t length, int decay) {
 80011e0:	b590      	push	{r4, r7, lr}
 80011e2:	b08b      	sub	sp, #44	@ 0x2c
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6178      	str	r0, [r7, #20]
 80011e8:	6139      	str	r1, [r7, #16]
 80011ea:	60fa      	str	r2, [r7, #12]
 80011ec:	60bb      	str	r3, [r7, #8]
 80011ee:	4663      	mov	r3, ip
 80011f0:	607b      	str	r3, [r7, #4]
		int decay_adj = round(decay*0.6);
 80011f2:	68b8      	ldr	r0, [r7, #8]
 80011f4:	f7ff feb2 	bl	8000f5c <__aeabi_i2d>
 80011f8:	4a29      	ldr	r2, [pc, #164]	@ (80012a0 <rot.0+0xc0>)
 80011fa:	4b2a      	ldr	r3, [pc, #168]	@ (80012a4 <rot.0+0xc4>)
 80011fc:	f7ff fbaa 	bl	8000954 <__aeabi_dmul>
 8001200:	0002      	movs	r2, r0
 8001202:	000b      	movs	r3, r1
 8001204:	0010      	movs	r0, r2
 8001206:	0019      	movs	r1, r3
 8001208:	f005 fc2e 	bl	8006a68 <round>
 800120c:	0002      	movs	r2, r0
 800120e:	000b      	movs	r3, r1
 8001210:	0010      	movs	r0, r2
 8001212:	0019      	movs	r1, r3
 8001214:	f7ff fe66 	bl	8000ee4 <__aeabi_d2iz>
 8001218:	0003      	movs	r3, r0
 800121a:	627b      	str	r3, [r7, #36]	@ 0x24
		for (int i = 0; i < length; i++) {
 800121c:	2300      	movs	r3, #0
 800121e:	623b      	str	r3, [r7, #32]
 8001220:	e00c      	b.n	800123c <rot.0+0x5c>
			dest[i] = src[i];
 8001222:	6a3b      	ldr	r3, [r7, #32]
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	18d2      	adds	r2, r2, r3
 800122a:	6a3b      	ldr	r3, [r7, #32]
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	6979      	ldr	r1, [r7, #20]
 8001230:	18cb      	adds	r3, r1, r3
 8001232:	6812      	ldr	r2, [r2, #0]
 8001234:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < length; i++) {
 8001236:	6a3b      	ldr	r3, [r7, #32]
 8001238:	3301      	adds	r3, #1
 800123a:	623b      	str	r3, [r7, #32]
 800123c:	6a3b      	ldr	r3, [r7, #32]
 800123e:	68fa      	ldr	r2, [r7, #12]
 8001240:	429a      	cmp	r2, r3
 8001242:	d8ee      	bhi.n	8001222 <rot.0+0x42>
		if(decay_adj > length) decay_adj = length;
 8001244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	429a      	cmp	r2, r3
 800124a:	d201      	bcs.n	8001250 <rot.0+0x70>
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	627b      	str	r3, [r7, #36]	@ 0x24
		for (int i = 0; i < decay_adj; i++)
 8001250:	2300      	movs	r3, #0
 8001252:	61fb      	str	r3, [r7, #28]
 8001254:	e01a      	b.n	800128c <rot.0+0xac>
			dest[i] = (dest[i] + rand() % 128) % 256;
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	697a      	ldr	r2, [r7, #20]
 800125c:	18d3      	adds	r3, r2, r3
 800125e:	681c      	ldr	r4, [r3, #0]
 8001260:	f004 fbb2 	bl	80059c8 <rand>
 8001264:	0003      	movs	r3, r0
 8001266:	4a10      	ldr	r2, [pc, #64]	@ (80012a8 <rot.0+0xc8>)
 8001268:	4013      	ands	r3, r2
 800126a:	d504      	bpl.n	8001276 <rot.0+0x96>
 800126c:	3b01      	subs	r3, #1
 800126e:	2280      	movs	r2, #128	@ 0x80
 8001270:	4252      	negs	r2, r2
 8001272:	4313      	orrs	r3, r2
 8001274:	3301      	adds	r3, #1
 8001276:	18e2      	adds	r2, r4, r3
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	6979      	ldr	r1, [r7, #20]
 800127e:	18cb      	adds	r3, r1, r3
 8001280:	21ff      	movs	r1, #255	@ 0xff
 8001282:	400a      	ands	r2, r1
 8001284:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < decay_adj; i++)
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3301      	adds	r3, #1
 800128a:	61fb      	str	r3, [r7, #28]
 800128c:	69fa      	ldr	r2, [r7, #28]
 800128e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001290:	429a      	cmp	r2, r3
 8001292:	dbe0      	blt.n	8001256 <rot.0+0x76>
	}
 8001294:	46c0      	nop			@ (mov r8, r8)
 8001296:	46c0      	nop			@ (mov r8, r8)
 8001298:	46bd      	mov	sp, r7
 800129a:	b00b      	add	sp, #44	@ 0x2c
 800129c:	bd90      	pop	{r4, r7, pc}
 800129e:	46c0      	nop			@ (mov r8, r8)
 80012a0:	33333333 	.word	0x33333333
 80012a4:	3fe33333 	.word	0x3fe33333
 80012a8:	8000007f 	.word	0x8000007f

080012ac <inc_XOR.1>:
		void inc_XOR(uint32_t dest[], uint32_t src[], int length, int decay) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b088      	sub	sp, #32
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6178      	str	r0, [r7, #20]
 80012b4:	6139      	str	r1, [r7, #16]
 80012b6:	60fa      	str	r2, [r7, #12]
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	4663      	mov	r3, ip
 80012bc:	607b      	str	r3, [r7, #4]
			for (int i = 0; i < length; i++) {
 80012be:	2300      	movs	r3, #0
 80012c0:	61fb      	str	r3, [r7, #28]
 80012c2:	e018      	b.n	80012f6 <inc_XOR.1+0x4a>
				dest[i] = src[i];
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	18d2      	adds	r2, r2, r3
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	6979      	ldr	r1, [r7, #20]
 80012d2:	18cb      	adds	r3, r1, r3
 80012d4:	6812      	ldr	r2, [r2, #0]
 80012d6:	601a      	str	r2, [r3, #0]
				dest[i] |= decay;
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	697a      	ldr	r2, [r7, #20]
 80012de:	18d3      	adds	r3, r2, r3
 80012e0:	6819      	ldr	r1, [r3, #0]
 80012e2:	68ba      	ldr	r2, [r7, #8]
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	6978      	ldr	r0, [r7, #20]
 80012ea:	18c3      	adds	r3, r0, r3
 80012ec:	430a      	orrs	r2, r1
 80012ee:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < length; i++) {
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	3301      	adds	r3, #1
 80012f4:	61fb      	str	r3, [r7, #28]
 80012f6:	69fa      	ldr	r2, [r7, #28]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	dbe2      	blt.n	80012c4 <inc_XOR.1+0x18>
		}
 80012fe:	46c0      	nop			@ (mov r8, r8)
 8001300:	46c0      	nop			@ (mov r8, r8)
 8001302:	46bd      	mov	sp, r7
 8001304:	b008      	add	sp, #32
 8001306:	bd80      	pop	{r7, pc}

08001308 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001308:	b590      	push	{r4, r7, lr}
 800130a:	b093      	sub	sp, #76	@ 0x4c
 800130c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800130e:	2410      	movs	r4, #16
 8001310:	193b      	adds	r3, r7, r4
 8001312:	0018      	movs	r0, r3
 8001314:	2338      	movs	r3, #56	@ 0x38
 8001316:	001a      	movs	r2, r3
 8001318:	2100      	movs	r1, #0
 800131a:	f004 fc57 	bl	8005bcc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800131e:	003b      	movs	r3, r7
 8001320:	0018      	movs	r0, r3
 8001322:	2310      	movs	r3, #16
 8001324:	001a      	movs	r2, r3
 8001326:	2100      	movs	r1, #0
 8001328:	f004 fc50 	bl	8005bcc <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800132c:	2380      	movs	r3, #128	@ 0x80
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	0018      	movs	r0, r3
 8001332:	f002 facd 	bl	80038d0 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001336:	193b      	adds	r3, r7, r4
 8001338:	2202      	movs	r2, #2
 800133a:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800133c:	193b      	adds	r3, r7, r4
 800133e:	2280      	movs	r2, #128	@ 0x80
 8001340:	0052      	lsls	r2, r2, #1
 8001342:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001344:	0021      	movs	r1, r4
 8001346:	187b      	adds	r3, r7, r1
 8001348:	2200      	movs	r2, #0
 800134a:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800134c:	187b      	adds	r3, r7, r1
 800134e:	2240      	movs	r2, #64	@ 0x40
 8001350:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001352:	187b      	adds	r3, r7, r1
 8001354:	2202      	movs	r2, #2
 8001356:	61da      	str	r2, [r3, #28]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001358:	187b      	adds	r3, r7, r1
 800135a:	2202      	movs	r2, #2
 800135c:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800135e:	187b      	adds	r3, r7, r1
 8001360:	2200      	movs	r2, #0
 8001362:	625a      	str	r2, [r3, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLN = 16;
 8001364:	187b      	adds	r3, r7, r1
 8001366:	2210      	movs	r2, #16
 8001368:	629a      	str	r2, [r3, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800136a:	187b      	adds	r3, r7, r1
 800136c:	2280      	movs	r2, #128	@ 0x80
 800136e:	0292      	lsls	r2, r2, #10
 8001370:	62da      	str	r2, [r3, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001372:	187b      	adds	r3, r7, r1
 8001374:	2280      	movs	r2, #128	@ 0x80
 8001376:	0492      	lsls	r2, r2, #18
 8001378:	631a      	str	r2, [r3, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 800137a:	187b      	adds	r3, r7, r1
 800137c:	22c0      	movs	r2, #192	@ 0xc0
 800137e:	05d2      	lsls	r2, r2, #23
 8001380:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001382:	187b      	adds	r3, r7, r1
 8001384:	0018      	movs	r0, r3
 8001386:	f002 fae3 	bl	8003950 <HAL_RCC_OscConfig>
 800138a:	1e03      	subs	r3, r0, #0
 800138c:	d001      	beq.n	8001392 <SystemClock_Config+0x8a>
		Error_Handler();
 800138e:	f000 fa55 	bl	800183c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001392:	003b      	movs	r3, r7
 8001394:	2207      	movs	r2, #7
 8001396:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001398:	003b      	movs	r3, r7
 800139a:	2202      	movs	r2, #2
 800139c:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800139e:	003b      	movs	r3, r7
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013a4:	003b      	movs	r3, r7
 80013a6:	2200      	movs	r2, #0
 80013a8:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80013aa:	003b      	movs	r3, r7
 80013ac:	2102      	movs	r1, #2
 80013ae:	0018      	movs	r0, r3
 80013b0:	f002 fde8 	bl	8003f84 <HAL_RCC_ClockConfig>
 80013b4:	1e03      	subs	r3, r0, #0
 80013b6:	d001      	beq.n	80013bc <SystemClock_Config+0xb4>
		Error_Handler();
 80013b8:	f000 fa40 	bl	800183c <Error_Handler>
	}
}
 80013bc:	46c0      	nop			@ (mov r8, r8)
 80013be:	46bd      	mov	sp, r7
 80013c0:	b013      	add	sp, #76	@ 0x4c
 80013c2:	bd90      	pop	{r4, r7, pc}

080013c4 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	0018      	movs	r0, r3
 80013ce:	230c      	movs	r3, #12
 80013d0:	001a      	movs	r2, r3
 80013d2:	2100      	movs	r1, #0
 80013d4:	f004 fbfa 	bl	8005bcc <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80013d8:	4b36      	ldr	r3, [pc, #216]	@ (80014b4 <MX_ADC1_Init+0xf0>)
 80013da:	4a37      	ldr	r2, [pc, #220]	@ (80014b8 <MX_ADC1_Init+0xf4>)
 80013dc:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80013de:	4b35      	ldr	r3, [pc, #212]	@ (80014b4 <MX_ADC1_Init+0xf0>)
 80013e0:	2280      	movs	r2, #128	@ 0x80
 80013e2:	05d2      	lsls	r2, r2, #23
 80013e4:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013e6:	4b33      	ldr	r3, [pc, #204]	@ (80014b4 <MX_ADC1_Init+0xf0>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013ec:	4b31      	ldr	r3, [pc, #196]	@ (80014b4 <MX_ADC1_Init+0xf0>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 80013f2:	4b30      	ldr	r3, [pc, #192]	@ (80014b4 <MX_ADC1_Init+0xf0>)
 80013f4:	2280      	movs	r2, #128	@ 0x80
 80013f6:	0612      	lsls	r2, r2, #24
 80013f8:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013fa:	4b2e      	ldr	r3, [pc, #184]	@ (80014b4 <MX_ADC1_Init+0xf0>)
 80013fc:	2204      	movs	r2, #4
 80013fe:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8001400:	4b2c      	ldr	r3, [pc, #176]	@ (80014b4 <MX_ADC1_Init+0xf0>)
 8001402:	2200      	movs	r2, #0
 8001404:	761a      	strb	r2, [r3, #24]
	hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001406:	4b2b      	ldr	r3, [pc, #172]	@ (80014b4 <MX_ADC1_Init+0xf0>)
 8001408:	2200      	movs	r2, #0
 800140a:	765a      	strb	r2, [r3, #25]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800140c:	4b29      	ldr	r3, [pc, #164]	@ (80014b4 <MX_ADC1_Init+0xf0>)
 800140e:	2200      	movs	r2, #0
 8001410:	769a      	strb	r2, [r3, #26]
	hadc1.Init.NbrOfConversion = 1;
 8001412:	4b28      	ldr	r3, [pc, #160]	@ (80014b4 <MX_ADC1_Init+0xf0>)
 8001414:	2201      	movs	r2, #1
 8001416:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001418:	4b26      	ldr	r3, [pc, #152]	@ (80014b4 <MX_ADC1_Init+0xf0>)
 800141a:	2220      	movs	r2, #32
 800141c:	2100      	movs	r1, #0
 800141e:	5499      	strb	r1, [r3, r2]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001420:	4b24      	ldr	r3, [pc, #144]	@ (80014b4 <MX_ADC1_Init+0xf0>)
 8001422:	2200      	movs	r2, #0
 8001424:	625a      	str	r2, [r3, #36]	@ 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001426:	4b23      	ldr	r3, [pc, #140]	@ (80014b4 <MX_ADC1_Init+0xf0>)
 8001428:	2200      	movs	r2, #0
 800142a:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800142c:	4b21      	ldr	r3, [pc, #132]	@ (80014b4 <MX_ADC1_Init+0xf0>)
 800142e:	222c      	movs	r2, #44	@ 0x2c
 8001430:	2100      	movs	r1, #0
 8001432:	5499      	strb	r1, [r3, r2]
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001434:	4b1f      	ldr	r3, [pc, #124]	@ (80014b4 <MX_ADC1_Init+0xf0>)
 8001436:	2200      	movs	r2, #0
 8001438:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800143a:	4b1e      	ldr	r3, [pc, #120]	@ (80014b4 <MX_ADC1_Init+0xf0>)
 800143c:	2200      	movs	r2, #0
 800143e:	635a      	str	r2, [r3, #52]	@ 0x34
	hadc1.Init.OversamplingMode = ENABLE;
 8001440:	4b1c      	ldr	r3, [pc, #112]	@ (80014b4 <MX_ADC1_Init+0xf0>)
 8001442:	223c      	movs	r2, #60	@ 0x3c
 8001444:	2101      	movs	r1, #1
 8001446:	5499      	strb	r1, [r3, r2]
	hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 8001448:	4b1a      	ldr	r3, [pc, #104]	@ (80014b4 <MX_ADC1_Init+0xf0>)
 800144a:	221c      	movs	r2, #28
 800144c:	641a      	str	r2, [r3, #64]	@ 0x40
	hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 800144e:	4b19      	ldr	r3, [pc, #100]	@ (80014b4 <MX_ADC1_Init+0xf0>)
 8001450:	2280      	movs	r2, #128	@ 0x80
 8001452:	645a      	str	r2, [r3, #68]	@ 0x44
	hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001454:	4b17      	ldr	r3, [pc, #92]	@ (80014b4 <MX_ADC1_Init+0xf0>)
 8001456:	2200      	movs	r2, #0
 8001458:	649a      	str	r2, [r3, #72]	@ 0x48
	hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800145a:	4b16      	ldr	r3, [pc, #88]	@ (80014b4 <MX_ADC1_Init+0xf0>)
 800145c:	2200      	movs	r2, #0
 800145e:	64da      	str	r2, [r3, #76]	@ 0x4c
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001460:	4b14      	ldr	r3, [pc, #80]	@ (80014b4 <MX_ADC1_Init+0xf0>)
 8001462:	0018      	movs	r0, r3
 8001464:	f000 fe48 	bl	80020f8 <HAL_ADC_Init>
 8001468:	1e03      	subs	r3, r0, #0
 800146a:	d001      	beq.n	8001470 <MX_ADC1_Init+0xac>
		Error_Handler();
 800146c:	f000 f9e6 	bl	800183c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_16;
 8001470:	1d3b      	adds	r3, r7, #4
 8001472:	4a12      	ldr	r2, [pc, #72]	@ (80014bc <MX_ADC1_Init+0xf8>)
 8001474:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001476:	1d3b      	adds	r3, r7, #4
 8001478:	2201      	movs	r2, #1
 800147a:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800147c:	1d3a      	adds	r2, r7, #4
 800147e:	4b0d      	ldr	r3, [pc, #52]	@ (80014b4 <MX_ADC1_Init+0xf0>)
 8001480:	0011      	movs	r1, r2
 8001482:	0018      	movs	r0, r3
 8001484:	f001 f87e 	bl	8002584 <HAL_ADC_ConfigChannel>
 8001488:	1e03      	subs	r3, r0, #0
 800148a:	d001      	beq.n	8001490 <MX_ADC1_Init+0xcc>
		Error_Handler();
 800148c:	f000 f9d6 	bl	800183c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_17;
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	4a0b      	ldr	r2, [pc, #44]	@ (80014c0 <MX_ADC1_Init+0xfc>)
 8001494:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001496:	1d3a      	adds	r2, r7, #4
 8001498:	4b06      	ldr	r3, [pc, #24]	@ (80014b4 <MX_ADC1_Init+0xf0>)
 800149a:	0011      	movs	r1, r2
 800149c:	0018      	movs	r0, r3
 800149e:	f001 f871 	bl	8002584 <HAL_ADC_ConfigChannel>
 80014a2:	1e03      	subs	r3, r0, #0
 80014a4:	d001      	beq.n	80014aa <MX_ADC1_Init+0xe6>
		Error_Handler();
 80014a6:	f000 f9c9 	bl	800183c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80014aa:	46c0      	nop			@ (mov r8, r8)
 80014ac:	46bd      	mov	sp, r7
 80014ae:	b004      	add	sp, #16
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	46c0      	nop			@ (mov r8, r8)
 80014b4:	20001088 	.word	0x20001088
 80014b8:	40012400 	.word	0x40012400
 80014bc:	40010000 	.word	0x40010000
 80014c0:	44020000 	.word	0x44020000

080014c4 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b09c      	sub	sp, #112	@ 0x70
 80014c8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80014ca:	2360      	movs	r3, #96	@ 0x60
 80014cc:	18fb      	adds	r3, r7, r3
 80014ce:	0018      	movs	r0, r3
 80014d0:	2310      	movs	r3, #16
 80014d2:	001a      	movs	r2, r3
 80014d4:	2100      	movs	r1, #0
 80014d6:	f004 fb79 	bl	8005bcc <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80014da:	2354      	movs	r3, #84	@ 0x54
 80014dc:	18fb      	adds	r3, r7, r3
 80014de:	0018      	movs	r0, r3
 80014e0:	230c      	movs	r3, #12
 80014e2:	001a      	movs	r2, r3
 80014e4:	2100      	movs	r1, #0
 80014e6:	f004 fb71 	bl	8005bcc <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80014ea:	2338      	movs	r3, #56	@ 0x38
 80014ec:	18fb      	adds	r3, r7, r3
 80014ee:	0018      	movs	r0, r3
 80014f0:	231c      	movs	r3, #28
 80014f2:	001a      	movs	r2, r3
 80014f4:	2100      	movs	r1, #0
 80014f6:	f004 fb69 	bl	8005bcc <memset>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80014fa:	1d3b      	adds	r3, r7, #4
 80014fc:	0018      	movs	r0, r3
 80014fe:	2334      	movs	r3, #52	@ 0x34
 8001500:	001a      	movs	r2, r3
 8001502:	2100      	movs	r1, #0
 8001504:	f004 fb62 	bl	8005bcc <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001508:	4b51      	ldr	r3, [pc, #324]	@ (8001650 <MX_TIM1_Init+0x18c>)
 800150a:	4a52      	ldr	r2, [pc, #328]	@ (8001654 <MX_TIM1_Init+0x190>)
 800150c:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 800150e:	4b50      	ldr	r3, [pc, #320]	@ (8001650 <MX_TIM1_Init+0x18c>)
 8001510:	2200      	movs	r2, #0
 8001512:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001514:	4b4e      	ldr	r3, [pc, #312]	@ (8001650 <MX_TIM1_Init+0x18c>)
 8001516:	2200      	movs	r2, #0
 8001518:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 256 - 1;
 800151a:	4b4d      	ldr	r3, [pc, #308]	@ (8001650 <MX_TIM1_Init+0x18c>)
 800151c:	22ff      	movs	r2, #255	@ 0xff
 800151e:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001520:	4b4b      	ldr	r3, [pc, #300]	@ (8001650 <MX_TIM1_Init+0x18c>)
 8001522:	2200      	movs	r2, #0
 8001524:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001526:	4b4a      	ldr	r3, [pc, #296]	@ (8001650 <MX_TIM1_Init+0x18c>)
 8001528:	2200      	movs	r2, #0
 800152a:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800152c:	4b48      	ldr	r3, [pc, #288]	@ (8001650 <MX_TIM1_Init+0x18c>)
 800152e:	2280      	movs	r2, #128	@ 0x80
 8001530:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001532:	4b47      	ldr	r3, [pc, #284]	@ (8001650 <MX_TIM1_Init+0x18c>)
 8001534:	0018      	movs	r0, r3
 8001536:	f003 f829 	bl	800458c <HAL_TIM_Base_Init>
 800153a:	1e03      	subs	r3, r0, #0
 800153c:	d001      	beq.n	8001542 <MX_TIM1_Init+0x7e>
		Error_Handler();
 800153e:	f000 f97d 	bl	800183c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001542:	2160      	movs	r1, #96	@ 0x60
 8001544:	187b      	adds	r3, r7, r1
 8001546:	2280      	movs	r2, #128	@ 0x80
 8001548:	0152      	lsls	r2, r2, #5
 800154a:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800154c:	187a      	adds	r2, r7, r1
 800154e:	4b40      	ldr	r3, [pc, #256]	@ (8001650 <MX_TIM1_Init+0x18c>)
 8001550:	0011      	movs	r1, r2
 8001552:	0018      	movs	r0, r3
 8001554:	f003 fc4e 	bl	8004df4 <HAL_TIM_ConfigClockSource>
 8001558:	1e03      	subs	r3, r0, #0
 800155a:	d001      	beq.n	8001560 <MX_TIM1_Init+0x9c>
		Error_Handler();
 800155c:	f000 f96e 	bl	800183c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8001560:	4b3b      	ldr	r3, [pc, #236]	@ (8001650 <MX_TIM1_Init+0x18c>)
 8001562:	0018      	movs	r0, r3
 8001564:	f003 f9a8 	bl	80048b8 <HAL_TIM_PWM_Init>
 8001568:	1e03      	subs	r3, r0, #0
 800156a:	d001      	beq.n	8001570 <MX_TIM1_Init+0xac>
		Error_Handler();
 800156c:	f000 f966 	bl	800183c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001570:	2154      	movs	r1, #84	@ 0x54
 8001572:	187b      	adds	r3, r7, r1
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001578:	187b      	adds	r3, r7, r1
 800157a:	2200      	movs	r2, #0
 800157c:	605a      	str	r2, [r3, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800157e:	187b      	adds	r3, r7, r1
 8001580:	2200      	movs	r2, #0
 8001582:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001584:	187a      	adds	r2, r7, r1
 8001586:	4b32      	ldr	r3, [pc, #200]	@ (8001650 <MX_TIM1_Init+0x18c>)
 8001588:	0011      	movs	r1, r2
 800158a:	0018      	movs	r0, r3
 800158c:	f004 f8e8 	bl	8005760 <HAL_TIMEx_MasterConfigSynchronization>
 8001590:	1e03      	subs	r3, r0, #0
 8001592:	d001      	beq.n	8001598 <MX_TIM1_Init+0xd4>
			!= HAL_OK) {
		Error_Handler();
 8001594:	f000 f952 	bl	800183c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001598:	2138      	movs	r1, #56	@ 0x38
 800159a:	187b      	adds	r3, r7, r1
 800159c:	2260      	movs	r2, #96	@ 0x60
 800159e:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 80015a0:	187b      	adds	r3, r7, r1
 80015a2:	2200      	movs	r2, #0
 80015a4:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015a6:	187b      	adds	r3, r7, r1
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015ac:	187b      	adds	r3, r7, r1
 80015ae:	2200      	movs	r2, #0
 80015b0:	60da      	str	r2, [r3, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015b2:	187b      	adds	r3, r7, r1
 80015b4:	2200      	movs	r2, #0
 80015b6:	611a      	str	r2, [r3, #16]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015b8:	187b      	adds	r3, r7, r1
 80015ba:	2200      	movs	r2, #0
 80015bc:	615a      	str	r2, [r3, #20]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015be:	187b      	adds	r3, r7, r1
 80015c0:	2200      	movs	r2, #0
 80015c2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 80015c4:	1879      	adds	r1, r7, r1
 80015c6:	4b22      	ldr	r3, [pc, #136]	@ (8001650 <MX_TIM1_Init+0x18c>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	0018      	movs	r0, r3
 80015cc:	f003 fb12 	bl	8004bf4 <HAL_TIM_PWM_ConfigChannel>
 80015d0:	1e03      	subs	r3, r0, #0
 80015d2:	d001      	beq.n	80015d8 <MX_TIM1_Init+0x114>
			!= HAL_OK) {
		Error_Handler();
 80015d4:	f000 f932 	bl	800183c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015d8:	1d3b      	adds	r3, r7, #4
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	2200      	movs	r2, #0
 80015e2:	605a      	str	r2, [r3, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015e4:	1d3b      	adds	r3, r7, #4
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	2200      	movs	r2, #0
 80015ee:	60da      	str	r2, [r3, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015f0:	1d3b      	adds	r3, r7, #4
 80015f2:	2200      	movs	r2, #0
 80015f4:	611a      	str	r2, [r3, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	2280      	movs	r2, #128	@ 0x80
 80015fa:	0192      	lsls	r2, r2, #6
 80015fc:	615a      	str	r2, [r3, #20]
	sBreakDeadTimeConfig.BreakFilter = 0;
 80015fe:	1d3b      	adds	r3, r7, #4
 8001600:	2200      	movs	r2, #0
 8001602:	619a      	str	r2, [r3, #24]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001604:	1d3b      	adds	r3, r7, #4
 8001606:	2200      	movs	r2, #0
 8001608:	61da      	str	r2, [r3, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800160a:	1d3b      	adds	r3, r7, #4
 800160c:	2200      	movs	r2, #0
 800160e:	621a      	str	r2, [r3, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001610:	1d3b      	adds	r3, r7, #4
 8001612:	2280      	movs	r2, #128	@ 0x80
 8001614:	0492      	lsls	r2, r2, #18
 8001616:	625a      	str	r2, [r3, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001618:	1d3b      	adds	r3, r7, #4
 800161a:	2200      	movs	r2, #0
 800161c:	629a      	str	r2, [r3, #40]	@ 0x28
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	2200      	movs	r2, #0
 8001622:	62da      	str	r2, [r3, #44]	@ 0x2c
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001624:	1d3b      	adds	r3, r7, #4
 8001626:	2200      	movs	r2, #0
 8001628:	631a      	str	r2, [r3, #48]	@ 0x30
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 800162a:	1d3a      	adds	r2, r7, #4
 800162c:	4b08      	ldr	r3, [pc, #32]	@ (8001650 <MX_TIM1_Init+0x18c>)
 800162e:	0011      	movs	r1, r2
 8001630:	0018      	movs	r0, r3
 8001632:	f004 f8fd 	bl	8005830 <HAL_TIMEx_ConfigBreakDeadTime>
 8001636:	1e03      	subs	r3, r0, #0
 8001638:	d001      	beq.n	800163e <MX_TIM1_Init+0x17a>
			!= HAL_OK) {
		Error_Handler();
 800163a:	f000 f8ff 	bl	800183c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 800163e:	4b04      	ldr	r3, [pc, #16]	@ (8001650 <MX_TIM1_Init+0x18c>)
 8001640:	0018      	movs	r0, r3
 8001642:	f000 fa13 	bl	8001a6c <HAL_TIM_MspPostInit>

}
 8001646:	46c0      	nop			@ (mov r8, r8)
 8001648:	46bd      	mov	sp, r7
 800164a:	b01c      	add	sp, #112	@ 0x70
 800164c:	bd80      	pop	{r7, pc}
 800164e:	46c0      	nop			@ (mov r8, r8)
 8001650:	20001148 	.word	0x20001148
 8001654:	40012c00 	.word	0x40012c00

08001658 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001658:	b580      	push	{r7, lr}
 800165a:	b08e      	sub	sp, #56	@ 0x38
 800165c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800165e:	2328      	movs	r3, #40	@ 0x28
 8001660:	18fb      	adds	r3, r7, r3
 8001662:	0018      	movs	r0, r3
 8001664:	2310      	movs	r3, #16
 8001666:	001a      	movs	r2, r3
 8001668:	2100      	movs	r1, #0
 800166a:	f004 faaf 	bl	8005bcc <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800166e:	231c      	movs	r3, #28
 8001670:	18fb      	adds	r3, r7, r3
 8001672:	0018      	movs	r0, r3
 8001674:	230c      	movs	r3, #12
 8001676:	001a      	movs	r2, r3
 8001678:	2100      	movs	r1, #0
 800167a:	f004 faa7 	bl	8005bcc <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800167e:	003b      	movs	r3, r7
 8001680:	0018      	movs	r0, r3
 8001682:	231c      	movs	r3, #28
 8001684:	001a      	movs	r2, r3
 8001686:	2100      	movs	r1, #0
 8001688:	f004 faa0 	bl	8005bcc <memset>

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800168c:	4b2e      	ldr	r3, [pc, #184]	@ (8001748 <MX_TIM2_Init+0xf0>)
 800168e:	2280      	movs	r2, #128	@ 0x80
 8001690:	05d2      	lsls	r2, r2, #23
 8001692:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8001694:	4b2c      	ldr	r3, [pc, #176]	@ (8001748 <MX_TIM2_Init+0xf0>)
 8001696:	2200      	movs	r2, #0
 8001698:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800169a:	4b2b      	ldr	r3, [pc, #172]	@ (8001748 <MX_TIM2_Init+0xf0>)
 800169c:	2200      	movs	r2, #0
 800169e:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000;
 80016a0:	4b29      	ldr	r3, [pc, #164]	@ (8001748 <MX_TIM2_Init+0xf0>)
 80016a2:	22fa      	movs	r2, #250	@ 0xfa
 80016a4:	0092      	lsls	r2, r2, #2
 80016a6:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a8:	4b27      	ldr	r3, [pc, #156]	@ (8001748 <MX_TIM2_Init+0xf0>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016ae:	4b26      	ldr	r3, [pc, #152]	@ (8001748 <MX_TIM2_Init+0xf0>)
 80016b0:	2280      	movs	r2, #128	@ 0x80
 80016b2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80016b4:	4b24      	ldr	r3, [pc, #144]	@ (8001748 <MX_TIM2_Init+0xf0>)
 80016b6:	0018      	movs	r0, r3
 80016b8:	f002 ff68 	bl	800458c <HAL_TIM_Base_Init>
 80016bc:	1e03      	subs	r3, r0, #0
 80016be:	d001      	beq.n	80016c4 <MX_TIM2_Init+0x6c>
		Error_Handler();
 80016c0:	f000 f8bc 	bl	800183c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016c4:	2128      	movs	r1, #40	@ 0x28
 80016c6:	187b      	adds	r3, r7, r1
 80016c8:	2280      	movs	r2, #128	@ 0x80
 80016ca:	0152      	lsls	r2, r2, #5
 80016cc:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80016ce:	187a      	adds	r2, r7, r1
 80016d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001748 <MX_TIM2_Init+0xf0>)
 80016d2:	0011      	movs	r1, r2
 80016d4:	0018      	movs	r0, r3
 80016d6:	f003 fb8d 	bl	8004df4 <HAL_TIM_ConfigClockSource>
 80016da:	1e03      	subs	r3, r0, #0
 80016dc:	d001      	beq.n	80016e2 <MX_TIM2_Init+0x8a>
		Error_Handler();
 80016de:	f000 f8ad 	bl	800183c <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim2) != HAL_OK) {
 80016e2:	4b19      	ldr	r3, [pc, #100]	@ (8001748 <MX_TIM2_Init+0xf0>)
 80016e4:	0018      	movs	r0, r3
 80016e6:	f002 ffa9 	bl	800463c <HAL_TIM_OC_Init>
 80016ea:	1e03      	subs	r3, r0, #0
 80016ec:	d001      	beq.n	80016f2 <MX_TIM2_Init+0x9a>
		Error_Handler();
 80016ee:	f000 f8a5 	bl	800183c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016f2:	211c      	movs	r1, #28
 80016f4:	187b      	adds	r3, r7, r1
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016fa:	187b      	adds	r3, r7, r1
 80016fc:	2200      	movs	r2, #0
 80016fe:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001700:	187a      	adds	r2, r7, r1
 8001702:	4b11      	ldr	r3, [pc, #68]	@ (8001748 <MX_TIM2_Init+0xf0>)
 8001704:	0011      	movs	r1, r2
 8001706:	0018      	movs	r0, r3
 8001708:	f004 f82a 	bl	8005760 <HAL_TIMEx_MasterConfigSynchronization>
 800170c:	1e03      	subs	r3, r0, #0
 800170e:	d001      	beq.n	8001714 <MX_TIM2_Init+0xbc>
			!= HAL_OK) {
		Error_Handler();
 8001710:	f000 f894 	bl	800183c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001714:	003b      	movs	r3, r7
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 800171a:	003b      	movs	r3, r7
 800171c:	2200      	movs	r2, #0
 800171e:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001720:	003b      	movs	r3, r7
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001726:	003b      	movs	r3, r7
 8001728:	2200      	movs	r2, #0
 800172a:	611a      	str	r2, [r3, #16]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 800172c:	0039      	movs	r1, r7
 800172e:	4b06      	ldr	r3, [pc, #24]	@ (8001748 <MX_TIM2_Init+0xf0>)
 8001730:	2200      	movs	r2, #0
 8001732:	0018      	movs	r0, r3
 8001734:	f003 f9fe 	bl	8004b34 <HAL_TIM_OC_ConfigChannel>
 8001738:	1e03      	subs	r3, r0, #0
 800173a:	d001      	beq.n	8001740 <MX_TIM2_Init+0xe8>
		Error_Handler();
 800173c:	f000 f87e 	bl	800183c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001740:	46c0      	nop			@ (mov r8, r8)
 8001742:	46bd      	mov	sp, r7
 8001744:	b00e      	add	sp, #56	@ 0x38
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20001194 	.word	0x20001194

0800174c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001752:	4b10      	ldr	r3, [pc, #64]	@ (8001794 <MX_DMA_Init+0x48>)
 8001754:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001756:	4b0f      	ldr	r3, [pc, #60]	@ (8001794 <MX_DMA_Init+0x48>)
 8001758:	2101      	movs	r1, #1
 800175a:	430a      	orrs	r2, r1
 800175c:	639a      	str	r2, [r3, #56]	@ 0x38
 800175e:	4b0d      	ldr	r3, [pc, #52]	@ (8001794 <MX_DMA_Init+0x48>)
 8001760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001762:	2201      	movs	r2, #1
 8001764:	4013      	ands	r3, r2
 8001766:	607b      	str	r3, [r7, #4]
 8001768:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800176a:	2200      	movs	r2, #0
 800176c:	2100      	movs	r1, #0
 800176e:	2009      	movs	r0, #9
 8001770:	f001 fc92 	bl	8003098 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001774:	2009      	movs	r0, #9
 8001776:	f001 fca4 	bl	80030c2 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800177a:	2200      	movs	r2, #0
 800177c:	2100      	movs	r1, #0
 800177e:	200a      	movs	r0, #10
 8001780:	f001 fc8a 	bl	8003098 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001784:	200a      	movs	r0, #10
 8001786:	f001 fc9c 	bl	80030c2 <HAL_NVIC_EnableIRQ>

}
 800178a:	46c0      	nop			@ (mov r8, r8)
 800178c:	46bd      	mov	sp, r7
 800178e:	b002      	add	sp, #8
 8001790:	bd80      	pop	{r7, pc}
 8001792:	46c0      	nop			@ (mov r8, r8)
 8001794:	40021000 	.word	0x40021000

08001798 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001798:	b590      	push	{r4, r7, lr}
 800179a:	b089      	sub	sp, #36	@ 0x24
 800179c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800179e:	240c      	movs	r4, #12
 80017a0:	193b      	adds	r3, r7, r4
 80017a2:	0018      	movs	r0, r3
 80017a4:	2314      	movs	r3, #20
 80017a6:	001a      	movs	r2, r3
 80017a8:	2100      	movs	r1, #0
 80017aa:	f004 fa0f 	bl	8005bcc <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80017ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001818 <MX_GPIO_Init+0x80>)
 80017b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017b2:	4b19      	ldr	r3, [pc, #100]	@ (8001818 <MX_GPIO_Init+0x80>)
 80017b4:	2102      	movs	r1, #2
 80017b6:	430a      	orrs	r2, r1
 80017b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80017ba:	4b17      	ldr	r3, [pc, #92]	@ (8001818 <MX_GPIO_Init+0x80>)
 80017bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017be:	2202      	movs	r2, #2
 80017c0:	4013      	ands	r3, r2
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80017c6:	4b14      	ldr	r3, [pc, #80]	@ (8001818 <MX_GPIO_Init+0x80>)
 80017c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017ca:	4b13      	ldr	r3, [pc, #76]	@ (8001818 <MX_GPIO_Init+0x80>)
 80017cc:	2101      	movs	r1, #1
 80017ce:	430a      	orrs	r2, r1
 80017d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80017d2:	4b11      	ldr	r3, [pc, #68]	@ (8001818 <MX_GPIO_Init+0x80>)
 80017d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017d6:	2201      	movs	r2, #1
 80017d8:	4013      	ands	r3, r2
 80017da:	607b      	str	r3, [r7, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin : PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017de:	193b      	adds	r3, r7, r4
 80017e0:	2280      	movs	r2, #128	@ 0x80
 80017e2:	0092      	lsls	r2, r2, #2
 80017e4:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017e6:	193b      	adds	r3, r7, r4
 80017e8:	2288      	movs	r2, #136	@ 0x88
 80017ea:	0352      	lsls	r2, r2, #13
 80017ec:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	193b      	adds	r3, r7, r4
 80017f0:	2200      	movs	r2, #0
 80017f2:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f4:	193b      	adds	r3, r7, r4
 80017f6:	4a09      	ldr	r2, [pc, #36]	@ (800181c <MX_GPIO_Init+0x84>)
 80017f8:	0019      	movs	r1, r3
 80017fa:	0010      	movs	r0, r2
 80017fc:	f001 fed0 	bl	80035a0 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001800:	2200      	movs	r2, #0
 8001802:	2100      	movs	r1, #0
 8001804:	2007      	movs	r0, #7
 8001806:	f001 fc47 	bl	8003098 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800180a:	2007      	movs	r0, #7
 800180c:	f001 fc59 	bl	80030c2 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001810:	46c0      	nop			@ (mov r8, r8)
 8001812:	46bd      	mov	sp, r7
 8001814:	b009      	add	sp, #36	@ 0x24
 8001816:	bd90      	pop	{r4, r7, pc}
 8001818:	40021000 	.word	0x40021000
 800181c:	50000400 	.word	0x50000400

08001820 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
	// Conversion Complete & DMA Transfer Complete As Well
	adcConversionComplete = 1;
 8001828:	4b03      	ldr	r3, [pc, #12]	@ (8001838 <HAL_ADC_ConvCpltCallback+0x18>)
 800182a:	2201      	movs	r2, #1
 800182c:	601a      	str	r2, [r3, #0]
}
 800182e:	46c0      	nop			@ (mov r8, r8)
 8001830:	46bd      	mov	sp, r7
 8001832:	b002      	add	sp, #8
 8001834:	bd80      	pop	{r7, pc}
 8001836:	46c0      	nop			@ (mov r8, r8)
 8001838:	2000124c 	.word	0x2000124c

0800183c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001840:	b672      	cpsid	i
}
 8001842:	46c0      	nop			@ (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001844:	46c0      	nop			@ (mov r8, r8)
 8001846:	e7fd      	b.n	8001844 <Error_Handler+0x8>

08001848 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800184e:	4b0f      	ldr	r3, [pc, #60]	@ (800188c <HAL_MspInit+0x44>)
 8001850:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001852:	4b0e      	ldr	r3, [pc, #56]	@ (800188c <HAL_MspInit+0x44>)
 8001854:	2101      	movs	r1, #1
 8001856:	430a      	orrs	r2, r1
 8001858:	641a      	str	r2, [r3, #64]	@ 0x40
 800185a:	4b0c      	ldr	r3, [pc, #48]	@ (800188c <HAL_MspInit+0x44>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185e:	2201      	movs	r2, #1
 8001860:	4013      	ands	r3, r2
 8001862:	607b      	str	r3, [r7, #4]
 8001864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001866:	4b09      	ldr	r3, [pc, #36]	@ (800188c <HAL_MspInit+0x44>)
 8001868:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800186a:	4b08      	ldr	r3, [pc, #32]	@ (800188c <HAL_MspInit+0x44>)
 800186c:	2180      	movs	r1, #128	@ 0x80
 800186e:	0549      	lsls	r1, r1, #21
 8001870:	430a      	orrs	r2, r1
 8001872:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001874:	4b05      	ldr	r3, [pc, #20]	@ (800188c <HAL_MspInit+0x44>)
 8001876:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001878:	2380      	movs	r3, #128	@ 0x80
 800187a:	055b      	lsls	r3, r3, #21
 800187c:	4013      	ands	r3, r2
 800187e:	603b      	str	r3, [r7, #0]
 8001880:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001882:	46c0      	nop			@ (mov r8, r8)
 8001884:	46bd      	mov	sp, r7
 8001886:	b002      	add	sp, #8
 8001888:	bd80      	pop	{r7, pc}
 800188a:	46c0      	nop			@ (mov r8, r8)
 800188c:	40021000 	.word	0x40021000

08001890 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001890:	b590      	push	{r4, r7, lr}
 8001892:	b08b      	sub	sp, #44	@ 0x2c
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001898:	2414      	movs	r4, #20
 800189a:	193b      	adds	r3, r7, r4
 800189c:	0018      	movs	r0, r3
 800189e:	2314      	movs	r3, #20
 80018a0:	001a      	movs	r2, r3
 80018a2:	2100      	movs	r1, #0
 80018a4:	f004 f992 	bl	8005bcc <memset>
  if(hadc->Instance==ADC1)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a2e      	ldr	r2, [pc, #184]	@ (8001968 <HAL_ADC_MspInit+0xd8>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d155      	bne.n	800195e <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80018b2:	4b2e      	ldr	r3, [pc, #184]	@ (800196c <HAL_ADC_MspInit+0xdc>)
 80018b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018b6:	4b2d      	ldr	r3, [pc, #180]	@ (800196c <HAL_ADC_MspInit+0xdc>)
 80018b8:	2180      	movs	r1, #128	@ 0x80
 80018ba:	0349      	lsls	r1, r1, #13
 80018bc:	430a      	orrs	r2, r1
 80018be:	641a      	str	r2, [r3, #64]	@ 0x40
 80018c0:	4b2a      	ldr	r3, [pc, #168]	@ (800196c <HAL_ADC_MspInit+0xdc>)
 80018c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018c4:	2380      	movs	r3, #128	@ 0x80
 80018c6:	035b      	lsls	r3, r3, #13
 80018c8:	4013      	ands	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
 80018cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ce:	4b27      	ldr	r3, [pc, #156]	@ (800196c <HAL_ADC_MspInit+0xdc>)
 80018d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018d2:	4b26      	ldr	r3, [pc, #152]	@ (800196c <HAL_ADC_MspInit+0xdc>)
 80018d4:	2101      	movs	r1, #1
 80018d6:	430a      	orrs	r2, r1
 80018d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80018da:	4b24      	ldr	r3, [pc, #144]	@ (800196c <HAL_ADC_MspInit+0xdc>)
 80018dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018de:	2201      	movs	r2, #1
 80018e0:	4013      	ands	r3, r2
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA12 [PA10]     ------> ADC1_IN16
    PA13     ------> ADC1_IN17
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80018e6:	193b      	adds	r3, r7, r4
 80018e8:	22c0      	movs	r2, #192	@ 0xc0
 80018ea:	0192      	lsls	r2, r2, #6
 80018ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018ee:	193b      	adds	r3, r7, r4
 80018f0:	2203      	movs	r2, #3
 80018f2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	193b      	adds	r3, r7, r4
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fa:	193a      	adds	r2, r7, r4
 80018fc:	23a0      	movs	r3, #160	@ 0xa0
 80018fe:	05db      	lsls	r3, r3, #23
 8001900:	0011      	movs	r1, r2
 8001902:	0018      	movs	r0, r3
 8001904:	f001 fe4c 	bl	80035a0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 8001908:	4b19      	ldr	r3, [pc, #100]	@ (8001970 <HAL_ADC_MspInit+0xe0>)
 800190a:	4a1a      	ldr	r2, [pc, #104]	@ (8001974 <HAL_ADC_MspInit+0xe4>)
 800190c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800190e:	4b18      	ldr	r3, [pc, #96]	@ (8001970 <HAL_ADC_MspInit+0xe0>)
 8001910:	2205      	movs	r2, #5
 8001912:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001914:	4b16      	ldr	r3, [pc, #88]	@ (8001970 <HAL_ADC_MspInit+0xe0>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800191a:	4b15      	ldr	r3, [pc, #84]	@ (8001970 <HAL_ADC_MspInit+0xe0>)
 800191c:	2200      	movs	r2, #0
 800191e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001920:	4b13      	ldr	r3, [pc, #76]	@ (8001970 <HAL_ADC_MspInit+0xe0>)
 8001922:	2280      	movs	r2, #128	@ 0x80
 8001924:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001926:	4b12      	ldr	r3, [pc, #72]	@ (8001970 <HAL_ADC_MspInit+0xe0>)
 8001928:	2280      	movs	r2, #128	@ 0x80
 800192a:	0052      	lsls	r2, r2, #1
 800192c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800192e:	4b10      	ldr	r3, [pc, #64]	@ (8001970 <HAL_ADC_MspInit+0xe0>)
 8001930:	2280      	movs	r2, #128	@ 0x80
 8001932:	00d2      	lsls	r2, r2, #3
 8001934:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001936:	4b0e      	ldr	r3, [pc, #56]	@ (8001970 <HAL_ADC_MspInit+0xe0>)
 8001938:	2200      	movs	r2, #0
 800193a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800193c:	4b0c      	ldr	r3, [pc, #48]	@ (8001970 <HAL_ADC_MspInit+0xe0>)
 800193e:	2200      	movs	r2, #0
 8001940:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001942:	4b0b      	ldr	r3, [pc, #44]	@ (8001970 <HAL_ADC_MspInit+0xe0>)
 8001944:	0018      	movs	r0, r3
 8001946:	f001 fbd9 	bl	80030fc <HAL_DMA_Init>
 800194a:	1e03      	subs	r3, r0, #0
 800194c:	d001      	beq.n	8001952 <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 800194e:	f7ff ff75 	bl	800183c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a06      	ldr	r2, [pc, #24]	@ (8001970 <HAL_ADC_MspInit+0xe0>)
 8001956:	651a      	str	r2, [r3, #80]	@ 0x50
 8001958:	4b05      	ldr	r3, [pc, #20]	@ (8001970 <HAL_ADC_MspInit+0xe0>)
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	629a      	str	r2, [r3, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800195e:	46c0      	nop			@ (mov r8, r8)
 8001960:	46bd      	mov	sp, r7
 8001962:	b00b      	add	sp, #44	@ 0x2c
 8001964:	bd90      	pop	{r4, r7, pc}
 8001966:	46c0      	nop			@ (mov r8, r8)
 8001968:	40012400 	.word	0x40012400
 800196c:	40021000 	.word	0x40021000
 8001970:	200010ec 	.word	0x200010ec
 8001974:	4002001c 	.word	0x4002001c

08001978 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001978:	b590      	push	{r4, r7, lr}
 800197a:	b08f      	sub	sp, #60	@ 0x3c
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001980:	2410      	movs	r4, #16
 8001982:	193b      	adds	r3, r7, r4
 8001984:	0018      	movs	r0, r3
 8001986:	2328      	movs	r3, #40	@ 0x28
 8001988:	001a      	movs	r2, r3
 800198a:	2100      	movs	r1, #0
 800198c:	f004 f91e 	bl	8005bcc <memset>
  if(htim_base->Instance==TIM1)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a31      	ldr	r2, [pc, #196]	@ (8001a5c <HAL_TIM_Base_MspInit+0xe4>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d11e      	bne.n	80019d8 <HAL_TIM_Base_MspInit+0x60>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800199a:	193b      	adds	r3, r7, r4
 800199c:	2280      	movs	r2, #128	@ 0x80
 800199e:	0392      	lsls	r2, r2, #14
 80019a0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PLL;
 80019a2:	193b      	adds	r3, r7, r4
 80019a4:	2280      	movs	r2, #128	@ 0x80
 80019a6:	03d2      	lsls	r2, r2, #15
 80019a8:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019aa:	193b      	adds	r3, r7, r4
 80019ac:	0018      	movs	r0, r3
 80019ae:	f002 fc73 	bl	8004298 <HAL_RCCEx_PeriphCLKConfig>
 80019b2:	1e03      	subs	r3, r0, #0
 80019b4:	d001      	beq.n	80019ba <HAL_TIM_Base_MspInit+0x42>
    {
      Error_Handler();
 80019b6:	f7ff ff41 	bl	800183c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019ba:	4b29      	ldr	r3, [pc, #164]	@ (8001a60 <HAL_TIM_Base_MspInit+0xe8>)
 80019bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019be:	4b28      	ldr	r3, [pc, #160]	@ (8001a60 <HAL_TIM_Base_MspInit+0xe8>)
 80019c0:	2180      	movs	r1, #128	@ 0x80
 80019c2:	0109      	lsls	r1, r1, #4
 80019c4:	430a      	orrs	r2, r1
 80019c6:	641a      	str	r2, [r3, #64]	@ 0x40
 80019c8:	4b25      	ldr	r3, [pc, #148]	@ (8001a60 <HAL_TIM_Base_MspInit+0xe8>)
 80019ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019cc:	2380      	movs	r3, #128	@ 0x80
 80019ce:	011b      	lsls	r3, r3, #4
 80019d0:	4013      	ands	r3, r2
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80019d6:	e03d      	b.n	8001a54 <HAL_TIM_Base_MspInit+0xdc>
  else if(htim_base->Instance==TIM2)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	2380      	movs	r3, #128	@ 0x80
 80019de:	05db      	lsls	r3, r3, #23
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d137      	bne.n	8001a54 <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001a60 <HAL_TIM_Base_MspInit+0xe8>)
 80019e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001a60 <HAL_TIM_Base_MspInit+0xe8>)
 80019ea:	2101      	movs	r1, #1
 80019ec:	430a      	orrs	r2, r1
 80019ee:	63da      	str	r2, [r3, #60]	@ 0x3c
 80019f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a60 <HAL_TIM_Base_MspInit+0xe8>)
 80019f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019f4:	2201      	movs	r2, #1
 80019f6:	4013      	ands	r3, r2
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	68bb      	ldr	r3, [r7, #8]
    hdma_tim2_ch1.Instance = DMA1_Channel1;
 80019fc:	4b19      	ldr	r3, [pc, #100]	@ (8001a64 <HAL_TIM_Base_MspInit+0xec>)
 80019fe:	4a1a      	ldr	r2, [pc, #104]	@ (8001a68 <HAL_TIM_Base_MspInit+0xf0>)
 8001a00:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 8001a02:	4b18      	ldr	r3, [pc, #96]	@ (8001a64 <HAL_TIM_Base_MspInit+0xec>)
 8001a04:	221a      	movs	r2, #26
 8001a06:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a08:	4b16      	ldr	r3, [pc, #88]	@ (8001a64 <HAL_TIM_Base_MspInit+0xec>)
 8001a0a:	2210      	movs	r2, #16
 8001a0c:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a0e:	4b15      	ldr	r3, [pc, #84]	@ (8001a64 <HAL_TIM_Base_MspInit+0xec>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001a14:	4b13      	ldr	r3, [pc, #76]	@ (8001a64 <HAL_TIM_Base_MspInit+0xec>)
 8001a16:	2280      	movs	r2, #128	@ 0x80
 8001a18:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a1a:	4b12      	ldr	r3, [pc, #72]	@ (8001a64 <HAL_TIM_Base_MspInit+0xec>)
 8001a1c:	2280      	movs	r2, #128	@ 0x80
 8001a1e:	0092      	lsls	r2, r2, #2
 8001a20:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a22:	4b10      	ldr	r3, [pc, #64]	@ (8001a64 <HAL_TIM_Base_MspInit+0xec>)
 8001a24:	2280      	movs	r2, #128	@ 0x80
 8001a26:	0112      	lsls	r2, r2, #4
 8001a28:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8001a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a64 <HAL_TIM_Base_MspInit+0xec>)
 8001a2c:	2220      	movs	r2, #32
 8001a2e:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001a30:	4b0c      	ldr	r3, [pc, #48]	@ (8001a64 <HAL_TIM_Base_MspInit+0xec>)
 8001a32:	2280      	movs	r2, #128	@ 0x80
 8001a34:	0192      	lsls	r2, r2, #6
 8001a36:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001a38:	4b0a      	ldr	r3, [pc, #40]	@ (8001a64 <HAL_TIM_Base_MspInit+0xec>)
 8001a3a:	0018      	movs	r0, r3
 8001a3c:	f001 fb5e 	bl	80030fc <HAL_DMA_Init>
 8001a40:	1e03      	subs	r3, r0, #0
 8001a42:	d001      	beq.n	8001a48 <HAL_TIM_Base_MspInit+0xd0>
      Error_Handler();
 8001a44:	f7ff fefa 	bl	800183c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a06      	ldr	r2, [pc, #24]	@ (8001a64 <HAL_TIM_Base_MspInit+0xec>)
 8001a4c:	625a      	str	r2, [r3, #36]	@ 0x24
 8001a4e:	4b05      	ldr	r3, [pc, #20]	@ (8001a64 <HAL_TIM_Base_MspInit+0xec>)
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a54:	46c0      	nop			@ (mov r8, r8)
 8001a56:	46bd      	mov	sp, r7
 8001a58:	b00f      	add	sp, #60	@ 0x3c
 8001a5a:	bd90      	pop	{r4, r7, pc}
 8001a5c:	40012c00 	.word	0x40012c00
 8001a60:	40021000 	.word	0x40021000
 8001a64:	200011e0 	.word	0x200011e0
 8001a68:	40020008 	.word	0x40020008

08001a6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a6c:	b590      	push	{r4, r7, lr}
 8001a6e:	b089      	sub	sp, #36	@ 0x24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a74:	240c      	movs	r4, #12
 8001a76:	193b      	adds	r3, r7, r4
 8001a78:	0018      	movs	r0, r3
 8001a7a:	2314      	movs	r3, #20
 8001a7c:	001a      	movs	r2, r3
 8001a7e:	2100      	movs	r1, #0
 8001a80:	f004 f8a4 	bl	8005bcc <memset>
  if(htim->Instance==TIM1)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a15      	ldr	r2, [pc, #84]	@ (8001ae0 <HAL_TIM_MspPostInit+0x74>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d123      	bne.n	8001ad6 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ae4 <HAL_TIM_MspPostInit+0x78>)
 8001a90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a92:	4b14      	ldr	r3, [pc, #80]	@ (8001ae4 <HAL_TIM_MspPostInit+0x78>)
 8001a94:	2101      	movs	r1, #1
 8001a96:	430a      	orrs	r2, r1
 8001a98:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a9a:	4b12      	ldr	r3, [pc, #72]	@ (8001ae4 <HAL_TIM_MspPostInit+0x78>)
 8001a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	60bb      	str	r3, [r7, #8]
 8001aa4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001aa6:	193b      	adds	r3, r7, r4
 8001aa8:	2280      	movs	r2, #128	@ 0x80
 8001aaa:	0052      	lsls	r2, r2, #1
 8001aac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aae:	0021      	movs	r1, r4
 8001ab0:	187b      	adds	r3, r7, r1
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	187b      	adds	r3, r7, r1
 8001ab8:	2200      	movs	r2, #0
 8001aba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abc:	187b      	adds	r3, r7, r1
 8001abe:	2200      	movs	r2, #0
 8001ac0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001ac2:	187b      	adds	r3, r7, r1
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac8:	187a      	adds	r2, r7, r1
 8001aca:	23a0      	movs	r3, #160	@ 0xa0
 8001acc:	05db      	lsls	r3, r3, #23
 8001ace:	0011      	movs	r1, r2
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	f001 fd65 	bl	80035a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001ad6:	46c0      	nop			@ (mov r8, r8)
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	b009      	add	sp, #36	@ 0x24
 8001adc:	bd90      	pop	{r4, r7, pc}
 8001ade:	46c0      	nop			@ (mov r8, r8)
 8001ae0:	40012c00 	.word	0x40012c00
 8001ae4:	40021000 	.word	0x40021000

08001ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001aec:	46c0      	nop			@ (mov r8, r8)
 8001aee:	e7fd      	b.n	8001aec <NMI_Handler+0x4>

08001af0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001af4:	46c0      	nop			@ (mov r8, r8)
 8001af6:	e7fd      	b.n	8001af4 <HardFault_Handler+0x4>

08001af8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001afc:	46c0      	nop			@ (mov r8, r8)
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b06:	46c0      	nop			@ (mov r8, r8)
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b10:	f000 f97e 	bl	8001e10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b14:	46c0      	nop			@ (mov r8, r8)
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001b1e:	2380      	movs	r3, #128	@ 0x80
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	0018      	movs	r0, r3
 8001b24:	f001 fea0 	bl	8003868 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001b28:	46c0      	nop			@ (mov r8, r8)
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
	...

08001b30 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001b34:	4b03      	ldr	r3, [pc, #12]	@ (8001b44 <DMA1_Channel1_IRQHandler+0x14>)
 8001b36:	0018      	movs	r0, r3
 8001b38:	f001 fbf0 	bl	800331c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b3c:	46c0      	nop			@ (mov r8, r8)
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	46c0      	nop			@ (mov r8, r8)
 8001b44:	200011e0 	.word	0x200011e0

08001b48 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b4c:	4b03      	ldr	r3, [pc, #12]	@ (8001b5c <DMA1_Channel2_3_IRQHandler+0x14>)
 8001b4e:	0018      	movs	r0, r3
 8001b50:	f001 fbe4 	bl	800331c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001b54:	46c0      	nop			@ (mov r8, r8)
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	46c0      	nop			@ (mov r8, r8)
 8001b5c:	200010ec 	.word	0x200010ec

08001b60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  return 1;
 8001b64:	2301      	movs	r3, #1
}
 8001b66:	0018      	movs	r0, r3
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <_kill>:

int _kill(int pid, int sig)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b76:	f004 f85f 	bl	8005c38 <__errno>
 8001b7a:	0003      	movs	r3, r0
 8001b7c:	2216      	movs	r2, #22
 8001b7e:	601a      	str	r2, [r3, #0]
  return -1;
 8001b80:	2301      	movs	r3, #1
 8001b82:	425b      	negs	r3, r3
}
 8001b84:	0018      	movs	r0, r3
 8001b86:	46bd      	mov	sp, r7
 8001b88:	b002      	add	sp, #8
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <_exit>:

void _exit (int status)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b94:	2301      	movs	r3, #1
 8001b96:	425a      	negs	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	0011      	movs	r1, r2
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	f7ff ffe5 	bl	8001b6c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ba2:	46c0      	nop			@ (mov r8, r8)
 8001ba4:	e7fd      	b.n	8001ba2 <_exit+0x16>

08001ba6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b086      	sub	sp, #24
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	60f8      	str	r0, [r7, #12]
 8001bae:	60b9      	str	r1, [r7, #8]
 8001bb0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	617b      	str	r3, [r7, #20]
 8001bb6:	e00a      	b.n	8001bce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bb8:	e000      	b.n	8001bbc <_read+0x16>
 8001bba:	bf00      	nop
 8001bbc:	0001      	movs	r1, r0
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	1c5a      	adds	r2, r3, #1
 8001bc2:	60ba      	str	r2, [r7, #8]
 8001bc4:	b2ca      	uxtb	r2, r1
 8001bc6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	3301      	adds	r3, #1
 8001bcc:	617b      	str	r3, [r7, #20]
 8001bce:	697a      	ldr	r2, [r7, #20]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	dbf0      	blt.n	8001bb8 <_read+0x12>
  }

  return len;
 8001bd6:	687b      	ldr	r3, [r7, #4]
}
 8001bd8:	0018      	movs	r0, r3
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	b006      	add	sp, #24
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]
 8001bf0:	e009      	b.n	8001c06 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	1c5a      	adds	r2, r3, #1
 8001bf6:	60ba      	str	r2, [r7, #8]
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	0018      	movs	r0, r3
 8001bfc:	e000      	b.n	8001c00 <_write+0x20>
 8001bfe:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	3301      	adds	r3, #1
 8001c04:	617b      	str	r3, [r7, #20]
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	dbf1      	blt.n	8001bf2 <_write+0x12>
  }
  return len;
 8001c0e:	687b      	ldr	r3, [r7, #4]
}
 8001c10:	0018      	movs	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	b006      	add	sp, #24
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <_close>:

int _close(int file)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c20:	2301      	movs	r3, #1
 8001c22:	425b      	negs	r3, r3
}
 8001c24:	0018      	movs	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	b002      	add	sp, #8
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	2280      	movs	r2, #128	@ 0x80
 8001c3a:	0192      	lsls	r2, r2, #6
 8001c3c:	605a      	str	r2, [r3, #4]
  return 0;
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	0018      	movs	r0, r3
 8001c42:	46bd      	mov	sp, r7
 8001c44:	b002      	add	sp, #8
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <_isatty>:

int _isatty(int file)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c50:	2301      	movs	r3, #1
}
 8001c52:	0018      	movs	r0, r3
 8001c54:	46bd      	mov	sp, r7
 8001c56:	b002      	add	sp, #8
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b084      	sub	sp, #16
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	60f8      	str	r0, [r7, #12]
 8001c62:	60b9      	str	r1, [r7, #8]
 8001c64:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	0018      	movs	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	b004      	add	sp, #16
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c78:	4a14      	ldr	r2, [pc, #80]	@ (8001ccc <_sbrk+0x5c>)
 8001c7a:	4b15      	ldr	r3, [pc, #84]	@ (8001cd0 <_sbrk+0x60>)
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c84:	4b13      	ldr	r3, [pc, #76]	@ (8001cd4 <_sbrk+0x64>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d102      	bne.n	8001c92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c8c:	4b11      	ldr	r3, [pc, #68]	@ (8001cd4 <_sbrk+0x64>)
 8001c8e:	4a12      	ldr	r2, [pc, #72]	@ (8001cd8 <_sbrk+0x68>)
 8001c90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c92:	4b10      	ldr	r3, [pc, #64]	@ (8001cd4 <_sbrk+0x64>)
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	18d3      	adds	r3, r2, r3
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d207      	bcs.n	8001cb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ca0:	f003 ffca 	bl	8005c38 <__errno>
 8001ca4:	0003      	movs	r3, r0
 8001ca6:	220c      	movs	r2, #12
 8001ca8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001caa:	2301      	movs	r3, #1
 8001cac:	425b      	negs	r3, r3
 8001cae:	e009      	b.n	8001cc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cb0:	4b08      	ldr	r3, [pc, #32]	@ (8001cd4 <_sbrk+0x64>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cb6:	4b07      	ldr	r3, [pc, #28]	@ (8001cd4 <_sbrk+0x64>)
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	18d2      	adds	r2, r2, r3
 8001cbe:	4b05      	ldr	r3, [pc, #20]	@ (8001cd4 <_sbrk+0x64>)
 8001cc0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
}
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	b006      	add	sp, #24
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	20002000 	.word	0x20002000
 8001cd0:	00000400 	.word	0x00000400
 8001cd4:	20001250 	.word	0x20001250
 8001cd8:	200013a8 	.word	0x200013a8

08001cdc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ce0:	46c0      	nop			@ (mov r8, r8)
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
	...

08001ce8 <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

  ldr   r0, =_estack
 8001ce8:	480d      	ldr	r0, [pc, #52]	@ (8001d20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001cea:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001cec:	f7ff fff6 	bl	8001cdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cf0:	480c      	ldr	r0, [pc, #48]	@ (8001d24 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cf2:	490d      	ldr	r1, [pc, #52]	@ (8001d28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cf4:	4a0d      	ldr	r2, [pc, #52]	@ (8001d2c <LoopForever+0xe>)
  movs r3, #0
 8001cf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cf8:	e002      	b.n	8001d00 <LoopCopyDataInit>

08001cfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cfe:	3304      	adds	r3, #4

08001d00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d04:	d3f9      	bcc.n	8001cfa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d06:	4a0a      	ldr	r2, [pc, #40]	@ (8001d30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d08:	4c0a      	ldr	r4, [pc, #40]	@ (8001d34 <LoopForever+0x16>)
  movs r3, #0
 8001d0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d0c:	e001      	b.n	8001d12 <LoopFillZerobss>

08001d0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d10:	3204      	adds	r2, #4

08001d12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d14:	d3fb      	bcc.n	8001d0e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d16:	f003 ff95 	bl	8005c44 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001d1a:	f7ff f993 	bl	8001044 <main>

08001d1e <LoopForever>:

LoopForever:
  b LoopForever
 8001d1e:	e7fe      	b.n	8001d1e <LoopForever>
  ldr   r0, =_estack
 8001d20:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001d24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d28:	2000046c 	.word	0x2000046c
  ldr r2, =_sidata
 8001d2c:	08006cf0 	.word	0x08006cf0
  ldr r2, =_sbss
 8001d30:	2000046c 	.word	0x2000046c
  ldr r4, =_ebss
 8001d34:	200013a4 	.word	0x200013a4

08001d38 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d38:	e7fe      	b.n	8001d38 <ADC1_IRQHandler>
	...

08001d3c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d42:	1dfb      	adds	r3, r7, #7
 8001d44:	2200      	movs	r2, #0
 8001d46:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d48:	4b0b      	ldr	r3, [pc, #44]	@ (8001d78 <HAL_Init+0x3c>)
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d78 <HAL_Init+0x3c>)
 8001d4e:	2180      	movs	r1, #128	@ 0x80
 8001d50:	0049      	lsls	r1, r1, #1
 8001d52:	430a      	orrs	r2, r1
 8001d54:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d56:	2000      	movs	r0, #0
 8001d58:	f000 f810 	bl	8001d7c <HAL_InitTick>
 8001d5c:	1e03      	subs	r3, r0, #0
 8001d5e:	d003      	beq.n	8001d68 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001d60:	1dfb      	adds	r3, r7, #7
 8001d62:	2201      	movs	r2, #1
 8001d64:	701a      	strb	r2, [r3, #0]
 8001d66:	e001      	b.n	8001d6c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001d68:	f7ff fd6e 	bl	8001848 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d6c:	1dfb      	adds	r3, r7, #7
 8001d6e:	781b      	ldrb	r3, [r3, #0]
}
 8001d70:	0018      	movs	r0, r3
 8001d72:	46bd      	mov	sp, r7
 8001d74:	b002      	add	sp, #8
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40022000 	.word	0x40022000

08001d7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d7c:	b590      	push	{r4, r7, lr}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d84:	230f      	movs	r3, #15
 8001d86:	18fb      	adds	r3, r7, r3
 8001d88:	2200      	movs	r2, #0
 8001d8a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001d8c:	4b1d      	ldr	r3, [pc, #116]	@ (8001e04 <HAL_InitTick+0x88>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d02b      	beq.n	8001dec <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001d94:	4b1c      	ldr	r3, [pc, #112]	@ (8001e08 <HAL_InitTick+0x8c>)
 8001d96:	681c      	ldr	r4, [r3, #0]
 8001d98:	4b1a      	ldr	r3, [pc, #104]	@ (8001e04 <HAL_InitTick+0x88>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	0019      	movs	r1, r3
 8001d9e:	23fa      	movs	r3, #250	@ 0xfa
 8001da0:	0098      	lsls	r0, r3, #2
 8001da2:	f7fe f9b9 	bl	8000118 <__udivsi3>
 8001da6:	0003      	movs	r3, r0
 8001da8:	0019      	movs	r1, r3
 8001daa:	0020      	movs	r0, r4
 8001dac:	f7fe f9b4 	bl	8000118 <__udivsi3>
 8001db0:	0003      	movs	r3, r0
 8001db2:	0018      	movs	r0, r3
 8001db4:	f001 f995 	bl	80030e2 <HAL_SYSTICK_Config>
 8001db8:	1e03      	subs	r3, r0, #0
 8001dba:	d112      	bne.n	8001de2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b03      	cmp	r3, #3
 8001dc0:	d80a      	bhi.n	8001dd8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	425b      	negs	r3, r3
 8001dc8:	2200      	movs	r2, #0
 8001dca:	0018      	movs	r0, r3
 8001dcc:	f001 f964 	bl	8003098 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dd0:	4b0e      	ldr	r3, [pc, #56]	@ (8001e0c <HAL_InitTick+0x90>)
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	e00d      	b.n	8001df4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001dd8:	230f      	movs	r3, #15
 8001dda:	18fb      	adds	r3, r7, r3
 8001ddc:	2201      	movs	r2, #1
 8001dde:	701a      	strb	r2, [r3, #0]
 8001de0:	e008      	b.n	8001df4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001de2:	230f      	movs	r3, #15
 8001de4:	18fb      	adds	r3, r7, r3
 8001de6:	2201      	movs	r2, #1
 8001de8:	701a      	strb	r2, [r3, #0]
 8001dea:	e003      	b.n	8001df4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001dec:	230f      	movs	r3, #15
 8001dee:	18fb      	adds	r3, r7, r3
 8001df0:	2201      	movs	r2, #1
 8001df2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001df4:	230f      	movs	r3, #15
 8001df6:	18fb      	adds	r3, r7, r3
 8001df8:	781b      	ldrb	r3, [r3, #0]
}
 8001dfa:	0018      	movs	r0, r3
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	b005      	add	sp, #20
 8001e00:	bd90      	pop	{r4, r7, pc}
 8001e02:	46c0      	nop			@ (mov r8, r8)
 8001e04:	2000040c 	.word	0x2000040c
 8001e08:	20000404 	.word	0x20000404
 8001e0c:	20000408 	.word	0x20000408

08001e10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e14:	4b05      	ldr	r3, [pc, #20]	@ (8001e2c <HAL_IncTick+0x1c>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	001a      	movs	r2, r3
 8001e1a:	4b05      	ldr	r3, [pc, #20]	@ (8001e30 <HAL_IncTick+0x20>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	18d2      	adds	r2, r2, r3
 8001e20:	4b03      	ldr	r3, [pc, #12]	@ (8001e30 <HAL_IncTick+0x20>)
 8001e22:	601a      	str	r2, [r3, #0]
}
 8001e24:	46c0      	nop			@ (mov r8, r8)
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	46c0      	nop			@ (mov r8, r8)
 8001e2c:	2000040c 	.word	0x2000040c
 8001e30:	20001254 	.word	0x20001254

08001e34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  return uwTick;
 8001e38:	4b02      	ldr	r3, [pc, #8]	@ (8001e44 <HAL_GetTick+0x10>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
}
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	46c0      	nop			@ (mov r8, r8)
 8001e44:	20001254 	.word	0x20001254

08001e48 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a05      	ldr	r2, [pc, #20]	@ (8001e6c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001e58:	401a      	ands	r2, r3
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	431a      	orrs	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	601a      	str	r2, [r3, #0]
}
 8001e62:	46c0      	nop			@ (mov r8, r8)
 8001e64:	46bd      	mov	sp, r7
 8001e66:	b002      	add	sp, #8
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	46c0      	nop			@ (mov r8, r8)
 8001e6c:	fe3fffff 	.word	0xfe3fffff

08001e70 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	23e0      	movs	r3, #224	@ 0xe0
 8001e7e:	045b      	lsls	r3, r3, #17
 8001e80:	4013      	ands	r3, r2
}
 8001e82:	0018      	movs	r0, r3
 8001e84:	46bd      	mov	sp, r7
 8001e86:	b002      	add	sp, #8
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b084      	sub	sp, #16
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	60f8      	str	r0, [r7, #12]
 8001e92:	60b9      	str	r1, [r7, #8]
 8001e94:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	695b      	ldr	r3, [r3, #20]
 8001e9a:	68ba      	ldr	r2, [r7, #8]
 8001e9c:	2104      	movs	r1, #4
 8001e9e:	400a      	ands	r2, r1
 8001ea0:	2107      	movs	r1, #7
 8001ea2:	4091      	lsls	r1, r2
 8001ea4:	000a      	movs	r2, r1
 8001ea6:	43d2      	mvns	r2, r2
 8001ea8:	401a      	ands	r2, r3
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	2104      	movs	r1, #4
 8001eae:	400b      	ands	r3, r1
 8001eb0:	6879      	ldr	r1, [r7, #4]
 8001eb2:	4099      	lsls	r1, r3
 8001eb4:	000b      	movs	r3, r1
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001ebc:	46c0      	nop			@ (mov r8, r8)
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	b004      	add	sp, #16
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	2104      	movs	r1, #4
 8001ed6:	400a      	ands	r2, r1
 8001ed8:	2107      	movs	r1, #7
 8001eda:	4091      	lsls	r1, r2
 8001edc:	000a      	movs	r2, r1
 8001ede:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	2104      	movs	r1, #4
 8001ee4:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001ee6:	40da      	lsrs	r2, r3
 8001ee8:	0013      	movs	r3, r2
}
 8001eea:	0018      	movs	r0, r3
 8001eec:	46bd      	mov	sp, r7
 8001eee:	b002      	add	sp, #8
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b082      	sub	sp, #8
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68da      	ldr	r2, [r3, #12]
 8001efe:	23c0      	movs	r3, #192	@ 0xc0
 8001f00:	011b      	lsls	r3, r3, #4
 8001f02:	4013      	ands	r3, r2
 8001f04:	d101      	bne.n	8001f0a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001f06:	2301      	movs	r3, #1
 8001f08:	e000      	b.n	8001f0c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	b002      	add	sp, #8
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f24:	68ba      	ldr	r2, [r7, #8]
 8001f26:	211f      	movs	r1, #31
 8001f28:	400a      	ands	r2, r1
 8001f2a:	210f      	movs	r1, #15
 8001f2c:	4091      	lsls	r1, r2
 8001f2e:	000a      	movs	r2, r1
 8001f30:	43d2      	mvns	r2, r2
 8001f32:	401a      	ands	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	0e9b      	lsrs	r3, r3, #26
 8001f38:	210f      	movs	r1, #15
 8001f3a:	4019      	ands	r1, r3
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	201f      	movs	r0, #31
 8001f40:	4003      	ands	r3, r0
 8001f42:	4099      	lsls	r1, r3
 8001f44:	000b      	movs	r3, r1
 8001f46:	431a      	orrs	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f4c:	46c0      	nop			@ (mov r8, r8)
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	b004      	add	sp, #16
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	035b      	lsls	r3, r3, #13
 8001f66:	0b5b      	lsrs	r3, r3, #13
 8001f68:	431a      	orrs	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f6e:	46c0      	nop			@ (mov r8, r8)
 8001f70:	46bd      	mov	sp, r7
 8001f72:	b002      	add	sp, #8
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b082      	sub	sp, #8
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
 8001f7e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	0352      	lsls	r2, r2, #13
 8001f88:	0b52      	lsrs	r2, r2, #13
 8001f8a:	43d2      	mvns	r2, r2
 8001f8c:	401a      	ands	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f92:	46c0      	nop			@ (mov r8, r8)
 8001f94:	46bd      	mov	sp, r7
 8001f96:	b002      	add	sp, #8
 8001f98:	bd80      	pop	{r7, pc}
	...

08001f9c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	695b      	ldr	r3, [r3, #20]
 8001fac:	68ba      	ldr	r2, [r7, #8]
 8001fae:	0212      	lsls	r2, r2, #8
 8001fb0:	43d2      	mvns	r2, r2
 8001fb2:	401a      	ands	r2, r3
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	021b      	lsls	r3, r3, #8
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	400b      	ands	r3, r1
 8001fbc:	4904      	ldr	r1, [pc, #16]	@ (8001fd0 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001fbe:	400b      	ands	r3, r1
 8001fc0:	431a      	orrs	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001fc6:	46c0      	nop			@ (mov r8, r8)
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	b004      	add	sp, #16
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	46c0      	nop			@ (mov r8, r8)
 8001fd0:	07ffff00 	.word	0x07ffff00

08001fd4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	4a05      	ldr	r2, [pc, #20]	@ (8001ff8 <LL_ADC_EnableInternalRegulator+0x24>)
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	2280      	movs	r2, #128	@ 0x80
 8001fe6:	0552      	lsls	r2, r2, #21
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001fee:	46c0      	nop			@ (mov r8, r8)
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	b002      	add	sp, #8
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	46c0      	nop			@ (mov r8, r8)
 8001ff8:	6fffffe8 	.word	0x6fffffe8

08001ffc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	2380      	movs	r3, #128	@ 0x80
 800200a:	055b      	lsls	r3, r3, #21
 800200c:	401a      	ands	r2, r3
 800200e:	2380      	movs	r3, #128	@ 0x80
 8002010:	055b      	lsls	r3, r3, #21
 8002012:	429a      	cmp	r2, r3
 8002014:	d101      	bne.n	800201a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8002016:	2301      	movs	r3, #1
 8002018:	e000      	b.n	800201c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800201a:	2300      	movs	r3, #0
}
 800201c:	0018      	movs	r0, r3
 800201e:	46bd      	mov	sp, r7
 8002020:	b002      	add	sp, #8
 8002022:	bd80      	pop	{r7, pc}

08002024 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	4a04      	ldr	r2, [pc, #16]	@ (8002044 <LL_ADC_Enable+0x20>)
 8002032:	4013      	ands	r3, r2
 8002034:	2201      	movs	r2, #1
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800203c:	46c0      	nop			@ (mov r8, r8)
 800203e:	46bd      	mov	sp, r7
 8002040:	b002      	add	sp, #8
 8002042:	bd80      	pop	{r7, pc}
 8002044:	7fffffe8 	.word	0x7fffffe8

08002048 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	4a04      	ldr	r2, [pc, #16]	@ (8002068 <LL_ADC_Disable+0x20>)
 8002056:	4013      	ands	r3, r2
 8002058:	2202      	movs	r2, #2
 800205a:	431a      	orrs	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002060:	46c0      	nop			@ (mov r8, r8)
 8002062:	46bd      	mov	sp, r7
 8002064:	b002      	add	sp, #8
 8002066:	bd80      	pop	{r7, pc}
 8002068:	7fffffe8 	.word	0x7fffffe8

0800206c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	2201      	movs	r2, #1
 800207a:	4013      	ands	r3, r2
 800207c:	2b01      	cmp	r3, #1
 800207e:	d101      	bne.n	8002084 <LL_ADC_IsEnabled+0x18>
 8002080:	2301      	movs	r3, #1
 8002082:	e000      	b.n	8002086 <LL_ADC_IsEnabled+0x1a>
 8002084:	2300      	movs	r3, #0
}
 8002086:	0018      	movs	r0, r3
 8002088:	46bd      	mov	sp, r7
 800208a:	b002      	add	sp, #8
 800208c:	bd80      	pop	{r7, pc}

0800208e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b082      	sub	sp, #8
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	2202      	movs	r2, #2
 800209c:	4013      	ands	r3, r2
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d101      	bne.n	80020a6 <LL_ADC_IsDisableOngoing+0x18>
 80020a2:	2301      	movs	r3, #1
 80020a4:	e000      	b.n	80020a8 <LL_ADC_IsDisableOngoing+0x1a>
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	0018      	movs	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	b002      	add	sp, #8
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	4a04      	ldr	r2, [pc, #16]	@ (80020d0 <LL_ADC_REG_StartConversion+0x20>)
 80020be:	4013      	ands	r3, r2
 80020c0:	2204      	movs	r2, #4
 80020c2:	431a      	orrs	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80020c8:	46c0      	nop			@ (mov r8, r8)
 80020ca:	46bd      	mov	sp, r7
 80020cc:	b002      	add	sp, #8
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	7fffffe8 	.word	0x7fffffe8

080020d4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	2204      	movs	r2, #4
 80020e2:	4013      	ands	r3, r2
 80020e4:	2b04      	cmp	r3, #4
 80020e6:	d101      	bne.n	80020ec <LL_ADC_REG_IsConversionOngoing+0x18>
 80020e8:	2301      	movs	r3, #1
 80020ea:	e000      	b.n	80020ee <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	0018      	movs	r0, r3
 80020f0:	46bd      	mov	sp, r7
 80020f2:	b002      	add	sp, #8
 80020f4:	bd80      	pop	{r7, pc}
	...

080020f8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b088      	sub	sp, #32
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002100:	231f      	movs	r3, #31
 8002102:	18fb      	adds	r3, r7, r3
 8002104:	2200      	movs	r2, #0
 8002106:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8002108:	2300      	movs	r3, #0
 800210a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 800210c:	2300      	movs	r3, #0
 800210e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002110:	2300      	movs	r3, #0
 8002112:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e17f      	b.n	800241e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002122:	2b00      	cmp	r3, #0
 8002124:	d10a      	bne.n	800213c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	0018      	movs	r0, r3
 800212a:	f7ff fbb1 	bl	8001890 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2254      	movs	r2, #84	@ 0x54
 8002138:	2100      	movs	r1, #0
 800213a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	0018      	movs	r0, r3
 8002142:	f7ff ff5b 	bl	8001ffc <LL_ADC_IsInternalRegulatorEnabled>
 8002146:	1e03      	subs	r3, r0, #0
 8002148:	d115      	bne.n	8002176 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	0018      	movs	r0, r3
 8002150:	f7ff ff40 	bl	8001fd4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002154:	4bb4      	ldr	r3, [pc, #720]	@ (8002428 <HAL_ADC_Init+0x330>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	49b4      	ldr	r1, [pc, #720]	@ (800242c <HAL_ADC_Init+0x334>)
 800215a:	0018      	movs	r0, r3
 800215c:	f7fd ffdc 	bl	8000118 <__udivsi3>
 8002160:	0003      	movs	r3, r0
 8002162:	3301      	adds	r3, #1
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002168:	e002      	b.n	8002170 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	3b01      	subs	r3, #1
 800216e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f9      	bne.n	800216a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	0018      	movs	r0, r3
 800217c:	f7ff ff3e 	bl	8001ffc <LL_ADC_IsInternalRegulatorEnabled>
 8002180:	1e03      	subs	r3, r0, #0
 8002182:	d10f      	bne.n	80021a4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002188:	2210      	movs	r2, #16
 800218a:	431a      	orrs	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002194:	2201      	movs	r2, #1
 8002196:	431a      	orrs	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800219c:	231f      	movs	r3, #31
 800219e:	18fb      	adds	r3, r7, r3
 80021a0:	2201      	movs	r2, #1
 80021a2:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	0018      	movs	r0, r3
 80021aa:	f7ff ff93 	bl	80020d4 <LL_ADC_REG_IsConversionOngoing>
 80021ae:	0003      	movs	r3, r0
 80021b0:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021b6:	2210      	movs	r2, #16
 80021b8:	4013      	ands	r3, r2
 80021ba:	d000      	beq.n	80021be <HAL_ADC_Init+0xc6>
 80021bc:	e122      	b.n	8002404 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d000      	beq.n	80021c6 <HAL_ADC_Init+0xce>
 80021c4:	e11e      	b.n	8002404 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ca:	4a99      	ldr	r2, [pc, #612]	@ (8002430 <HAL_ADC_Init+0x338>)
 80021cc:	4013      	ands	r3, r2
 80021ce:	2202      	movs	r2, #2
 80021d0:	431a      	orrs	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	0018      	movs	r0, r3
 80021dc:	f7ff ff46 	bl	800206c <LL_ADC_IsEnabled>
 80021e0:	1e03      	subs	r3, r0, #0
 80021e2:	d000      	beq.n	80021e6 <HAL_ADC_Init+0xee>
 80021e4:	e0ad      	b.n	8002342 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	7e1b      	ldrb	r3, [r3, #24]
 80021ee:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80021f0:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	7e5b      	ldrb	r3, [r3, #25]
 80021f6:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80021f8:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	7e9b      	ldrb	r3, [r3, #26]
 80021fe:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002200:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002206:	2b00      	cmp	r3, #0
 8002208:	d002      	beq.n	8002210 <HAL_ADC_Init+0x118>
 800220a:	2380      	movs	r3, #128	@ 0x80
 800220c:	015b      	lsls	r3, r3, #5
 800220e:	e000      	b.n	8002212 <HAL_ADC_Init+0x11a>
 8002210:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002212:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002218:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	2b00      	cmp	r3, #0
 8002220:	da04      	bge.n	800222c <HAL_ADC_Init+0x134>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	085b      	lsrs	r3, r3, #1
 800222a:	e001      	b.n	8002230 <HAL_ADC_Init+0x138>
 800222c:	2380      	movs	r3, #128	@ 0x80
 800222e:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8002230:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	212c      	movs	r1, #44	@ 0x2c
 8002236:	5c5b      	ldrb	r3, [r3, r1]
 8002238:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800223a:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4313      	orrs	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2220      	movs	r2, #32
 8002246:	5c9b      	ldrb	r3, [r3, r2]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d115      	bne.n	8002278 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	7e9b      	ldrb	r3, [r3, #26]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d105      	bne.n	8002260 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	2280      	movs	r2, #128	@ 0x80
 8002258:	0252      	lsls	r2, r2, #9
 800225a:	4313      	orrs	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
 800225e:	e00b      	b.n	8002278 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002264:	2220      	movs	r2, #32
 8002266:	431a      	orrs	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002270:	2201      	movs	r2, #1
 8002272:	431a      	orrs	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800227c:	2b00      	cmp	r3, #0
 800227e:	d00a      	beq.n	8002296 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002284:	23e0      	movs	r3, #224	@ 0xe0
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800228e:	4313      	orrs	r3, r2
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4313      	orrs	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	4a65      	ldr	r2, [pc, #404]	@ (8002434 <HAL_ADC_Init+0x33c>)
 800229e:	4013      	ands	r3, r2
 80022a0:	0019      	movs	r1, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	430a      	orrs	r2, r1
 80022aa:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	0f9b      	lsrs	r3, r3, #30
 80022b2:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80022b8:	4313      	orrs	r3, r2
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	4313      	orrs	r3, r2
 80022be:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	223c      	movs	r2, #60	@ 0x3c
 80022c4:	5c9b      	ldrb	r3, [r3, r2]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d111      	bne.n	80022ee <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	0f9b      	lsrs	r3, r3, #30
 80022d0:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80022d6:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 80022dc:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80022e2:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	2201      	movs	r2, #1
 80022ea:	4313      	orrs	r3, r2
 80022ec:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	4a50      	ldr	r2, [pc, #320]	@ (8002438 <HAL_ADC_Init+0x340>)
 80022f6:	4013      	ands	r3, r2
 80022f8:	0019      	movs	r1, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	430a      	orrs	r2, r1
 8002302:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685a      	ldr	r2, [r3, #4]
 8002308:	23c0      	movs	r3, #192	@ 0xc0
 800230a:	061b      	lsls	r3, r3, #24
 800230c:	429a      	cmp	r2, r3
 800230e:	d018      	beq.n	8002342 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002314:	2380      	movs	r3, #128	@ 0x80
 8002316:	05db      	lsls	r3, r3, #23
 8002318:	429a      	cmp	r2, r3
 800231a:	d012      	beq.n	8002342 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002320:	2380      	movs	r3, #128	@ 0x80
 8002322:	061b      	lsls	r3, r3, #24
 8002324:	429a      	cmp	r2, r3
 8002326:	d00c      	beq.n	8002342 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002328:	4b44      	ldr	r3, [pc, #272]	@ (800243c <HAL_ADC_Init+0x344>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a44      	ldr	r2, [pc, #272]	@ (8002440 <HAL_ADC_Init+0x348>)
 800232e:	4013      	ands	r3, r2
 8002330:	0019      	movs	r1, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685a      	ldr	r2, [r3, #4]
 8002336:	23f0      	movs	r3, #240	@ 0xf0
 8002338:	039b      	lsls	r3, r3, #14
 800233a:	401a      	ands	r2, r3
 800233c:	4b3f      	ldr	r3, [pc, #252]	@ (800243c <HAL_ADC_Init+0x344>)
 800233e:	430a      	orrs	r2, r1
 8002340:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6818      	ldr	r0, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800234a:	001a      	movs	r2, r3
 800234c:	2100      	movs	r1, #0
 800234e:	f7ff fd9c 	bl	8001e8a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6818      	ldr	r0, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800235a:	493a      	ldr	r1, [pc, #232]	@ (8002444 <HAL_ADC_Init+0x34c>)
 800235c:	001a      	movs	r2, r3
 800235e:	f7ff fd94 	bl	8001e8a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d109      	bne.n	800237e <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2110      	movs	r1, #16
 8002376:	4249      	negs	r1, r1
 8002378:	430a      	orrs	r2, r1
 800237a:	629a      	str	r2, [r3, #40]	@ 0x28
 800237c:	e018      	b.n	80023b0 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	691a      	ldr	r2, [r3, #16]
 8002382:	2380      	movs	r3, #128	@ 0x80
 8002384:	039b      	lsls	r3, r3, #14
 8002386:	429a      	cmp	r2, r3
 8002388:	d112      	bne.n	80023b0 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	69db      	ldr	r3, [r3, #28]
 8002394:	3b01      	subs	r3, #1
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	221c      	movs	r2, #28
 800239a:	4013      	ands	r3, r2
 800239c:	2210      	movs	r2, #16
 800239e:	4252      	negs	r2, r2
 80023a0:	409a      	lsls	r2, r3
 80023a2:	0011      	movs	r1, r2
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	430a      	orrs	r2, r1
 80023ae:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2100      	movs	r1, #0
 80023b6:	0018      	movs	r0, r3
 80023b8:	f7ff fd84 	bl	8001ec4 <LL_ADC_GetSamplingTimeCommonChannels>
 80023bc:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d10b      	bne.n	80023de <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d0:	2203      	movs	r2, #3
 80023d2:	4393      	bics	r3, r2
 80023d4:	2201      	movs	r2, #1
 80023d6:	431a      	orrs	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80023dc:	e01c      	b.n	8002418 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e2:	2212      	movs	r2, #18
 80023e4:	4393      	bics	r3, r2
 80023e6:	2210      	movs	r2, #16
 80023e8:	431a      	orrs	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023f2:	2201      	movs	r2, #1
 80023f4:	431a      	orrs	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80023fa:	231f      	movs	r3, #31
 80023fc:	18fb      	adds	r3, r7, r3
 80023fe:	2201      	movs	r2, #1
 8002400:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002402:	e009      	b.n	8002418 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002408:	2210      	movs	r2, #16
 800240a:	431a      	orrs	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002410:	231f      	movs	r3, #31
 8002412:	18fb      	adds	r3, r7, r3
 8002414:	2201      	movs	r2, #1
 8002416:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002418:	231f      	movs	r3, #31
 800241a:	18fb      	adds	r3, r7, r3
 800241c:	781b      	ldrb	r3, [r3, #0]
}
 800241e:	0018      	movs	r0, r3
 8002420:	46bd      	mov	sp, r7
 8002422:	b008      	add	sp, #32
 8002424:	bd80      	pop	{r7, pc}
 8002426:	46c0      	nop			@ (mov r8, r8)
 8002428:	20000404 	.word	0x20000404
 800242c:	00030d40 	.word	0x00030d40
 8002430:	fffffefd 	.word	0xfffffefd
 8002434:	ffde0201 	.word	0xffde0201
 8002438:	1ffffc02 	.word	0x1ffffc02
 800243c:	40012708 	.word	0x40012708
 8002440:	ffc3ffff 	.word	0xffc3ffff
 8002444:	07ffff04 	.word	0x07ffff04

08002448 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002448:	b5b0      	push	{r4, r5, r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	0018      	movs	r0, r3
 800245a:	f7ff fe3b 	bl	80020d4 <LL_ADC_REG_IsConversionOngoing>
 800245e:	1e03      	subs	r3, r0, #0
 8002460:	d16c      	bne.n	800253c <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2254      	movs	r2, #84	@ 0x54
 8002466:	5c9b      	ldrb	r3, [r3, r2]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d101      	bne.n	8002470 <HAL_ADC_Start_DMA+0x28>
 800246c:	2302      	movs	r3, #2
 800246e:	e06c      	b.n	800254a <HAL_ADC_Start_DMA+0x102>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2254      	movs	r2, #84	@ 0x54
 8002474:	2101      	movs	r1, #1
 8002476:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	2201      	movs	r2, #1
 8002480:	4013      	ands	r3, r2
 8002482:	d113      	bne.n	80024ac <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	0018      	movs	r0, r3
 800248a:	f7ff fdef 	bl	800206c <LL_ADC_IsEnabled>
 800248e:	1e03      	subs	r3, r0, #0
 8002490:	d004      	beq.n	800249c <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	0018      	movs	r0, r3
 8002498:	f7ff fdd6 	bl	8002048 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68da      	ldr	r2, [r3, #12]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2101      	movs	r1, #1
 80024a8:	430a      	orrs	r2, r1
 80024aa:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80024ac:	2517      	movs	r5, #23
 80024ae:	197c      	adds	r4, r7, r5
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	0018      	movs	r0, r3
 80024b4:	f000 fa3e 	bl	8002934 <ADC_Enable>
 80024b8:	0003      	movs	r3, r0
 80024ba:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80024bc:	002c      	movs	r4, r5
 80024be:	193b      	adds	r3, r7, r4
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d13e      	bne.n	8002544 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ca:	4a22      	ldr	r2, [pc, #136]	@ (8002554 <HAL_ADC_Start_DMA+0x10c>)
 80024cc:	4013      	ands	r3, r2
 80024ce:	2280      	movs	r2, #128	@ 0x80
 80024d0:	0052      	lsls	r2, r2, #1
 80024d2:	431a      	orrs	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024e2:	4a1d      	ldr	r2, [pc, #116]	@ (8002558 <HAL_ADC_Start_DMA+0x110>)
 80024e4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024ea:	4a1c      	ldr	r2, [pc, #112]	@ (800255c <HAL_ADC_Start_DMA+0x114>)
 80024ec:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024f2:	4a1b      	ldr	r2, [pc, #108]	@ (8002560 <HAL_ADC_Start_DMA+0x118>)
 80024f4:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	221c      	movs	r2, #28
 80024fc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2254      	movs	r2, #84	@ 0x54
 8002502:	2100      	movs	r1, #0
 8002504:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2110      	movs	r1, #16
 8002512:	430a      	orrs	r2, r1
 8002514:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	3340      	adds	r3, #64	@ 0x40
 8002520:	0019      	movs	r1, r3
 8002522:	68ba      	ldr	r2, [r7, #8]
 8002524:	193c      	adds	r4, r7, r4
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f000 fe72 	bl	8003210 <HAL_DMA_Start_IT>
 800252c:	0003      	movs	r3, r0
 800252e:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	0018      	movs	r0, r3
 8002536:	f7ff fdbb 	bl	80020b0 <LL_ADC_REG_StartConversion>
 800253a:	e003      	b.n	8002544 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800253c:	2317      	movs	r3, #23
 800253e:	18fb      	adds	r3, r7, r3
 8002540:	2202      	movs	r2, #2
 8002542:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002544:	2317      	movs	r3, #23
 8002546:	18fb      	adds	r3, r7, r3
 8002548:	781b      	ldrb	r3, [r3, #0]
}
 800254a:	0018      	movs	r0, r3
 800254c:	46bd      	mov	sp, r7
 800254e:	b006      	add	sp, #24
 8002550:	bdb0      	pop	{r4, r5, r7, pc}
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	fffff0fe 	.word	0xfffff0fe
 8002558:	08002afd 	.word	0x08002afd
 800255c:	08002bc5 	.word	0x08002bc5
 8002560:	08002be3 	.word	0x08002be3

08002564 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800256c:	46c0      	nop			@ (mov r8, r8)
 800256e:	46bd      	mov	sp, r7
 8002570:	b002      	add	sp, #8
 8002572:	bd80      	pop	{r7, pc}

08002574 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800257c:	46c0      	nop			@ (mov r8, r8)
 800257e:	46bd      	mov	sp, r7
 8002580:	b002      	add	sp, #8
 8002582:	bd80      	pop	{r7, pc}

08002584 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800258e:	2317      	movs	r3, #23
 8002590:	18fb      	adds	r3, r7, r3
 8002592:	2200      	movs	r2, #0
 8002594:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002596:	2300      	movs	r3, #0
 8002598:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2254      	movs	r2, #84	@ 0x54
 800259e:	5c9b      	ldrb	r3, [r3, r2]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d101      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x24>
 80025a4:	2302      	movs	r3, #2
 80025a6:	e1c0      	b.n	800292a <HAL_ADC_ConfigChannel+0x3a6>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2254      	movs	r2, #84	@ 0x54
 80025ac:	2101      	movs	r1, #1
 80025ae:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	0018      	movs	r0, r3
 80025b6:	f7ff fd8d 	bl	80020d4 <LL_ADC_REG_IsConversionOngoing>
 80025ba:	1e03      	subs	r3, r0, #0
 80025bc:	d000      	beq.n	80025c0 <HAL_ADC_ConfigChannel+0x3c>
 80025be:	e1a3      	b.n	8002908 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d100      	bne.n	80025ca <HAL_ADC_ConfigChannel+0x46>
 80025c8:	e143      	b.n	8002852 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	691a      	ldr	r2, [r3, #16]
 80025ce:	2380      	movs	r3, #128	@ 0x80
 80025d0:	061b      	lsls	r3, r3, #24
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d004      	beq.n	80025e0 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80025da:	4ac1      	ldr	r2, [pc, #772]	@ (80028e0 <HAL_ADC_ConfigChannel+0x35c>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d108      	bne.n	80025f2 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	0019      	movs	r1, r3
 80025ea:	0010      	movs	r0, r2
 80025ec:	f7ff fcb2 	bl	8001f54 <LL_ADC_REG_SetSequencerChAdd>
 80025f0:	e0c9      	b.n	8002786 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	211f      	movs	r1, #31
 80025fc:	400b      	ands	r3, r1
 80025fe:	210f      	movs	r1, #15
 8002600:	4099      	lsls	r1, r3
 8002602:	000b      	movs	r3, r1
 8002604:	43db      	mvns	r3, r3
 8002606:	4013      	ands	r3, r2
 8002608:	0019      	movs	r1, r3
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	035b      	lsls	r3, r3, #13
 8002610:	0b5b      	lsrs	r3, r3, #13
 8002612:	d105      	bne.n	8002620 <HAL_ADC_ConfigChannel+0x9c>
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	0e9b      	lsrs	r3, r3, #26
 800261a:	221f      	movs	r2, #31
 800261c:	4013      	ands	r3, r2
 800261e:	e098      	b.n	8002752 <HAL_ADC_ConfigChannel+0x1ce>
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2201      	movs	r2, #1
 8002626:	4013      	ands	r3, r2
 8002628:	d000      	beq.n	800262c <HAL_ADC_ConfigChannel+0xa8>
 800262a:	e091      	b.n	8002750 <HAL_ADC_ConfigChannel+0x1cc>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2202      	movs	r2, #2
 8002632:	4013      	ands	r3, r2
 8002634:	d000      	beq.n	8002638 <HAL_ADC_ConfigChannel+0xb4>
 8002636:	e089      	b.n	800274c <HAL_ADC_ConfigChannel+0x1c8>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2204      	movs	r2, #4
 800263e:	4013      	ands	r3, r2
 8002640:	d000      	beq.n	8002644 <HAL_ADC_ConfigChannel+0xc0>
 8002642:	e081      	b.n	8002748 <HAL_ADC_ConfigChannel+0x1c4>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2208      	movs	r2, #8
 800264a:	4013      	ands	r3, r2
 800264c:	d000      	beq.n	8002650 <HAL_ADC_ConfigChannel+0xcc>
 800264e:	e079      	b.n	8002744 <HAL_ADC_ConfigChannel+0x1c0>
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2210      	movs	r2, #16
 8002656:	4013      	ands	r3, r2
 8002658:	d000      	beq.n	800265c <HAL_ADC_ConfigChannel+0xd8>
 800265a:	e071      	b.n	8002740 <HAL_ADC_ConfigChannel+0x1bc>
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2220      	movs	r2, #32
 8002662:	4013      	ands	r3, r2
 8002664:	d000      	beq.n	8002668 <HAL_ADC_ConfigChannel+0xe4>
 8002666:	e069      	b.n	800273c <HAL_ADC_ConfigChannel+0x1b8>
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2240      	movs	r2, #64	@ 0x40
 800266e:	4013      	ands	r3, r2
 8002670:	d000      	beq.n	8002674 <HAL_ADC_ConfigChannel+0xf0>
 8002672:	e061      	b.n	8002738 <HAL_ADC_ConfigChannel+0x1b4>
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2280      	movs	r2, #128	@ 0x80
 800267a:	4013      	ands	r3, r2
 800267c:	d000      	beq.n	8002680 <HAL_ADC_ConfigChannel+0xfc>
 800267e:	e059      	b.n	8002734 <HAL_ADC_ConfigChannel+0x1b0>
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	2380      	movs	r3, #128	@ 0x80
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	4013      	ands	r3, r2
 800268a:	d151      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x1ac>
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	2380      	movs	r3, #128	@ 0x80
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4013      	ands	r3, r2
 8002696:	d149      	bne.n	800272c <HAL_ADC_ConfigChannel+0x1a8>
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	2380      	movs	r3, #128	@ 0x80
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	4013      	ands	r3, r2
 80026a2:	d141      	bne.n	8002728 <HAL_ADC_ConfigChannel+0x1a4>
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	2380      	movs	r3, #128	@ 0x80
 80026aa:	011b      	lsls	r3, r3, #4
 80026ac:	4013      	ands	r3, r2
 80026ae:	d139      	bne.n	8002724 <HAL_ADC_ConfigChannel+0x1a0>
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	2380      	movs	r3, #128	@ 0x80
 80026b6:	015b      	lsls	r3, r3, #5
 80026b8:	4013      	ands	r3, r2
 80026ba:	d131      	bne.n	8002720 <HAL_ADC_ConfigChannel+0x19c>
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	2380      	movs	r3, #128	@ 0x80
 80026c2:	019b      	lsls	r3, r3, #6
 80026c4:	4013      	ands	r3, r2
 80026c6:	d129      	bne.n	800271c <HAL_ADC_ConfigChannel+0x198>
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	2380      	movs	r3, #128	@ 0x80
 80026ce:	01db      	lsls	r3, r3, #7
 80026d0:	4013      	ands	r3, r2
 80026d2:	d121      	bne.n	8002718 <HAL_ADC_ConfigChannel+0x194>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	2380      	movs	r3, #128	@ 0x80
 80026da:	021b      	lsls	r3, r3, #8
 80026dc:	4013      	ands	r3, r2
 80026de:	d119      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x190>
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	2380      	movs	r3, #128	@ 0x80
 80026e6:	025b      	lsls	r3, r3, #9
 80026e8:	4013      	ands	r3, r2
 80026ea:	d111      	bne.n	8002710 <HAL_ADC_ConfigChannel+0x18c>
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	2380      	movs	r3, #128	@ 0x80
 80026f2:	029b      	lsls	r3, r3, #10
 80026f4:	4013      	ands	r3, r2
 80026f6:	d109      	bne.n	800270c <HAL_ADC_ConfigChannel+0x188>
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	2380      	movs	r3, #128	@ 0x80
 80026fe:	02db      	lsls	r3, r3, #11
 8002700:	4013      	ands	r3, r2
 8002702:	d001      	beq.n	8002708 <HAL_ADC_ConfigChannel+0x184>
 8002704:	2312      	movs	r3, #18
 8002706:	e024      	b.n	8002752 <HAL_ADC_ConfigChannel+0x1ce>
 8002708:	2300      	movs	r3, #0
 800270a:	e022      	b.n	8002752 <HAL_ADC_ConfigChannel+0x1ce>
 800270c:	2311      	movs	r3, #17
 800270e:	e020      	b.n	8002752 <HAL_ADC_ConfigChannel+0x1ce>
 8002710:	2310      	movs	r3, #16
 8002712:	e01e      	b.n	8002752 <HAL_ADC_ConfigChannel+0x1ce>
 8002714:	230f      	movs	r3, #15
 8002716:	e01c      	b.n	8002752 <HAL_ADC_ConfigChannel+0x1ce>
 8002718:	230e      	movs	r3, #14
 800271a:	e01a      	b.n	8002752 <HAL_ADC_ConfigChannel+0x1ce>
 800271c:	230d      	movs	r3, #13
 800271e:	e018      	b.n	8002752 <HAL_ADC_ConfigChannel+0x1ce>
 8002720:	230c      	movs	r3, #12
 8002722:	e016      	b.n	8002752 <HAL_ADC_ConfigChannel+0x1ce>
 8002724:	230b      	movs	r3, #11
 8002726:	e014      	b.n	8002752 <HAL_ADC_ConfigChannel+0x1ce>
 8002728:	230a      	movs	r3, #10
 800272a:	e012      	b.n	8002752 <HAL_ADC_ConfigChannel+0x1ce>
 800272c:	2309      	movs	r3, #9
 800272e:	e010      	b.n	8002752 <HAL_ADC_ConfigChannel+0x1ce>
 8002730:	2308      	movs	r3, #8
 8002732:	e00e      	b.n	8002752 <HAL_ADC_ConfigChannel+0x1ce>
 8002734:	2307      	movs	r3, #7
 8002736:	e00c      	b.n	8002752 <HAL_ADC_ConfigChannel+0x1ce>
 8002738:	2306      	movs	r3, #6
 800273a:	e00a      	b.n	8002752 <HAL_ADC_ConfigChannel+0x1ce>
 800273c:	2305      	movs	r3, #5
 800273e:	e008      	b.n	8002752 <HAL_ADC_ConfigChannel+0x1ce>
 8002740:	2304      	movs	r3, #4
 8002742:	e006      	b.n	8002752 <HAL_ADC_ConfigChannel+0x1ce>
 8002744:	2303      	movs	r3, #3
 8002746:	e004      	b.n	8002752 <HAL_ADC_ConfigChannel+0x1ce>
 8002748:	2302      	movs	r3, #2
 800274a:	e002      	b.n	8002752 <HAL_ADC_ConfigChannel+0x1ce>
 800274c:	2301      	movs	r3, #1
 800274e:	e000      	b.n	8002752 <HAL_ADC_ConfigChannel+0x1ce>
 8002750:	2300      	movs	r3, #0
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	6852      	ldr	r2, [r2, #4]
 8002756:	201f      	movs	r0, #31
 8002758:	4002      	ands	r2, r0
 800275a:	4093      	lsls	r3, r2
 800275c:	000a      	movs	r2, r1
 800275e:	431a      	orrs	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	089b      	lsrs	r3, r3, #2
 800276a:	1c5a      	adds	r2, r3, #1
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	69db      	ldr	r3, [r3, #28]
 8002770:	429a      	cmp	r2, r3
 8002772:	d808      	bhi.n	8002786 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6818      	ldr	r0, [r3, #0]
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	6859      	ldr	r1, [r3, #4]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	001a      	movs	r2, r3
 8002782:	f7ff fbc7 	bl	8001f14 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6818      	ldr	r0, [r3, #0]
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	6819      	ldr	r1, [r3, #0]
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	001a      	movs	r2, r3
 8002794:	f7ff fc02 	bl	8001f9c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	db00      	blt.n	80027a2 <HAL_ADC_ConfigChannel+0x21e>
 80027a0:	e0bc      	b.n	800291c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027a2:	4b50      	ldr	r3, [pc, #320]	@ (80028e4 <HAL_ADC_ConfigChannel+0x360>)
 80027a4:	0018      	movs	r0, r3
 80027a6:	f7ff fb63 	bl	8001e70 <LL_ADC_GetCommonPathInternalCh>
 80027aa:	0003      	movs	r3, r0
 80027ac:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a4d      	ldr	r2, [pc, #308]	@ (80028e8 <HAL_ADC_ConfigChannel+0x364>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d122      	bne.n	80027fe <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	2380      	movs	r3, #128	@ 0x80
 80027bc:	041b      	lsls	r3, r3, #16
 80027be:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80027c0:	d11d      	bne.n	80027fe <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	2280      	movs	r2, #128	@ 0x80
 80027c6:	0412      	lsls	r2, r2, #16
 80027c8:	4313      	orrs	r3, r2
 80027ca:	4a46      	ldr	r2, [pc, #280]	@ (80028e4 <HAL_ADC_ConfigChannel+0x360>)
 80027cc:	0019      	movs	r1, r3
 80027ce:	0010      	movs	r0, r2
 80027d0:	f7ff fb3a 	bl	8001e48 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027d4:	4b45      	ldr	r3, [pc, #276]	@ (80028ec <HAL_ADC_ConfigChannel+0x368>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4945      	ldr	r1, [pc, #276]	@ (80028f0 <HAL_ADC_ConfigChannel+0x36c>)
 80027da:	0018      	movs	r0, r3
 80027dc:	f7fd fc9c 	bl	8000118 <__udivsi3>
 80027e0:	0003      	movs	r3, r0
 80027e2:	1c5a      	adds	r2, r3, #1
 80027e4:	0013      	movs	r3, r2
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	189b      	adds	r3, r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80027ee:	e002      	b.n	80027f6 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	3b01      	subs	r3, #1
 80027f4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1f9      	bne.n	80027f0 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80027fc:	e08e      	b.n	800291c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a3c      	ldr	r2, [pc, #240]	@ (80028f4 <HAL_ADC_ConfigChannel+0x370>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d10e      	bne.n	8002826 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	2380      	movs	r3, #128	@ 0x80
 800280c:	045b      	lsls	r3, r3, #17
 800280e:	4013      	ands	r3, r2
 8002810:	d109      	bne.n	8002826 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	2280      	movs	r2, #128	@ 0x80
 8002816:	0452      	lsls	r2, r2, #17
 8002818:	4313      	orrs	r3, r2
 800281a:	4a32      	ldr	r2, [pc, #200]	@ (80028e4 <HAL_ADC_ConfigChannel+0x360>)
 800281c:	0019      	movs	r1, r3
 800281e:	0010      	movs	r0, r2
 8002820:	f7ff fb12 	bl	8001e48 <LL_ADC_SetCommonPathInternalCh>
 8002824:	e07a      	b.n	800291c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a33      	ldr	r2, [pc, #204]	@ (80028f8 <HAL_ADC_ConfigChannel+0x374>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d000      	beq.n	8002832 <HAL_ADC_ConfigChannel+0x2ae>
 8002830:	e074      	b.n	800291c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	2380      	movs	r3, #128	@ 0x80
 8002836:	03db      	lsls	r3, r3, #15
 8002838:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800283a:	d000      	beq.n	800283e <HAL_ADC_ConfigChannel+0x2ba>
 800283c:	e06e      	b.n	800291c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	2280      	movs	r2, #128	@ 0x80
 8002842:	03d2      	lsls	r2, r2, #15
 8002844:	4313      	orrs	r3, r2
 8002846:	4a27      	ldr	r2, [pc, #156]	@ (80028e4 <HAL_ADC_ConfigChannel+0x360>)
 8002848:	0019      	movs	r1, r3
 800284a:	0010      	movs	r0, r2
 800284c:	f7ff fafc 	bl	8001e48 <LL_ADC_SetCommonPathInternalCh>
 8002850:	e064      	b.n	800291c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	691a      	ldr	r2, [r3, #16]
 8002856:	2380      	movs	r3, #128	@ 0x80
 8002858:	061b      	lsls	r3, r3, #24
 800285a:	429a      	cmp	r2, r3
 800285c:	d004      	beq.n	8002868 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002862:	4a1f      	ldr	r2, [pc, #124]	@ (80028e0 <HAL_ADC_ConfigChannel+0x35c>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d107      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	0019      	movs	r1, r3
 8002872:	0010      	movs	r0, r2
 8002874:	f7ff fb7f 	bl	8001f76 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	da4d      	bge.n	800291c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002880:	4b18      	ldr	r3, [pc, #96]	@ (80028e4 <HAL_ADC_ConfigChannel+0x360>)
 8002882:	0018      	movs	r0, r3
 8002884:	f7ff faf4 	bl	8001e70 <LL_ADC_GetCommonPathInternalCh>
 8002888:	0003      	movs	r3, r0
 800288a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a15      	ldr	r2, [pc, #84]	@ (80028e8 <HAL_ADC_ConfigChannel+0x364>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d108      	bne.n	80028a8 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	4a18      	ldr	r2, [pc, #96]	@ (80028fc <HAL_ADC_ConfigChannel+0x378>)
 800289a:	4013      	ands	r3, r2
 800289c:	4a11      	ldr	r2, [pc, #68]	@ (80028e4 <HAL_ADC_ConfigChannel+0x360>)
 800289e:	0019      	movs	r1, r3
 80028a0:	0010      	movs	r0, r2
 80028a2:	f7ff fad1 	bl	8001e48 <LL_ADC_SetCommonPathInternalCh>
 80028a6:	e039      	b.n	800291c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a11      	ldr	r2, [pc, #68]	@ (80028f4 <HAL_ADC_ConfigChannel+0x370>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d108      	bne.n	80028c4 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	4a12      	ldr	r2, [pc, #72]	@ (8002900 <HAL_ADC_ConfigChannel+0x37c>)
 80028b6:	4013      	ands	r3, r2
 80028b8:	4a0a      	ldr	r2, [pc, #40]	@ (80028e4 <HAL_ADC_ConfigChannel+0x360>)
 80028ba:	0019      	movs	r1, r3
 80028bc:	0010      	movs	r0, r2
 80028be:	f7ff fac3 	bl	8001e48 <LL_ADC_SetCommonPathInternalCh>
 80028c2:	e02b      	b.n	800291c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a0b      	ldr	r2, [pc, #44]	@ (80028f8 <HAL_ADC_ConfigChannel+0x374>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d126      	bne.n	800291c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	4a0c      	ldr	r2, [pc, #48]	@ (8002904 <HAL_ADC_ConfigChannel+0x380>)
 80028d2:	4013      	ands	r3, r2
 80028d4:	4a03      	ldr	r2, [pc, #12]	@ (80028e4 <HAL_ADC_ConfigChannel+0x360>)
 80028d6:	0019      	movs	r1, r3
 80028d8:	0010      	movs	r0, r2
 80028da:	f7ff fab5 	bl	8001e48 <LL_ADC_SetCommonPathInternalCh>
 80028de:	e01d      	b.n	800291c <HAL_ADC_ConfigChannel+0x398>
 80028e0:	80000004 	.word	0x80000004
 80028e4:	40012708 	.word	0x40012708
 80028e8:	b0001000 	.word	0xb0001000
 80028ec:	20000404 	.word	0x20000404
 80028f0:	00030d40 	.word	0x00030d40
 80028f4:	b8004000 	.word	0xb8004000
 80028f8:	b4002000 	.word	0xb4002000
 80028fc:	ff7fffff 	.word	0xff7fffff
 8002900:	feffffff 	.word	0xfeffffff
 8002904:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800290c:	2220      	movs	r2, #32
 800290e:	431a      	orrs	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002914:	2317      	movs	r3, #23
 8002916:	18fb      	adds	r3, r7, r3
 8002918:	2201      	movs	r2, #1
 800291a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2254      	movs	r2, #84	@ 0x54
 8002920:	2100      	movs	r1, #0
 8002922:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002924:	2317      	movs	r3, #23
 8002926:	18fb      	adds	r3, r7, r3
 8002928:	781b      	ldrb	r3, [r3, #0]
}
 800292a:	0018      	movs	r0, r3
 800292c:	46bd      	mov	sp, r7
 800292e:	b006      	add	sp, #24
 8002930:	bd80      	pop	{r7, pc}
 8002932:	46c0      	nop			@ (mov r8, r8)

08002934 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800293c:	2300      	movs	r3, #0
 800293e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	0018      	movs	r0, r3
 8002946:	f7ff fb91 	bl	800206c <LL_ADC_IsEnabled>
 800294a:	1e03      	subs	r3, r0, #0
 800294c:	d000      	beq.n	8002950 <ADC_Enable+0x1c>
 800294e:	e069      	b.n	8002a24 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	4a36      	ldr	r2, [pc, #216]	@ (8002a30 <ADC_Enable+0xfc>)
 8002958:	4013      	ands	r3, r2
 800295a:	d00d      	beq.n	8002978 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002960:	2210      	movs	r2, #16
 8002962:	431a      	orrs	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800296c:	2201      	movs	r2, #1
 800296e:	431a      	orrs	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e056      	b.n	8002a26 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	0018      	movs	r0, r3
 800297e:	f7ff fb51 	bl	8002024 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8002982:	4b2c      	ldr	r3, [pc, #176]	@ (8002a34 <ADC_Enable+0x100>)
 8002984:	0018      	movs	r0, r3
 8002986:	f7ff fa73 	bl	8001e70 <LL_ADC_GetCommonPathInternalCh>
 800298a:	0002      	movs	r2, r0
 800298c:	2380      	movs	r3, #128	@ 0x80
 800298e:	041b      	lsls	r3, r3, #16
 8002990:	4013      	ands	r3, r2
 8002992:	d00f      	beq.n	80029b4 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002994:	4b28      	ldr	r3, [pc, #160]	@ (8002a38 <ADC_Enable+0x104>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4928      	ldr	r1, [pc, #160]	@ (8002a3c <ADC_Enable+0x108>)
 800299a:	0018      	movs	r0, r3
 800299c:	f7fd fbbc 	bl	8000118 <__udivsi3>
 80029a0:	0003      	movs	r3, r0
 80029a2:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 80029a4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80029a6:	e002      	b.n	80029ae <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	3b01      	subs	r3, #1
 80029ac:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1f9      	bne.n	80029a8 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	7e5b      	ldrb	r3, [r3, #25]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d033      	beq.n	8002a24 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80029bc:	f7ff fa3a 	bl	8001e34 <HAL_GetTick>
 80029c0:	0003      	movs	r3, r0
 80029c2:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029c4:	e027      	b.n	8002a16 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	0018      	movs	r0, r3
 80029cc:	f7ff fb4e 	bl	800206c <LL_ADC_IsEnabled>
 80029d0:	1e03      	subs	r3, r0, #0
 80029d2:	d104      	bne.n	80029de <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	0018      	movs	r0, r3
 80029da:	f7ff fb23 	bl	8002024 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80029de:	f7ff fa29 	bl	8001e34 <HAL_GetTick>
 80029e2:	0002      	movs	r2, r0
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d914      	bls.n	8002a16 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2201      	movs	r2, #1
 80029f4:	4013      	ands	r3, r2
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d00d      	beq.n	8002a16 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029fe:	2210      	movs	r2, #16
 8002a00:	431a      	orrs	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	431a      	orrs	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e007      	b.n	8002a26 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	4013      	ands	r3, r2
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d1d0      	bne.n	80029c6 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	0018      	movs	r0, r3
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	b004      	add	sp, #16
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	46c0      	nop			@ (mov r8, r8)
 8002a30:	80000017 	.word	0x80000017
 8002a34:	40012708 	.word	0x40012708
 8002a38:	20000404 	.word	0x20000404
 8002a3c:	00030d40 	.word	0x00030d40

08002a40 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	f7ff fb1e 	bl	800208e <LL_ADC_IsDisableOngoing>
 8002a52:	0003      	movs	r3, r0
 8002a54:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	f7ff fb06 	bl	800206c <LL_ADC_IsEnabled>
 8002a60:	1e03      	subs	r3, r0, #0
 8002a62:	d046      	beq.n	8002af2 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d143      	bne.n	8002af2 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	2205      	movs	r2, #5
 8002a72:	4013      	ands	r3, r2
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d10d      	bne.n	8002a94 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	f7ff fae3 	bl	8002048 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2203      	movs	r2, #3
 8002a88:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a8a:	f7ff f9d3 	bl	8001e34 <HAL_GetTick>
 8002a8e:	0003      	movs	r3, r0
 8002a90:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a92:	e028      	b.n	8002ae6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a98:	2210      	movs	r2, #16
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e021      	b.n	8002af4 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002ab0:	f7ff f9c0 	bl	8001e34 <HAL_GetTick>
 8002ab4:	0002      	movs	r2, r0
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d913      	bls.n	8002ae6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	d00d      	beq.n	8002ae6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ace:	2210      	movs	r2, #16
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ada:	2201      	movs	r2, #1
 8002adc:	431a      	orrs	r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e006      	b.n	8002af4 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	2201      	movs	r2, #1
 8002aee:	4013      	ands	r3, r2
 8002af0:	d1de      	bne.n	8002ab0 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	0018      	movs	r0, r3
 8002af6:	46bd      	mov	sp, r7
 8002af8:	b004      	add	sp, #16
 8002afa:	bd80      	pop	{r7, pc}

08002afc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b08:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b0e:	2250      	movs	r2, #80	@ 0x50
 8002b10:	4013      	ands	r3, r2
 8002b12:	d141      	bne.n	8002b98 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b18:	2280      	movs	r2, #128	@ 0x80
 8002b1a:	0092      	lsls	r2, r2, #2
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	0018      	movs	r0, r3
 8002b28:	f7ff f9e3 	bl	8001ef2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b2c:	1e03      	subs	r3, r0, #0
 8002b2e:	d02e      	beq.n	8002b8e <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	7e9b      	ldrb	r3, [r3, #26]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d12a      	bne.n	8002b8e <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2208      	movs	r2, #8
 8002b40:	4013      	ands	r3, r2
 8002b42:	2b08      	cmp	r3, #8
 8002b44:	d123      	bne.n	8002b8e <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	f7ff fac2 	bl	80020d4 <LL_ADC_REG_IsConversionOngoing>
 8002b50:	1e03      	subs	r3, r0, #0
 8002b52:	d110      	bne.n	8002b76 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	685a      	ldr	r2, [r3, #4]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	210c      	movs	r1, #12
 8002b60:	438a      	bics	r2, r1
 8002b62:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b68:	4a15      	ldr	r2, [pc, #84]	@ (8002bc0 <ADC_DMAConvCplt+0xc4>)
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	659a      	str	r2, [r3, #88]	@ 0x58
 8002b74:	e00b      	b.n	8002b8e <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	431a      	orrs	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b86:	2201      	movs	r2, #1
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	0018      	movs	r0, r3
 8002b92:	f7fe fe45 	bl	8001820 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002b96:	e00f      	b.n	8002bb8 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b9c:	2210      	movs	r2, #16
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	d004      	beq.n	8002bac <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	f7ff fce5 	bl	8002574 <HAL_ADC_ErrorCallback>
}
 8002baa:	e005      	b.n	8002bb8 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	0010      	movs	r0, r2
 8002bb6:	4798      	blx	r3
}
 8002bb8:	46c0      	nop			@ (mov r8, r8)
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	b004      	add	sp, #16
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	fffffefe 	.word	0xfffffefe

08002bc4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	0018      	movs	r0, r3
 8002bd6:	f7ff fcc5 	bl	8002564 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bda:	46c0      	nop			@ (mov r8, r8)
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	b004      	add	sp, #16
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b084      	sub	sp, #16
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bee:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bf4:	2240      	movs	r2, #64	@ 0x40
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c00:	2204      	movs	r2, #4
 8002c02:	431a      	orrs	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	0018      	movs	r0, r3
 8002c0c:	f7ff fcb2 	bl	8002574 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c10:	46c0      	nop			@ (mov r8, r8)
 8002c12:	46bd      	mov	sp, r7
 8002c14:	b004      	add	sp, #16
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <LL_ADC_GetCommonClock>:
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	23f0      	movs	r3, #240	@ 0xf0
 8002c26:	039b      	lsls	r3, r3, #14
 8002c28:	4013      	ands	r3, r2
}
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	b002      	add	sp, #8
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <LL_ADC_GetClock>:
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b082      	sub	sp, #8
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	0f9b      	lsrs	r3, r3, #30
 8002c40:	079b      	lsls	r3, r3, #30
}
 8002c42:	0018      	movs	r0, r3
 8002c44:	46bd      	mov	sp, r7
 8002c46:	b002      	add	sp, #8
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <LL_ADC_SetCalibrationFactor>:
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b082      	sub	sp, #8
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
 8002c52:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	22b4      	movs	r2, #180	@ 0xb4
 8002c58:	589b      	ldr	r3, [r3, r2]
 8002c5a:	227f      	movs	r2, #127	@ 0x7f
 8002c5c:	4393      	bics	r3, r2
 8002c5e:	001a      	movs	r2, r3
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	21b4      	movs	r1, #180	@ 0xb4
 8002c68:	505a      	str	r2, [r3, r1]
}
 8002c6a:	46c0      	nop			@ (mov r8, r8)
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	b002      	add	sp, #8
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <LL_ADC_GetCalibrationFactor>:
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b082      	sub	sp, #8
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	22b4      	movs	r2, #180	@ 0xb4
 8002c7e:	589b      	ldr	r3, [r3, r2]
 8002c80:	227f      	movs	r2, #127	@ 0x7f
 8002c82:	4013      	ands	r3, r2
}
 8002c84:	0018      	movs	r0, r3
 8002c86:	46bd      	mov	sp, r7
 8002c88:	b002      	add	sp, #8
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <LL_ADC_Enable>:
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	4a04      	ldr	r2, [pc, #16]	@ (8002cac <LL_ADC_Enable+0x20>)
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	609a      	str	r2, [r3, #8]
}
 8002ca4:	46c0      	nop			@ (mov r8, r8)
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	b002      	add	sp, #8
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	7fffffe8 	.word	0x7fffffe8

08002cb0 <LL_ADC_Disable>:
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	4a04      	ldr	r2, [pc, #16]	@ (8002cd0 <LL_ADC_Disable+0x20>)
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	609a      	str	r2, [r3, #8]
}
 8002cc8:	46c0      	nop			@ (mov r8, r8)
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	b002      	add	sp, #8
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	7fffffe8 	.word	0x7fffffe8

08002cd4 <LL_ADC_IsEnabled>:
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d101      	bne.n	8002cec <LL_ADC_IsEnabled+0x18>
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e000      	b.n	8002cee <LL_ADC_IsEnabled+0x1a>
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	0018      	movs	r0, r3
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	b002      	add	sp, #8
 8002cf4:	bd80      	pop	{r7, pc}
	...

08002cf8 <LL_ADC_StartCalibration>:
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	4a05      	ldr	r2, [pc, #20]	@ (8002d1c <LL_ADC_StartCalibration+0x24>)
 8002d06:	4013      	ands	r3, r2
 8002d08:	2280      	movs	r2, #128	@ 0x80
 8002d0a:	0612      	lsls	r2, r2, #24
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	609a      	str	r2, [r3, #8]
}
 8002d12:	46c0      	nop			@ (mov r8, r8)
 8002d14:	46bd      	mov	sp, r7
 8002d16:	b002      	add	sp, #8
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	46c0      	nop			@ (mov r8, r8)
 8002d1c:	7fffffe8 	.word	0x7fffffe8

08002d20 <LL_ADC_IsCalibrationOnGoing>:
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	0fdb      	lsrs	r3, r3, #31
 8002d2e:	07da      	lsls	r2, r3, #31
 8002d30:	2380      	movs	r3, #128	@ 0x80
 8002d32:	061b      	lsls	r3, r3, #24
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d101      	bne.n	8002d3c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e000      	b.n	8002d3e <LL_ADC_IsCalibrationOnGoing+0x1e>
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	0018      	movs	r0, r3
 8002d40:	46bd      	mov	sp, r7
 8002d42:	b002      	add	sp, #8
 8002d44:	bd80      	pop	{r7, pc}
	...

08002d48 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8002d48:	b590      	push	{r4, r7, lr}
 8002d4a:	b08b      	sub	sp, #44	@ 0x2c
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002d50:	2300      	movs	r3, #0
 8002d52:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8002d54:	2300      	movs	r3, #0
 8002d56:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2254      	movs	r2, #84	@ 0x54
 8002d5c:	5c9b      	ldrb	r3, [r3, r2]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d101      	bne.n	8002d66 <HAL_ADCEx_Calibration_Start+0x1e>
 8002d62:	2302      	movs	r3, #2
 8002d64:	e0dd      	b.n	8002f22 <HAL_ADCEx_Calibration_Start+0x1da>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2254      	movs	r2, #84	@ 0x54
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002d6e:	231f      	movs	r3, #31
 8002d70:	18fc      	adds	r4, r7, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	0018      	movs	r0, r3
 8002d76:	f7ff fe63 	bl	8002a40 <ADC_Disable>
 8002d7a:	0003      	movs	r3, r0
 8002d7c:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	0018      	movs	r0, r3
 8002d84:	f7ff ffa6 	bl	8002cd4 <LL_ADC_IsEnabled>
 8002d88:	1e03      	subs	r3, r0, #0
 8002d8a:	d000      	beq.n	8002d8e <HAL_ADCEx_Calibration_Start+0x46>
 8002d8c:	e0bc      	b.n	8002f08 <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d92:	4a66      	ldr	r2, [pc, #408]	@ (8002f2c <HAL_ADCEx_Calibration_Start+0x1e4>)
 8002d94:	4013      	ands	r3, r2
 8002d96:	2202      	movs	r2, #2
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	4a62      	ldr	r2, [pc, #392]	@ (8002f30 <HAL_ADCEx_Calibration_Start+0x1e8>)
 8002da6:	4013      	ands	r3, r2
 8002da8:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68da      	ldr	r2, [r3, #12]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	495f      	ldr	r1, [pc, #380]	@ (8002f34 <HAL_ADCEx_Calibration_Start+0x1ec>)
 8002db6:	400a      	ands	r2, r1
 8002db8:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8002dba:	2300      	movs	r3, #0
 8002dbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dbe:	e02d      	b.n	8002e1c <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	f7ff ff97 	bl	8002cf8 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002dca:	e014      	b.n	8002df6 <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	3301      	adds	r3, #1
 8002dd0:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	4a58      	ldr	r2, [pc, #352]	@ (8002f38 <HAL_ADCEx_Calibration_Start+0x1f0>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d90d      	bls.n	8002df6 <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dde:	2212      	movs	r2, #18
 8002de0:	4393      	bics	r3, r2
 8002de2:	2210      	movs	r2, #16
 8002de4:	431a      	orrs	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2254      	movs	r2, #84	@ 0x54
 8002dee:	2100      	movs	r1, #0
 8002df0:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e095      	b.n	8002f22 <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	f7ff ff90 	bl	8002d20 <LL_ADC_IsCalibrationOnGoing>
 8002e00:	1e03      	subs	r3, r0, #0
 8002e02:	d1e3      	bne.n	8002dcc <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	0018      	movs	r0, r3
 8002e0a:	f7ff ff32 	bl	8002c72 <LL_ADC_GetCalibrationFactor>
 8002e0e:	0002      	movs	r2, r0
 8002e10:	6a3b      	ldr	r3, [r7, #32]
 8002e12:	189b      	adds	r3, r3, r2
 8002e14:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8002e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e18:	3301      	adds	r3, #1
 8002e1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1e:	2b07      	cmp	r3, #7
 8002e20:	d9ce      	bls.n	8002dc0 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8002e22:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e24:	6a38      	ldr	r0, [r7, #32]
 8002e26:	f7fd f977 	bl	8000118 <__udivsi3>
 8002e2a:	0003      	movs	r3, r0
 8002e2c:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	0018      	movs	r0, r3
 8002e34:	f7ff ff2a 	bl	8002c8c <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	0018      	movs	r0, r3
 8002e3e:	f7ff fef8 	bl	8002c32 <LL_ADC_GetClock>
 8002e42:	1e03      	subs	r3, r0, #0
 8002e44:	d11b      	bne.n	8002e7e <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e46:	4b3d      	ldr	r3, [pc, #244]	@ (8002f3c <HAL_ADCEx_Calibration_Start+0x1f4>)
 8002e48:	0018      	movs	r0, r3
 8002e4a:	f7ff fee5 	bl	8002c18 <LL_ADC_GetCommonClock>
 8002e4e:	0003      	movs	r3, r0
 8002e50:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	23e0      	movs	r3, #224	@ 0xe0
 8002e56:	035b      	lsls	r3, r3, #13
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d310      	bcc.n	8002e7e <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	0c9b      	lsrs	r3, r3, #18
 8002e60:	3b03      	subs	r3, #3
 8002e62:	2201      	movs	r2, #1
 8002e64:	409a      	lsls	r2, r3
 8002e66:	0013      	movs	r3, r2
 8002e68:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	085b      	lsrs	r3, r3, #1
 8002e6e:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 8002e70:	e002      	b.n	8002e78 <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	3b01      	subs	r3, #1
 8002e76:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1f9      	bne.n	8002e72 <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	6a3a      	ldr	r2, [r7, #32]
 8002e84:	0011      	movs	r1, r2
 8002e86:	0018      	movs	r0, r3
 8002e88:	f7ff fedf 	bl	8002c4a <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	0018      	movs	r0, r3
 8002e92:	f7ff ff0d 	bl	8002cb0 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002e96:	f7fe ffcd 	bl	8001e34 <HAL_GetTick>
 8002e9a:	0003      	movs	r3, r0
 8002e9c:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002e9e:	e01b      	b.n	8002ed8 <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002ea0:	f7fe ffc8 	bl	8001e34 <HAL_GetTick>
 8002ea4:	0002      	movs	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d914      	bls.n	8002ed8 <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	f7ff ff0e 	bl	8002cd4 <LL_ADC_IsEnabled>
 8002eb8:	1e03      	subs	r3, r0, #0
 8002eba:	d00d      	beq.n	8002ed8 <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ec0:	2210      	movs	r2, #16
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ecc:	2201      	movs	r2, #1
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e024      	b.n	8002f22 <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	0018      	movs	r0, r3
 8002ede:	f7ff fef9 	bl	8002cd4 <LL_ADC_IsEnabled>
 8002ee2:	1e03      	subs	r3, r0, #0
 8002ee4:	d1dc      	bne.n	8002ea0 <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68d9      	ldr	r1, [r3, #12]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002efa:	2203      	movs	r2, #3
 8002efc:	4393      	bics	r3, r2
 8002efe:	2201      	movs	r2, #1
 8002f00:	431a      	orrs	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	659a      	str	r2, [r3, #88]	@ 0x58
 8002f06:	e005      	b.n	8002f14 <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f0c:	2210      	movs	r2, #16
 8002f0e:	431a      	orrs	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2254      	movs	r2, #84	@ 0x54
 8002f18:	2100      	movs	r1, #0
 8002f1a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002f1c:	231f      	movs	r3, #31
 8002f1e:	18fb      	adds	r3, r7, r3
 8002f20:	781b      	ldrb	r3, [r3, #0]
}
 8002f22:	0018      	movs	r0, r3
 8002f24:	46bd      	mov	sp, r7
 8002f26:	b00b      	add	sp, #44	@ 0x2c
 8002f28:	bd90      	pop	{r4, r7, pc}
 8002f2a:	46c0      	nop			@ (mov r8, r8)
 8002f2c:	fffffefd 	.word	0xfffffefd
 8002f30:	00008003 	.word	0x00008003
 8002f34:	ffff7ffc 	.word	0xffff7ffc
 8002f38:	0002f1ff 	.word	0x0002f1ff
 8002f3c:	40012708 	.word	0x40012708

08002f40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	0002      	movs	r2, r0
 8002f48:	1dfb      	adds	r3, r7, #7
 8002f4a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002f4c:	1dfb      	adds	r3, r7, #7
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	2b7f      	cmp	r3, #127	@ 0x7f
 8002f52:	d809      	bhi.n	8002f68 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f54:	1dfb      	adds	r3, r7, #7
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	001a      	movs	r2, r3
 8002f5a:	231f      	movs	r3, #31
 8002f5c:	401a      	ands	r2, r3
 8002f5e:	4b04      	ldr	r3, [pc, #16]	@ (8002f70 <__NVIC_EnableIRQ+0x30>)
 8002f60:	2101      	movs	r1, #1
 8002f62:	4091      	lsls	r1, r2
 8002f64:	000a      	movs	r2, r1
 8002f66:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002f68:	46c0      	nop			@ (mov r8, r8)
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	b002      	add	sp, #8
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	e000e100 	.word	0xe000e100

08002f74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f74:	b590      	push	{r4, r7, lr}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	0002      	movs	r2, r0
 8002f7c:	6039      	str	r1, [r7, #0]
 8002f7e:	1dfb      	adds	r3, r7, #7
 8002f80:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002f82:	1dfb      	adds	r3, r7, #7
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	2b7f      	cmp	r3, #127	@ 0x7f
 8002f88:	d828      	bhi.n	8002fdc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f8a:	4a2f      	ldr	r2, [pc, #188]	@ (8003048 <__NVIC_SetPriority+0xd4>)
 8002f8c:	1dfb      	adds	r3, r7, #7
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	b25b      	sxtb	r3, r3
 8002f92:	089b      	lsrs	r3, r3, #2
 8002f94:	33c0      	adds	r3, #192	@ 0xc0
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	589b      	ldr	r3, [r3, r2]
 8002f9a:	1dfa      	adds	r2, r7, #7
 8002f9c:	7812      	ldrb	r2, [r2, #0]
 8002f9e:	0011      	movs	r1, r2
 8002fa0:	2203      	movs	r2, #3
 8002fa2:	400a      	ands	r2, r1
 8002fa4:	00d2      	lsls	r2, r2, #3
 8002fa6:	21ff      	movs	r1, #255	@ 0xff
 8002fa8:	4091      	lsls	r1, r2
 8002faa:	000a      	movs	r2, r1
 8002fac:	43d2      	mvns	r2, r2
 8002fae:	401a      	ands	r2, r3
 8002fb0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	019b      	lsls	r3, r3, #6
 8002fb6:	22ff      	movs	r2, #255	@ 0xff
 8002fb8:	401a      	ands	r2, r3
 8002fba:	1dfb      	adds	r3, r7, #7
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	0018      	movs	r0, r3
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	4003      	ands	r3, r0
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fc8:	481f      	ldr	r0, [pc, #124]	@ (8003048 <__NVIC_SetPriority+0xd4>)
 8002fca:	1dfb      	adds	r3, r7, #7
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	b25b      	sxtb	r3, r3
 8002fd0:	089b      	lsrs	r3, r3, #2
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	33c0      	adds	r3, #192	@ 0xc0
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002fda:	e031      	b.n	8003040 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fdc:	4a1b      	ldr	r2, [pc, #108]	@ (800304c <__NVIC_SetPriority+0xd8>)
 8002fde:	1dfb      	adds	r3, r7, #7
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	0019      	movs	r1, r3
 8002fe4:	230f      	movs	r3, #15
 8002fe6:	400b      	ands	r3, r1
 8002fe8:	3b08      	subs	r3, #8
 8002fea:	089b      	lsrs	r3, r3, #2
 8002fec:	3306      	adds	r3, #6
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	18d3      	adds	r3, r2, r3
 8002ff2:	3304      	adds	r3, #4
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	1dfa      	adds	r2, r7, #7
 8002ff8:	7812      	ldrb	r2, [r2, #0]
 8002ffa:	0011      	movs	r1, r2
 8002ffc:	2203      	movs	r2, #3
 8002ffe:	400a      	ands	r2, r1
 8003000:	00d2      	lsls	r2, r2, #3
 8003002:	21ff      	movs	r1, #255	@ 0xff
 8003004:	4091      	lsls	r1, r2
 8003006:	000a      	movs	r2, r1
 8003008:	43d2      	mvns	r2, r2
 800300a:	401a      	ands	r2, r3
 800300c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	019b      	lsls	r3, r3, #6
 8003012:	22ff      	movs	r2, #255	@ 0xff
 8003014:	401a      	ands	r2, r3
 8003016:	1dfb      	adds	r3, r7, #7
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	0018      	movs	r0, r3
 800301c:	2303      	movs	r3, #3
 800301e:	4003      	ands	r3, r0
 8003020:	00db      	lsls	r3, r3, #3
 8003022:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003024:	4809      	ldr	r0, [pc, #36]	@ (800304c <__NVIC_SetPriority+0xd8>)
 8003026:	1dfb      	adds	r3, r7, #7
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	001c      	movs	r4, r3
 800302c:	230f      	movs	r3, #15
 800302e:	4023      	ands	r3, r4
 8003030:	3b08      	subs	r3, #8
 8003032:	089b      	lsrs	r3, r3, #2
 8003034:	430a      	orrs	r2, r1
 8003036:	3306      	adds	r3, #6
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	18c3      	adds	r3, r0, r3
 800303c:	3304      	adds	r3, #4
 800303e:	601a      	str	r2, [r3, #0]
}
 8003040:	46c0      	nop			@ (mov r8, r8)
 8003042:	46bd      	mov	sp, r7
 8003044:	b003      	add	sp, #12
 8003046:	bd90      	pop	{r4, r7, pc}
 8003048:	e000e100 	.word	0xe000e100
 800304c:	e000ed00 	.word	0xe000ed00

08003050 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	1e5a      	subs	r2, r3, #1
 800305c:	2380      	movs	r3, #128	@ 0x80
 800305e:	045b      	lsls	r3, r3, #17
 8003060:	429a      	cmp	r2, r3
 8003062:	d301      	bcc.n	8003068 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003064:	2301      	movs	r3, #1
 8003066:	e010      	b.n	800308a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003068:	4b0a      	ldr	r3, [pc, #40]	@ (8003094 <SysTick_Config+0x44>)
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	3a01      	subs	r2, #1
 800306e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003070:	2301      	movs	r3, #1
 8003072:	425b      	negs	r3, r3
 8003074:	2103      	movs	r1, #3
 8003076:	0018      	movs	r0, r3
 8003078:	f7ff ff7c 	bl	8002f74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800307c:	4b05      	ldr	r3, [pc, #20]	@ (8003094 <SysTick_Config+0x44>)
 800307e:	2200      	movs	r2, #0
 8003080:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003082:	4b04      	ldr	r3, [pc, #16]	@ (8003094 <SysTick_Config+0x44>)
 8003084:	2207      	movs	r2, #7
 8003086:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003088:	2300      	movs	r3, #0
}
 800308a:	0018      	movs	r0, r3
 800308c:	46bd      	mov	sp, r7
 800308e:	b002      	add	sp, #8
 8003090:	bd80      	pop	{r7, pc}
 8003092:	46c0      	nop			@ (mov r8, r8)
 8003094:	e000e010 	.word	0xe000e010

08003098 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	60b9      	str	r1, [r7, #8]
 80030a0:	607a      	str	r2, [r7, #4]
 80030a2:	210f      	movs	r1, #15
 80030a4:	187b      	adds	r3, r7, r1
 80030a6:	1c02      	adds	r2, r0, #0
 80030a8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	187b      	adds	r3, r7, r1
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	b25b      	sxtb	r3, r3
 80030b2:	0011      	movs	r1, r2
 80030b4:	0018      	movs	r0, r3
 80030b6:	f7ff ff5d 	bl	8002f74 <__NVIC_SetPriority>
}
 80030ba:	46c0      	nop			@ (mov r8, r8)
 80030bc:	46bd      	mov	sp, r7
 80030be:	b004      	add	sp, #16
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b082      	sub	sp, #8
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	0002      	movs	r2, r0
 80030ca:	1dfb      	adds	r3, r7, #7
 80030cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030ce:	1dfb      	adds	r3, r7, #7
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	b25b      	sxtb	r3, r3
 80030d4:	0018      	movs	r0, r3
 80030d6:	f7ff ff33 	bl	8002f40 <__NVIC_EnableIRQ>
}
 80030da:	46c0      	nop			@ (mov r8, r8)
 80030dc:	46bd      	mov	sp, r7
 80030de:	b002      	add	sp, #8
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b082      	sub	sp, #8
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	0018      	movs	r0, r3
 80030ee:	f7ff ffaf 	bl	8003050 <SysTick_Config>
 80030f2:	0003      	movs	r3, r0
}
 80030f4:	0018      	movs	r0, r3
 80030f6:	46bd      	mov	sp, r7
 80030f8:	b002      	add	sp, #8
 80030fa:	bd80      	pop	{r7, pc}

080030fc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e077      	b.n	80031fe <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a3d      	ldr	r2, [pc, #244]	@ (8003208 <HAL_DMA_Init+0x10c>)
 8003114:	4694      	mov	ip, r2
 8003116:	4463      	add	r3, ip
 8003118:	2114      	movs	r1, #20
 800311a:	0018      	movs	r0, r3
 800311c:	f7fc fffc 	bl	8000118 <__udivsi3>
 8003120:	0003      	movs	r3, r0
 8003122:	009a      	lsls	r2, r3, #2
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2225      	movs	r2, #37	@ 0x25
 800312c:	2102      	movs	r1, #2
 800312e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4934      	ldr	r1, [pc, #208]	@ (800320c <HAL_DMA_Init+0x110>)
 800313c:	400a      	ands	r2, r1
 800313e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6819      	ldr	r1, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689a      	ldr	r2, [r3, #8]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	431a      	orrs	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	431a      	orrs	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	431a      	orrs	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	431a      	orrs	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	69db      	ldr	r3, [r3, #28]
 8003166:	431a      	orrs	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	431a      	orrs	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	430a      	orrs	r2, r1
 8003174:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	0018      	movs	r0, r3
 800317a:	f000 f9c1 	bl	8003500 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689a      	ldr	r2, [r3, #8]
 8003182:	2380      	movs	r3, #128	@ 0x80
 8003184:	01db      	lsls	r3, r3, #7
 8003186:	429a      	cmp	r2, r3
 8003188:	d102      	bne.n	8003190 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685a      	ldr	r2, [r3, #4]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003198:	213f      	movs	r1, #63	@ 0x3f
 800319a:	400a      	ands	r2, r1
 800319c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80031a6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d011      	beq.n	80031d4 <HAL_DMA_Init+0xd8>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	2b04      	cmp	r3, #4
 80031b6:	d80d      	bhi.n	80031d4 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	0018      	movs	r0, r3
 80031bc:	f000 f9cc 	bl	8003558 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031c4:	2200      	movs	r2, #0
 80031c6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80031d0:	605a      	str	r2, [r3, #4]
 80031d2:	e008      	b.n	80031e6 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2225      	movs	r2, #37	@ 0x25
 80031f0:	2101      	movs	r1, #1
 80031f2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2224      	movs	r2, #36	@ 0x24
 80031f8:	2100      	movs	r1, #0
 80031fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	0018      	movs	r0, r3
 8003200:	46bd      	mov	sp, r7
 8003202:	b002      	add	sp, #8
 8003204:	bd80      	pop	{r7, pc}
 8003206:	46c0      	nop			@ (mov r8, r8)
 8003208:	bffdfff8 	.word	0xbffdfff8
 800320c:	ffff800f 	.word	0xffff800f

08003210 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
 800321c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800321e:	2317      	movs	r3, #23
 8003220:	18fb      	adds	r3, r7, r3
 8003222:	2200      	movs	r2, #0
 8003224:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2224      	movs	r2, #36	@ 0x24
 800322a:	5c9b      	ldrb	r3, [r3, r2]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d101      	bne.n	8003234 <HAL_DMA_Start_IT+0x24>
 8003230:	2302      	movs	r3, #2
 8003232:	e06f      	b.n	8003314 <HAL_DMA_Start_IT+0x104>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2224      	movs	r2, #36	@ 0x24
 8003238:	2101      	movs	r1, #1
 800323a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2225      	movs	r2, #37	@ 0x25
 8003240:	5c9b      	ldrb	r3, [r3, r2]
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2b01      	cmp	r3, #1
 8003246:	d157      	bne.n	80032f8 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2225      	movs	r2, #37	@ 0x25
 800324c:	2102      	movs	r1, #2
 800324e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2101      	movs	r1, #1
 8003262:	438a      	bics	r2, r1
 8003264:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	68b9      	ldr	r1, [r7, #8]
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f000 f907 	bl	8003480 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003276:	2b00      	cmp	r3, #0
 8003278:	d008      	beq.n	800328c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	210e      	movs	r1, #14
 8003286:	430a      	orrs	r2, r1
 8003288:	601a      	str	r2, [r3, #0]
 800328a:	e00f      	b.n	80032ac <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2104      	movs	r1, #4
 8003298:	438a      	bics	r2, r1
 800329a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	210a      	movs	r1, #10
 80032a8:	430a      	orrs	r2, r1
 80032aa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	2380      	movs	r3, #128	@ 0x80
 80032b4:	025b      	lsls	r3, r3, #9
 80032b6:	4013      	ands	r3, r2
 80032b8:	d008      	beq.n	80032cc <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032c4:	2180      	movs	r1, #128	@ 0x80
 80032c6:	0049      	lsls	r1, r1, #1
 80032c8:	430a      	orrs	r2, r1
 80032ca:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d008      	beq.n	80032e6 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032de:	2180      	movs	r1, #128	@ 0x80
 80032e0:	0049      	lsls	r1, r1, #1
 80032e2:	430a      	orrs	r2, r1
 80032e4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2101      	movs	r1, #1
 80032f2:	430a      	orrs	r2, r1
 80032f4:	601a      	str	r2, [r3, #0]
 80032f6:	e00a      	b.n	800330e <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2280      	movs	r2, #128	@ 0x80
 80032fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2224      	movs	r2, #36	@ 0x24
 8003302:	2100      	movs	r1, #0
 8003304:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8003306:	2317      	movs	r3, #23
 8003308:	18fb      	adds	r3, r7, r3
 800330a:	2201      	movs	r2, #1
 800330c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800330e:	2317      	movs	r3, #23
 8003310:	18fb      	adds	r3, r7, r3
 8003312:	781b      	ldrb	r3, [r3, #0]
}
 8003314:	0018      	movs	r0, r3
 8003316:	46bd      	mov	sp, r7
 8003318:	b006      	add	sp, #24
 800331a:	bd80      	pop	{r7, pc}

0800331c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8003324:	4b55      	ldr	r3, [pc, #340]	@ (800347c <HAL_DMA_IRQHandler+0x160>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003336:	221c      	movs	r2, #28
 8003338:	4013      	ands	r3, r2
 800333a:	2204      	movs	r2, #4
 800333c:	409a      	lsls	r2, r3
 800333e:	0013      	movs	r3, r2
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	4013      	ands	r3, r2
 8003344:	d027      	beq.n	8003396 <HAL_DMA_IRQHandler+0x7a>
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	2204      	movs	r2, #4
 800334a:	4013      	ands	r3, r2
 800334c:	d023      	beq.n	8003396 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2220      	movs	r2, #32
 8003356:	4013      	ands	r3, r2
 8003358:	d107      	bne.n	800336a <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2104      	movs	r1, #4
 8003366:	438a      	bics	r2, r1
 8003368:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800336a:	4b44      	ldr	r3, [pc, #272]	@ (800347c <HAL_DMA_IRQHandler+0x160>)
 800336c:	6859      	ldr	r1, [r3, #4]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003372:	221c      	movs	r2, #28
 8003374:	4013      	ands	r3, r2
 8003376:	2204      	movs	r2, #4
 8003378:	409a      	lsls	r2, r3
 800337a:	4b40      	ldr	r3, [pc, #256]	@ (800347c <HAL_DMA_IRQHandler+0x160>)
 800337c:	430a      	orrs	r2, r1
 800337e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003384:	2b00      	cmp	r3, #0
 8003386:	d100      	bne.n	800338a <HAL_DMA_IRQHandler+0x6e>
 8003388:	e073      	b.n	8003472 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	0010      	movs	r0, r2
 8003392:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003394:	e06d      	b.n	8003472 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339a:	221c      	movs	r2, #28
 800339c:	4013      	ands	r3, r2
 800339e:	2202      	movs	r2, #2
 80033a0:	409a      	lsls	r2, r3
 80033a2:	0013      	movs	r3, r2
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	4013      	ands	r3, r2
 80033a8:	d02e      	beq.n	8003408 <HAL_DMA_IRQHandler+0xec>
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	2202      	movs	r2, #2
 80033ae:	4013      	ands	r3, r2
 80033b0:	d02a      	beq.n	8003408 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2220      	movs	r2, #32
 80033ba:	4013      	ands	r3, r2
 80033bc:	d10b      	bne.n	80033d6 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	210a      	movs	r1, #10
 80033ca:	438a      	bics	r2, r1
 80033cc:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2225      	movs	r2, #37	@ 0x25
 80033d2:	2101      	movs	r1, #1
 80033d4:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80033d6:	4b29      	ldr	r3, [pc, #164]	@ (800347c <HAL_DMA_IRQHandler+0x160>)
 80033d8:	6859      	ldr	r1, [r3, #4]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033de:	221c      	movs	r2, #28
 80033e0:	4013      	ands	r3, r2
 80033e2:	2202      	movs	r2, #2
 80033e4:	409a      	lsls	r2, r3
 80033e6:	4b25      	ldr	r3, [pc, #148]	@ (800347c <HAL_DMA_IRQHandler+0x160>)
 80033e8:	430a      	orrs	r2, r1
 80033ea:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2224      	movs	r2, #36	@ 0x24
 80033f0:	2100      	movs	r1, #0
 80033f2:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d03a      	beq.n	8003472 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	0010      	movs	r0, r2
 8003404:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003406:	e034      	b.n	8003472 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340c:	221c      	movs	r2, #28
 800340e:	4013      	ands	r3, r2
 8003410:	2208      	movs	r2, #8
 8003412:	409a      	lsls	r2, r3
 8003414:	0013      	movs	r3, r2
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	4013      	ands	r3, r2
 800341a:	d02b      	beq.n	8003474 <HAL_DMA_IRQHandler+0x158>
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	2208      	movs	r2, #8
 8003420:	4013      	ands	r3, r2
 8003422:	d027      	beq.n	8003474 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	210e      	movs	r1, #14
 8003430:	438a      	bics	r2, r1
 8003432:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003434:	4b11      	ldr	r3, [pc, #68]	@ (800347c <HAL_DMA_IRQHandler+0x160>)
 8003436:	6859      	ldr	r1, [r3, #4]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800343c:	221c      	movs	r2, #28
 800343e:	4013      	ands	r3, r2
 8003440:	2201      	movs	r2, #1
 8003442:	409a      	lsls	r2, r3
 8003444:	4b0d      	ldr	r3, [pc, #52]	@ (800347c <HAL_DMA_IRQHandler+0x160>)
 8003446:	430a      	orrs	r2, r1
 8003448:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2201      	movs	r2, #1
 800344e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2225      	movs	r2, #37	@ 0x25
 8003454:	2101      	movs	r1, #1
 8003456:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2224      	movs	r2, #36	@ 0x24
 800345c:	2100      	movs	r1, #0
 800345e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003464:	2b00      	cmp	r3, #0
 8003466:	d005      	beq.n	8003474 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	0010      	movs	r0, r2
 8003470:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003472:	46c0      	nop			@ (mov r8, r8)
 8003474:	46c0      	nop			@ (mov r8, r8)
}
 8003476:	46bd      	mov	sp, r7
 8003478:	b004      	add	sp, #16
 800347a:	bd80      	pop	{r7, pc}
 800347c:	40020000 	.word	0x40020000

08003480 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
 800348c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003496:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800349c:	2b00      	cmp	r3, #0
 800349e:	d004      	beq.n	80034aa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80034a8:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80034aa:	4b14      	ldr	r3, [pc, #80]	@ (80034fc <DMA_SetConfig+0x7c>)
 80034ac:	6859      	ldr	r1, [r3, #4]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b2:	221c      	movs	r2, #28
 80034b4:	4013      	ands	r3, r2
 80034b6:	2201      	movs	r2, #1
 80034b8:	409a      	lsls	r2, r3
 80034ba:	4b10      	ldr	r3, [pc, #64]	@ (80034fc <DMA_SetConfig+0x7c>)
 80034bc:	430a      	orrs	r2, r1
 80034be:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	2b10      	cmp	r3, #16
 80034ce:	d108      	bne.n	80034e2 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68ba      	ldr	r2, [r7, #8]
 80034de:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80034e0:	e007      	b.n	80034f2 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	60da      	str	r2, [r3, #12]
}
 80034f2:	46c0      	nop			@ (mov r8, r8)
 80034f4:	46bd      	mov	sp, r7
 80034f6:	b004      	add	sp, #16
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	46c0      	nop			@ (mov r8, r8)
 80034fc:	40020000 	.word	0x40020000

08003500 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350c:	089b      	lsrs	r3, r3, #2
 800350e:	4a10      	ldr	r2, [pc, #64]	@ (8003550 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003510:	4694      	mov	ip, r2
 8003512:	4463      	add	r3, ip
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	001a      	movs	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	001a      	movs	r2, r3
 8003522:	23ff      	movs	r3, #255	@ 0xff
 8003524:	4013      	ands	r3, r2
 8003526:	3b08      	subs	r3, #8
 8003528:	2114      	movs	r1, #20
 800352a:	0018      	movs	r0, r3
 800352c:	f7fc fdf4 	bl	8000118 <__udivsi3>
 8003530:	0003      	movs	r3, r0
 8003532:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a07      	ldr	r2, [pc, #28]	@ (8003554 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003538:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	221f      	movs	r2, #31
 800353e:	4013      	ands	r3, r2
 8003540:	2201      	movs	r2, #1
 8003542:	409a      	lsls	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8003548:	46c0      	nop			@ (mov r8, r8)
 800354a:	46bd      	mov	sp, r7
 800354c:	b004      	add	sp, #16
 800354e:	bd80      	pop	{r7, pc}
 8003550:	10008200 	.word	0x10008200
 8003554:	40020880 	.word	0x40020880

08003558 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	223f      	movs	r2, #63	@ 0x3f
 8003566:	4013      	ands	r3, r2
 8003568:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	4a0a      	ldr	r2, [pc, #40]	@ (8003598 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800356e:	4694      	mov	ip, r2
 8003570:	4463      	add	r3, ip
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	001a      	movs	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a07      	ldr	r2, [pc, #28]	@ (800359c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800357e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	3b01      	subs	r3, #1
 8003584:	2203      	movs	r2, #3
 8003586:	4013      	ands	r3, r2
 8003588:	2201      	movs	r2, #1
 800358a:	409a      	lsls	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8003590:	46c0      	nop			@ (mov r8, r8)
 8003592:	46bd      	mov	sp, r7
 8003594:	b004      	add	sp, #16
 8003596:	bd80      	pop	{r7, pc}
 8003598:	1000823f 	.word	0x1000823f
 800359c:	40020940 	.word	0x40020940

080035a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035aa:	2300      	movs	r3, #0
 80035ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035ae:	e147      	b.n	8003840 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2101      	movs	r1, #1
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	4091      	lsls	r1, r2
 80035ba:	000a      	movs	r2, r1
 80035bc:	4013      	ands	r3, r2
 80035be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d100      	bne.n	80035c8 <HAL_GPIO_Init+0x28>
 80035c6:	e138      	b.n	800383a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	2203      	movs	r2, #3
 80035ce:	4013      	ands	r3, r2
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d005      	beq.n	80035e0 <HAL_GPIO_Init+0x40>
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	2203      	movs	r2, #3
 80035da:	4013      	ands	r3, r2
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d130      	bne.n	8003642 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	2203      	movs	r2, #3
 80035ec:	409a      	lsls	r2, r3
 80035ee:	0013      	movs	r3, r2
 80035f0:	43da      	mvns	r2, r3
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	4013      	ands	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	68da      	ldr	r2, [r3, #12]
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	409a      	lsls	r2, r3
 8003602:	0013      	movs	r3, r2
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	4313      	orrs	r3, r2
 8003608:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003616:	2201      	movs	r2, #1
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	409a      	lsls	r2, r3
 800361c:	0013      	movs	r3, r2
 800361e:	43da      	mvns	r2, r3
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	4013      	ands	r3, r2
 8003624:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	091b      	lsrs	r3, r3, #4
 800362c:	2201      	movs	r2, #1
 800362e:	401a      	ands	r2, r3
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	409a      	lsls	r2, r3
 8003634:	0013      	movs	r3, r2
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	4313      	orrs	r3, r2
 800363a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	2203      	movs	r2, #3
 8003648:	4013      	ands	r3, r2
 800364a:	2b03      	cmp	r3, #3
 800364c:	d017      	beq.n	800367e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	2203      	movs	r2, #3
 800365a:	409a      	lsls	r2, r3
 800365c:	0013      	movs	r3, r2
 800365e:	43da      	mvns	r2, r3
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	4013      	ands	r3, r2
 8003664:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	689a      	ldr	r2, [r3, #8]
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	409a      	lsls	r2, r3
 8003670:	0013      	movs	r3, r2
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	4313      	orrs	r3, r2
 8003676:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2203      	movs	r2, #3
 8003684:	4013      	ands	r3, r2
 8003686:	2b02      	cmp	r3, #2
 8003688:	d123      	bne.n	80036d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	08da      	lsrs	r2, r3, #3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	3208      	adds	r2, #8
 8003692:	0092      	lsls	r2, r2, #2
 8003694:	58d3      	ldr	r3, [r2, r3]
 8003696:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	2207      	movs	r2, #7
 800369c:	4013      	ands	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	220f      	movs	r2, #15
 80036a2:	409a      	lsls	r2, r3
 80036a4:	0013      	movs	r3, r2
 80036a6:	43da      	mvns	r2, r3
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	4013      	ands	r3, r2
 80036ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	691a      	ldr	r2, [r3, #16]
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	2107      	movs	r1, #7
 80036b6:	400b      	ands	r3, r1
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	409a      	lsls	r2, r3
 80036bc:	0013      	movs	r3, r2
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	08da      	lsrs	r2, r3, #3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	3208      	adds	r2, #8
 80036cc:	0092      	lsls	r2, r2, #2
 80036ce:	6939      	ldr	r1, [r7, #16]
 80036d0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	005b      	lsls	r3, r3, #1
 80036dc:	2203      	movs	r2, #3
 80036de:	409a      	lsls	r2, r3
 80036e0:	0013      	movs	r3, r2
 80036e2:	43da      	mvns	r2, r3
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	4013      	ands	r3, r2
 80036e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	2203      	movs	r2, #3
 80036f0:	401a      	ands	r2, r3
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	409a      	lsls	r2, r3
 80036f8:	0013      	movs	r3, r2
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	685a      	ldr	r2, [r3, #4]
 800370a:	23c0      	movs	r3, #192	@ 0xc0
 800370c:	029b      	lsls	r3, r3, #10
 800370e:	4013      	ands	r3, r2
 8003710:	d100      	bne.n	8003714 <HAL_GPIO_Init+0x174>
 8003712:	e092      	b.n	800383a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003714:	4a50      	ldr	r2, [pc, #320]	@ (8003858 <HAL_GPIO_Init+0x2b8>)
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	089b      	lsrs	r3, r3, #2
 800371a:	3318      	adds	r3, #24
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	589b      	ldr	r3, [r3, r2]
 8003720:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	2203      	movs	r2, #3
 8003726:	4013      	ands	r3, r2
 8003728:	00db      	lsls	r3, r3, #3
 800372a:	220f      	movs	r2, #15
 800372c:	409a      	lsls	r2, r3
 800372e:	0013      	movs	r3, r2
 8003730:	43da      	mvns	r2, r3
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	4013      	ands	r3, r2
 8003736:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	23a0      	movs	r3, #160	@ 0xa0
 800373c:	05db      	lsls	r3, r3, #23
 800373e:	429a      	cmp	r2, r3
 8003740:	d013      	beq.n	800376a <HAL_GPIO_Init+0x1ca>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a45      	ldr	r2, [pc, #276]	@ (800385c <HAL_GPIO_Init+0x2bc>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d00d      	beq.n	8003766 <HAL_GPIO_Init+0x1c6>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a44      	ldr	r2, [pc, #272]	@ (8003860 <HAL_GPIO_Init+0x2c0>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d007      	beq.n	8003762 <HAL_GPIO_Init+0x1c2>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a43      	ldr	r2, [pc, #268]	@ (8003864 <HAL_GPIO_Init+0x2c4>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d101      	bne.n	800375e <HAL_GPIO_Init+0x1be>
 800375a:	2303      	movs	r3, #3
 800375c:	e006      	b.n	800376c <HAL_GPIO_Init+0x1cc>
 800375e:	2305      	movs	r3, #5
 8003760:	e004      	b.n	800376c <HAL_GPIO_Init+0x1cc>
 8003762:	2302      	movs	r3, #2
 8003764:	e002      	b.n	800376c <HAL_GPIO_Init+0x1cc>
 8003766:	2301      	movs	r3, #1
 8003768:	e000      	b.n	800376c <HAL_GPIO_Init+0x1cc>
 800376a:	2300      	movs	r3, #0
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	2103      	movs	r1, #3
 8003770:	400a      	ands	r2, r1
 8003772:	00d2      	lsls	r2, r2, #3
 8003774:	4093      	lsls	r3, r2
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	4313      	orrs	r3, r2
 800377a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800377c:	4936      	ldr	r1, [pc, #216]	@ (8003858 <HAL_GPIO_Init+0x2b8>)
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	089b      	lsrs	r3, r3, #2
 8003782:	3318      	adds	r3, #24
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800378a:	4b33      	ldr	r3, [pc, #204]	@ (8003858 <HAL_GPIO_Init+0x2b8>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	43da      	mvns	r2, r3
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	4013      	ands	r3, r2
 8003798:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	2380      	movs	r3, #128	@ 0x80
 80037a0:	035b      	lsls	r3, r3, #13
 80037a2:	4013      	ands	r3, r2
 80037a4:	d003      	beq.n	80037ae <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80037ae:	4b2a      	ldr	r3, [pc, #168]	@ (8003858 <HAL_GPIO_Init+0x2b8>)
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80037b4:	4b28      	ldr	r3, [pc, #160]	@ (8003858 <HAL_GPIO_Init+0x2b8>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	43da      	mvns	r2, r3
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	4013      	ands	r3, r2
 80037c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685a      	ldr	r2, [r3, #4]
 80037c8:	2380      	movs	r3, #128	@ 0x80
 80037ca:	039b      	lsls	r3, r3, #14
 80037cc:	4013      	ands	r3, r2
 80037ce:	d003      	beq.n	80037d8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80037d8:	4b1f      	ldr	r3, [pc, #124]	@ (8003858 <HAL_GPIO_Init+0x2b8>)
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80037de:	4a1e      	ldr	r2, [pc, #120]	@ (8003858 <HAL_GPIO_Init+0x2b8>)
 80037e0:	2384      	movs	r3, #132	@ 0x84
 80037e2:	58d3      	ldr	r3, [r2, r3]
 80037e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	43da      	mvns	r2, r3
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	4013      	ands	r3, r2
 80037ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	2380      	movs	r3, #128	@ 0x80
 80037f6:	029b      	lsls	r3, r3, #10
 80037f8:	4013      	ands	r3, r2
 80037fa:	d003      	beq.n	8003804 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	4313      	orrs	r3, r2
 8003802:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003804:	4914      	ldr	r1, [pc, #80]	@ (8003858 <HAL_GPIO_Init+0x2b8>)
 8003806:	2284      	movs	r2, #132	@ 0x84
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800380c:	4a12      	ldr	r2, [pc, #72]	@ (8003858 <HAL_GPIO_Init+0x2b8>)
 800380e:	2380      	movs	r3, #128	@ 0x80
 8003810:	58d3      	ldr	r3, [r2, r3]
 8003812:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	43da      	mvns	r2, r3
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	4013      	ands	r3, r2
 800381c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	685a      	ldr	r2, [r3, #4]
 8003822:	2380      	movs	r3, #128	@ 0x80
 8003824:	025b      	lsls	r3, r3, #9
 8003826:	4013      	ands	r3, r2
 8003828:	d003      	beq.n	8003832 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	4313      	orrs	r3, r2
 8003830:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003832:	4909      	ldr	r1, [pc, #36]	@ (8003858 <HAL_GPIO_Init+0x2b8>)
 8003834:	2280      	movs	r2, #128	@ 0x80
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	3301      	adds	r3, #1
 800383e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	40da      	lsrs	r2, r3
 8003848:	1e13      	subs	r3, r2, #0
 800384a:	d000      	beq.n	800384e <HAL_GPIO_Init+0x2ae>
 800384c:	e6b0      	b.n	80035b0 <HAL_GPIO_Init+0x10>
  }
}
 800384e:	46c0      	nop			@ (mov r8, r8)
 8003850:	46c0      	nop			@ (mov r8, r8)
 8003852:	46bd      	mov	sp, r7
 8003854:	b006      	add	sp, #24
 8003856:	bd80      	pop	{r7, pc}
 8003858:	40021800 	.word	0x40021800
 800385c:	50000400 	.word	0x50000400
 8003860:	50000800 	.word	0x50000800
 8003864:	50000c00 	.word	0x50000c00

08003868 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	0002      	movs	r2, r0
 8003870:	1dbb      	adds	r3, r7, #6
 8003872:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8003874:	4b10      	ldr	r3, [pc, #64]	@ (80038b8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	1dba      	adds	r2, r7, #6
 800387a:	8812      	ldrh	r2, [r2, #0]
 800387c:	4013      	ands	r3, r2
 800387e:	d008      	beq.n	8003892 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003880:	4b0d      	ldr	r3, [pc, #52]	@ (80038b8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003882:	1dba      	adds	r2, r7, #6
 8003884:	8812      	ldrh	r2, [r2, #0]
 8003886:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003888:	1dbb      	adds	r3, r7, #6
 800388a:	881b      	ldrh	r3, [r3, #0]
 800388c:	0018      	movs	r0, r3
 800388e:	f7fd fbb1 	bl	8000ff4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8003892:	4b09      	ldr	r3, [pc, #36]	@ (80038b8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	1dba      	adds	r2, r7, #6
 8003898:	8812      	ldrh	r2, [r2, #0]
 800389a:	4013      	ands	r3, r2
 800389c:	d008      	beq.n	80038b0 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800389e:	4b06      	ldr	r3, [pc, #24]	@ (80038b8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80038a0:	1dba      	adds	r2, r7, #6
 80038a2:	8812      	ldrh	r2, [r2, #0]
 80038a4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80038a6:	1dbb      	adds	r3, r7, #6
 80038a8:	881b      	ldrh	r3, [r3, #0]
 80038aa:	0018      	movs	r0, r3
 80038ac:	f000 f806 	bl	80038bc <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80038b0:	46c0      	nop			@ (mov r8, r8)
 80038b2:	46bd      	mov	sp, r7
 80038b4:	b002      	add	sp, #8
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	40021800 	.word	0x40021800

080038bc <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	0002      	movs	r2, r0
 80038c4:	1dbb      	adds	r3, r7, #6
 80038c6:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80038c8:	46c0      	nop			@ (mov r8, r8)
 80038ca:	46bd      	mov	sp, r7
 80038cc:	b002      	add	sp, #8
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80038d8:	4b19      	ldr	r3, [pc, #100]	@ (8003940 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a19      	ldr	r2, [pc, #100]	@ (8003944 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80038de:	4013      	ands	r3, r2
 80038e0:	0019      	movs	r1, r3
 80038e2:	4b17      	ldr	r3, [pc, #92]	@ (8003940 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	2380      	movs	r3, #128	@ 0x80
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d11f      	bne.n	8003934 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80038f4:	4b14      	ldr	r3, [pc, #80]	@ (8003948 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	0013      	movs	r3, r2
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	189b      	adds	r3, r3, r2
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	4912      	ldr	r1, [pc, #72]	@ (800394c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003902:	0018      	movs	r0, r3
 8003904:	f7fc fc08 	bl	8000118 <__udivsi3>
 8003908:	0003      	movs	r3, r0
 800390a:	3301      	adds	r3, #1
 800390c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800390e:	e008      	b.n	8003922 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	3b01      	subs	r3, #1
 800391a:	60fb      	str	r3, [r7, #12]
 800391c:	e001      	b.n	8003922 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e009      	b.n	8003936 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003922:	4b07      	ldr	r3, [pc, #28]	@ (8003940 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003924:	695a      	ldr	r2, [r3, #20]
 8003926:	2380      	movs	r3, #128	@ 0x80
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	401a      	ands	r2, r3
 800392c:	2380      	movs	r3, #128	@ 0x80
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	429a      	cmp	r2, r3
 8003932:	d0ed      	beq.n	8003910 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	0018      	movs	r0, r3
 8003938:	46bd      	mov	sp, r7
 800393a:	b004      	add	sp, #16
 800393c:	bd80      	pop	{r7, pc}
 800393e:	46c0      	nop			@ (mov r8, r8)
 8003940:	40007000 	.word	0x40007000
 8003944:	fffff9ff 	.word	0xfffff9ff
 8003948:	20000404 	.word	0x20000404
 800394c:	000f4240 	.word	0x000f4240

08003950 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b088      	sub	sp, #32
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e2fe      	b.n	8003f60 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2201      	movs	r2, #1
 8003968:	4013      	ands	r3, r2
 800396a:	d100      	bne.n	800396e <HAL_RCC_OscConfig+0x1e>
 800396c:	e07c      	b.n	8003a68 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800396e:	4bc3      	ldr	r3, [pc, #780]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	2238      	movs	r2, #56	@ 0x38
 8003974:	4013      	ands	r3, r2
 8003976:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003978:	4bc0      	ldr	r3, [pc, #768]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	2203      	movs	r2, #3
 800397e:	4013      	ands	r3, r2
 8003980:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	2b10      	cmp	r3, #16
 8003986:	d102      	bne.n	800398e <HAL_RCC_OscConfig+0x3e>
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	2b03      	cmp	r3, #3
 800398c:	d002      	beq.n	8003994 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	2b08      	cmp	r3, #8
 8003992:	d10b      	bne.n	80039ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003994:	4bb9      	ldr	r3, [pc, #740]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	2380      	movs	r3, #128	@ 0x80
 800399a:	029b      	lsls	r3, r3, #10
 800399c:	4013      	ands	r3, r2
 800399e:	d062      	beq.n	8003a66 <HAL_RCC_OscConfig+0x116>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d15e      	bne.n	8003a66 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e2d9      	b.n	8003f60 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	2380      	movs	r3, #128	@ 0x80
 80039b2:	025b      	lsls	r3, r3, #9
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d107      	bne.n	80039c8 <HAL_RCC_OscConfig+0x78>
 80039b8:	4bb0      	ldr	r3, [pc, #704]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	4baf      	ldr	r3, [pc, #700]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 80039be:	2180      	movs	r1, #128	@ 0x80
 80039c0:	0249      	lsls	r1, r1, #9
 80039c2:	430a      	orrs	r2, r1
 80039c4:	601a      	str	r2, [r3, #0]
 80039c6:	e020      	b.n	8003a0a <HAL_RCC_OscConfig+0xba>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685a      	ldr	r2, [r3, #4]
 80039cc:	23a0      	movs	r3, #160	@ 0xa0
 80039ce:	02db      	lsls	r3, r3, #11
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d10e      	bne.n	80039f2 <HAL_RCC_OscConfig+0xa2>
 80039d4:	4ba9      	ldr	r3, [pc, #676]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	4ba8      	ldr	r3, [pc, #672]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 80039da:	2180      	movs	r1, #128	@ 0x80
 80039dc:	02c9      	lsls	r1, r1, #11
 80039de:	430a      	orrs	r2, r1
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	4ba6      	ldr	r3, [pc, #664]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	4ba5      	ldr	r3, [pc, #660]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 80039e8:	2180      	movs	r1, #128	@ 0x80
 80039ea:	0249      	lsls	r1, r1, #9
 80039ec:	430a      	orrs	r2, r1
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	e00b      	b.n	8003a0a <HAL_RCC_OscConfig+0xba>
 80039f2:	4ba2      	ldr	r3, [pc, #648]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	4ba1      	ldr	r3, [pc, #644]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 80039f8:	49a1      	ldr	r1, [pc, #644]	@ (8003c80 <HAL_RCC_OscConfig+0x330>)
 80039fa:	400a      	ands	r2, r1
 80039fc:	601a      	str	r2, [r3, #0]
 80039fe:	4b9f      	ldr	r3, [pc, #636]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	4b9e      	ldr	r3, [pc, #632]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003a04:	499f      	ldr	r1, [pc, #636]	@ (8003c84 <HAL_RCC_OscConfig+0x334>)
 8003a06:	400a      	ands	r2, r1
 8003a08:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d014      	beq.n	8003a3c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a12:	f7fe fa0f 	bl	8001e34 <HAL_GetTick>
 8003a16:	0003      	movs	r3, r0
 8003a18:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a1a:	e008      	b.n	8003a2e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a1c:	f7fe fa0a 	bl	8001e34 <HAL_GetTick>
 8003a20:	0002      	movs	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b64      	cmp	r3, #100	@ 0x64
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e298      	b.n	8003f60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a2e:	4b93      	ldr	r3, [pc, #588]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	2380      	movs	r3, #128	@ 0x80
 8003a34:	029b      	lsls	r3, r3, #10
 8003a36:	4013      	ands	r3, r2
 8003a38:	d0f0      	beq.n	8003a1c <HAL_RCC_OscConfig+0xcc>
 8003a3a:	e015      	b.n	8003a68 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a3c:	f7fe f9fa 	bl	8001e34 <HAL_GetTick>
 8003a40:	0003      	movs	r3, r0
 8003a42:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a44:	e008      	b.n	8003a58 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a46:	f7fe f9f5 	bl	8001e34 <HAL_GetTick>
 8003a4a:	0002      	movs	r2, r0
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b64      	cmp	r3, #100	@ 0x64
 8003a52:	d901      	bls.n	8003a58 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e283      	b.n	8003f60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a58:	4b88      	ldr	r3, [pc, #544]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	2380      	movs	r3, #128	@ 0x80
 8003a5e:	029b      	lsls	r3, r3, #10
 8003a60:	4013      	ands	r3, r2
 8003a62:	d1f0      	bne.n	8003a46 <HAL_RCC_OscConfig+0xf6>
 8003a64:	e000      	b.n	8003a68 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a66:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2202      	movs	r2, #2
 8003a6e:	4013      	ands	r3, r2
 8003a70:	d100      	bne.n	8003a74 <HAL_RCC_OscConfig+0x124>
 8003a72:	e099      	b.n	8003ba8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a74:	4b81      	ldr	r3, [pc, #516]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	2238      	movs	r2, #56	@ 0x38
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a7e:	4b7f      	ldr	r3, [pc, #508]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	2203      	movs	r2, #3
 8003a84:	4013      	ands	r3, r2
 8003a86:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	2b10      	cmp	r3, #16
 8003a8c:	d102      	bne.n	8003a94 <HAL_RCC_OscConfig+0x144>
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d002      	beq.n	8003a9a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d135      	bne.n	8003b06 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a9a:	4b78      	ldr	r3, [pc, #480]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	2380      	movs	r3, #128	@ 0x80
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	d005      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x162>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e256      	b.n	8003f60 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ab2:	4b72      	ldr	r3, [pc, #456]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	4a74      	ldr	r2, [pc, #464]	@ (8003c88 <HAL_RCC_OscConfig+0x338>)
 8003ab8:	4013      	ands	r3, r2
 8003aba:	0019      	movs	r1, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	695b      	ldr	r3, [r3, #20]
 8003ac0:	021a      	lsls	r2, r3, #8
 8003ac2:	4b6e      	ldr	r3, [pc, #440]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d112      	bne.n	8003af4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003ace:	4b6b      	ldr	r3, [pc, #428]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a6e      	ldr	r2, [pc, #440]	@ (8003c8c <HAL_RCC_OscConfig+0x33c>)
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	0019      	movs	r1, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	691a      	ldr	r2, [r3, #16]
 8003adc:	4b67      	ldr	r3, [pc, #412]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003ae2:	4b66      	ldr	r3, [pc, #408]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	0adb      	lsrs	r3, r3, #11
 8003ae8:	2207      	movs	r2, #7
 8003aea:	4013      	ands	r3, r2
 8003aec:	4a68      	ldr	r2, [pc, #416]	@ (8003c90 <HAL_RCC_OscConfig+0x340>)
 8003aee:	40da      	lsrs	r2, r3
 8003af0:	4b68      	ldr	r3, [pc, #416]	@ (8003c94 <HAL_RCC_OscConfig+0x344>)
 8003af2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003af4:	4b68      	ldr	r3, [pc, #416]	@ (8003c98 <HAL_RCC_OscConfig+0x348>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	0018      	movs	r0, r3
 8003afa:	f7fe f93f 	bl	8001d7c <HAL_InitTick>
 8003afe:	1e03      	subs	r3, r0, #0
 8003b00:	d051      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e22c      	b.n	8003f60 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d030      	beq.n	8003b70 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003b0e:	4b5b      	ldr	r3, [pc, #364]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a5e      	ldr	r2, [pc, #376]	@ (8003c8c <HAL_RCC_OscConfig+0x33c>)
 8003b14:	4013      	ands	r3, r2
 8003b16:	0019      	movs	r1, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	691a      	ldr	r2, [r3, #16]
 8003b1c:	4b57      	ldr	r3, [pc, #348]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003b22:	4b56      	ldr	r3, [pc, #344]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	4b55      	ldr	r3, [pc, #340]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003b28:	2180      	movs	r1, #128	@ 0x80
 8003b2a:	0049      	lsls	r1, r1, #1
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b30:	f7fe f980 	bl	8001e34 <HAL_GetTick>
 8003b34:	0003      	movs	r3, r0
 8003b36:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b38:	e008      	b.n	8003b4c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b3a:	f7fe f97b 	bl	8001e34 <HAL_GetTick>
 8003b3e:	0002      	movs	r2, r0
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d901      	bls.n	8003b4c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e209      	b.n	8003f60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b4c:	4b4b      	ldr	r3, [pc, #300]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	2380      	movs	r3, #128	@ 0x80
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	4013      	ands	r3, r2
 8003b56:	d0f0      	beq.n	8003b3a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b58:	4b48      	ldr	r3, [pc, #288]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	4a4a      	ldr	r2, [pc, #296]	@ (8003c88 <HAL_RCC_OscConfig+0x338>)
 8003b5e:	4013      	ands	r3, r2
 8003b60:	0019      	movs	r1, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	021a      	lsls	r2, r3, #8
 8003b68:	4b44      	ldr	r3, [pc, #272]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	605a      	str	r2, [r3, #4]
 8003b6e:	e01b      	b.n	8003ba8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003b70:	4b42      	ldr	r3, [pc, #264]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	4b41      	ldr	r3, [pc, #260]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003b76:	4949      	ldr	r1, [pc, #292]	@ (8003c9c <HAL_RCC_OscConfig+0x34c>)
 8003b78:	400a      	ands	r2, r1
 8003b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b7c:	f7fe f95a 	bl	8001e34 <HAL_GetTick>
 8003b80:	0003      	movs	r3, r0
 8003b82:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b84:	e008      	b.n	8003b98 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b86:	f7fe f955 	bl	8001e34 <HAL_GetTick>
 8003b8a:	0002      	movs	r2, r0
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d901      	bls.n	8003b98 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e1e3      	b.n	8003f60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b98:	4b38      	ldr	r3, [pc, #224]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	2380      	movs	r3, #128	@ 0x80
 8003b9e:	00db      	lsls	r3, r3, #3
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	d1f0      	bne.n	8003b86 <HAL_RCC_OscConfig+0x236>
 8003ba4:	e000      	b.n	8003ba8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ba6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2208      	movs	r2, #8
 8003bae:	4013      	ands	r3, r2
 8003bb0:	d047      	beq.n	8003c42 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003bb2:	4b32      	ldr	r3, [pc, #200]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	2238      	movs	r2, #56	@ 0x38
 8003bb8:	4013      	ands	r3, r2
 8003bba:	2b18      	cmp	r3, #24
 8003bbc:	d10a      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003bbe:	4b2f      	ldr	r3, [pc, #188]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003bc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bc2:	2202      	movs	r2, #2
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	d03c      	beq.n	8003c42 <HAL_RCC_OscConfig+0x2f2>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d138      	bne.n	8003c42 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e1c5      	b.n	8003f60 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d019      	beq.n	8003c10 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003bdc:	4b27      	ldr	r3, [pc, #156]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003bde:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003be0:	4b26      	ldr	r3, [pc, #152]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003be2:	2101      	movs	r1, #1
 8003be4:	430a      	orrs	r2, r1
 8003be6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be8:	f7fe f924 	bl	8001e34 <HAL_GetTick>
 8003bec:	0003      	movs	r3, r0
 8003bee:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bf0:	e008      	b.n	8003c04 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bf2:	f7fe f91f 	bl	8001e34 <HAL_GetTick>
 8003bf6:	0002      	movs	r2, r0
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d901      	bls.n	8003c04 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e1ad      	b.n	8003f60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c04:	4b1d      	ldr	r3, [pc, #116]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003c06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c08:	2202      	movs	r2, #2
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	d0f1      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x2a2>
 8003c0e:	e018      	b.n	8003c42 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003c10:	4b1a      	ldr	r3, [pc, #104]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003c12:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003c14:	4b19      	ldr	r3, [pc, #100]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003c16:	2101      	movs	r1, #1
 8003c18:	438a      	bics	r2, r1
 8003c1a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c1c:	f7fe f90a 	bl	8001e34 <HAL_GetTick>
 8003c20:	0003      	movs	r3, r0
 8003c22:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c24:	e008      	b.n	8003c38 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c26:	f7fe f905 	bl	8001e34 <HAL_GetTick>
 8003c2a:	0002      	movs	r2, r0
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d901      	bls.n	8003c38 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e193      	b.n	8003f60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c38:	4b10      	ldr	r3, [pc, #64]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003c3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	4013      	ands	r3, r2
 8003c40:	d1f1      	bne.n	8003c26 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2204      	movs	r2, #4
 8003c48:	4013      	ands	r3, r2
 8003c4a:	d100      	bne.n	8003c4e <HAL_RCC_OscConfig+0x2fe>
 8003c4c:	e0c6      	b.n	8003ddc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c4e:	231f      	movs	r3, #31
 8003c50:	18fb      	adds	r3, r7, r3
 8003c52:	2200      	movs	r2, #0
 8003c54:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003c56:	4b09      	ldr	r3, [pc, #36]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	2238      	movs	r2, #56	@ 0x38
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	2b20      	cmp	r3, #32
 8003c60:	d11e      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003c62:	4b06      	ldr	r3, [pc, #24]	@ (8003c7c <HAL_RCC_OscConfig+0x32c>)
 8003c64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c66:	2202      	movs	r2, #2
 8003c68:	4013      	ands	r3, r2
 8003c6a:	d100      	bne.n	8003c6e <HAL_RCC_OscConfig+0x31e>
 8003c6c:	e0b6      	b.n	8003ddc <HAL_RCC_OscConfig+0x48c>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d000      	beq.n	8003c78 <HAL_RCC_OscConfig+0x328>
 8003c76:	e0b1      	b.n	8003ddc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e171      	b.n	8003f60 <HAL_RCC_OscConfig+0x610>
 8003c7c:	40021000 	.word	0x40021000
 8003c80:	fffeffff 	.word	0xfffeffff
 8003c84:	fffbffff 	.word	0xfffbffff
 8003c88:	ffff80ff 	.word	0xffff80ff
 8003c8c:	ffffc7ff 	.word	0xffffc7ff
 8003c90:	00f42400 	.word	0x00f42400
 8003c94:	20000404 	.word	0x20000404
 8003c98:	20000408 	.word	0x20000408
 8003c9c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ca0:	4bb1      	ldr	r3, [pc, #708]	@ (8003f68 <HAL_RCC_OscConfig+0x618>)
 8003ca2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ca4:	2380      	movs	r3, #128	@ 0x80
 8003ca6:	055b      	lsls	r3, r3, #21
 8003ca8:	4013      	ands	r3, r2
 8003caa:	d101      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x360>
 8003cac:	2301      	movs	r3, #1
 8003cae:	e000      	b.n	8003cb2 <HAL_RCC_OscConfig+0x362>
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d011      	beq.n	8003cda <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003cb6:	4bac      	ldr	r3, [pc, #688]	@ (8003f68 <HAL_RCC_OscConfig+0x618>)
 8003cb8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003cba:	4bab      	ldr	r3, [pc, #684]	@ (8003f68 <HAL_RCC_OscConfig+0x618>)
 8003cbc:	2180      	movs	r1, #128	@ 0x80
 8003cbe:	0549      	lsls	r1, r1, #21
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003cc4:	4ba8      	ldr	r3, [pc, #672]	@ (8003f68 <HAL_RCC_OscConfig+0x618>)
 8003cc6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003cc8:	2380      	movs	r3, #128	@ 0x80
 8003cca:	055b      	lsls	r3, r3, #21
 8003ccc:	4013      	ands	r3, r2
 8003cce:	60fb      	str	r3, [r7, #12]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003cd2:	231f      	movs	r3, #31
 8003cd4:	18fb      	adds	r3, r7, r3
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cda:	4ba4      	ldr	r3, [pc, #656]	@ (8003f6c <HAL_RCC_OscConfig+0x61c>)
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	2380      	movs	r3, #128	@ 0x80
 8003ce0:	005b      	lsls	r3, r3, #1
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	d11a      	bne.n	8003d1c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ce6:	4ba1      	ldr	r3, [pc, #644]	@ (8003f6c <HAL_RCC_OscConfig+0x61c>)
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	4ba0      	ldr	r3, [pc, #640]	@ (8003f6c <HAL_RCC_OscConfig+0x61c>)
 8003cec:	2180      	movs	r1, #128	@ 0x80
 8003cee:	0049      	lsls	r1, r1, #1
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003cf4:	f7fe f89e 	bl	8001e34 <HAL_GetTick>
 8003cf8:	0003      	movs	r3, r0
 8003cfa:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cfc:	e008      	b.n	8003d10 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cfe:	f7fe f899 	bl	8001e34 <HAL_GetTick>
 8003d02:	0002      	movs	r2, r0
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d901      	bls.n	8003d10 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e127      	b.n	8003f60 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d10:	4b96      	ldr	r3, [pc, #600]	@ (8003f6c <HAL_RCC_OscConfig+0x61c>)
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	2380      	movs	r3, #128	@ 0x80
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	4013      	ands	r3, r2
 8003d1a:	d0f0      	beq.n	8003cfe <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d106      	bne.n	8003d32 <HAL_RCC_OscConfig+0x3e2>
 8003d24:	4b90      	ldr	r3, [pc, #576]	@ (8003f68 <HAL_RCC_OscConfig+0x618>)
 8003d26:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003d28:	4b8f      	ldr	r3, [pc, #572]	@ (8003f68 <HAL_RCC_OscConfig+0x618>)
 8003d2a:	2101      	movs	r1, #1
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003d30:	e01c      	b.n	8003d6c <HAL_RCC_OscConfig+0x41c>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	2b05      	cmp	r3, #5
 8003d38:	d10c      	bne.n	8003d54 <HAL_RCC_OscConfig+0x404>
 8003d3a:	4b8b      	ldr	r3, [pc, #556]	@ (8003f68 <HAL_RCC_OscConfig+0x618>)
 8003d3c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003d3e:	4b8a      	ldr	r3, [pc, #552]	@ (8003f68 <HAL_RCC_OscConfig+0x618>)
 8003d40:	2104      	movs	r1, #4
 8003d42:	430a      	orrs	r2, r1
 8003d44:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003d46:	4b88      	ldr	r3, [pc, #544]	@ (8003f68 <HAL_RCC_OscConfig+0x618>)
 8003d48:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003d4a:	4b87      	ldr	r3, [pc, #540]	@ (8003f68 <HAL_RCC_OscConfig+0x618>)
 8003d4c:	2101      	movs	r1, #1
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003d52:	e00b      	b.n	8003d6c <HAL_RCC_OscConfig+0x41c>
 8003d54:	4b84      	ldr	r3, [pc, #528]	@ (8003f68 <HAL_RCC_OscConfig+0x618>)
 8003d56:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003d58:	4b83      	ldr	r3, [pc, #524]	@ (8003f68 <HAL_RCC_OscConfig+0x618>)
 8003d5a:	2101      	movs	r1, #1
 8003d5c:	438a      	bics	r2, r1
 8003d5e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003d60:	4b81      	ldr	r3, [pc, #516]	@ (8003f68 <HAL_RCC_OscConfig+0x618>)
 8003d62:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003d64:	4b80      	ldr	r3, [pc, #512]	@ (8003f68 <HAL_RCC_OscConfig+0x618>)
 8003d66:	2104      	movs	r1, #4
 8003d68:	438a      	bics	r2, r1
 8003d6a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d014      	beq.n	8003d9e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d74:	f7fe f85e 	bl	8001e34 <HAL_GetTick>
 8003d78:	0003      	movs	r3, r0
 8003d7a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d7c:	e009      	b.n	8003d92 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d7e:	f7fe f859 	bl	8001e34 <HAL_GetTick>
 8003d82:	0002      	movs	r2, r0
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	4a79      	ldr	r2, [pc, #484]	@ (8003f70 <HAL_RCC_OscConfig+0x620>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e0e6      	b.n	8003f60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d92:	4b75      	ldr	r3, [pc, #468]	@ (8003f68 <HAL_RCC_OscConfig+0x618>)
 8003d94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d96:	2202      	movs	r2, #2
 8003d98:	4013      	ands	r3, r2
 8003d9a:	d0f0      	beq.n	8003d7e <HAL_RCC_OscConfig+0x42e>
 8003d9c:	e013      	b.n	8003dc6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d9e:	f7fe f849 	bl	8001e34 <HAL_GetTick>
 8003da2:	0003      	movs	r3, r0
 8003da4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003da6:	e009      	b.n	8003dbc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003da8:	f7fe f844 	bl	8001e34 <HAL_GetTick>
 8003dac:	0002      	movs	r2, r0
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	4a6f      	ldr	r2, [pc, #444]	@ (8003f70 <HAL_RCC_OscConfig+0x620>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d901      	bls.n	8003dbc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e0d1      	b.n	8003f60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003dbc:	4b6a      	ldr	r3, [pc, #424]	@ (8003f68 <HAL_RCC_OscConfig+0x618>)
 8003dbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dc0:	2202      	movs	r2, #2
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	d1f0      	bne.n	8003da8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003dc6:	231f      	movs	r3, #31
 8003dc8:	18fb      	adds	r3, r7, r3
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d105      	bne.n	8003ddc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003dd0:	4b65      	ldr	r3, [pc, #404]	@ (8003f68 <HAL_RCC_OscConfig+0x618>)
 8003dd2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003dd4:	4b64      	ldr	r3, [pc, #400]	@ (8003f68 <HAL_RCC_OscConfig+0x618>)
 8003dd6:	4967      	ldr	r1, [pc, #412]	@ (8003f74 <HAL_RCC_OscConfig+0x624>)
 8003dd8:	400a      	ands	r2, r1
 8003dda:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	69db      	ldr	r3, [r3, #28]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d100      	bne.n	8003de6 <HAL_RCC_OscConfig+0x496>
 8003de4:	e0bb      	b.n	8003f5e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003de6:	4b60      	ldr	r3, [pc, #384]	@ (8003f68 <HAL_RCC_OscConfig+0x618>)
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	2238      	movs	r2, #56	@ 0x38
 8003dec:	4013      	ands	r3, r2
 8003dee:	2b10      	cmp	r3, #16
 8003df0:	d100      	bne.n	8003df4 <HAL_RCC_OscConfig+0x4a4>
 8003df2:	e07b      	b.n	8003eec <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	69db      	ldr	r3, [r3, #28]
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d156      	bne.n	8003eaa <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dfc:	4b5a      	ldr	r3, [pc, #360]	@ (8003f68 <HAL_RCC_OscConfig+0x618>)
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	4b59      	ldr	r3, [pc, #356]	@ (8003f68 <HAL_RCC_OscConfig+0x618>)
 8003e02:	495d      	ldr	r1, [pc, #372]	@ (8003f78 <HAL_RCC_OscConfig+0x628>)
 8003e04:	400a      	ands	r2, r1
 8003e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e08:	f7fe f814 	bl	8001e34 <HAL_GetTick>
 8003e0c:	0003      	movs	r3, r0
 8003e0e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e10:	e008      	b.n	8003e24 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e12:	f7fe f80f 	bl	8001e34 <HAL_GetTick>
 8003e16:	0002      	movs	r2, r0
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d901      	bls.n	8003e24 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e09d      	b.n	8003f60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e24:	4b50      	ldr	r3, [pc, #320]	@ (8003f68 <HAL_RCC_OscConfig+0x618>)
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	2380      	movs	r3, #128	@ 0x80
 8003e2a:	049b      	lsls	r3, r3, #18
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	d1f0      	bne.n	8003e12 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e30:	4b4d      	ldr	r3, [pc, #308]	@ (8003f68 <HAL_RCC_OscConfig+0x618>)
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	4a51      	ldr	r2, [pc, #324]	@ (8003f7c <HAL_RCC_OscConfig+0x62c>)
 8003e36:	4013      	ands	r3, r2
 8003e38:	0019      	movs	r1, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a1a      	ldr	r2, [r3, #32]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e42:	431a      	orrs	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e48:	021b      	lsls	r3, r3, #8
 8003e4a:	431a      	orrs	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e50:	431a      	orrs	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e56:	431a      	orrs	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e5c:	431a      	orrs	r2, r3
 8003e5e:	4b42      	ldr	r3, [pc, #264]	@ (8003f68 <HAL_RCC_OscConfig+0x618>)
 8003e60:	430a      	orrs	r2, r1
 8003e62:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e64:	4b40      	ldr	r3, [pc, #256]	@ (8003f68 <HAL_RCC_OscConfig+0x618>)
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	4b3f      	ldr	r3, [pc, #252]	@ (8003f68 <HAL_RCC_OscConfig+0x618>)
 8003e6a:	2180      	movs	r1, #128	@ 0x80
 8003e6c:	0449      	lsls	r1, r1, #17
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003e72:	4b3d      	ldr	r3, [pc, #244]	@ (8003f68 <HAL_RCC_OscConfig+0x618>)
 8003e74:	68da      	ldr	r2, [r3, #12]
 8003e76:	4b3c      	ldr	r3, [pc, #240]	@ (8003f68 <HAL_RCC_OscConfig+0x618>)
 8003e78:	2180      	movs	r1, #128	@ 0x80
 8003e7a:	0549      	lsls	r1, r1, #21
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e80:	f7fd ffd8 	bl	8001e34 <HAL_GetTick>
 8003e84:	0003      	movs	r3, r0
 8003e86:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e88:	e008      	b.n	8003e9c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e8a:	f7fd ffd3 	bl	8001e34 <HAL_GetTick>
 8003e8e:	0002      	movs	r2, r0
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d901      	bls.n	8003e9c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e061      	b.n	8003f60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e9c:	4b32      	ldr	r3, [pc, #200]	@ (8003f68 <HAL_RCC_OscConfig+0x618>)
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	2380      	movs	r3, #128	@ 0x80
 8003ea2:	049b      	lsls	r3, r3, #18
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	d0f0      	beq.n	8003e8a <HAL_RCC_OscConfig+0x53a>
 8003ea8:	e059      	b.n	8003f5e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eaa:	4b2f      	ldr	r3, [pc, #188]	@ (8003f68 <HAL_RCC_OscConfig+0x618>)
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	4b2e      	ldr	r3, [pc, #184]	@ (8003f68 <HAL_RCC_OscConfig+0x618>)
 8003eb0:	4931      	ldr	r1, [pc, #196]	@ (8003f78 <HAL_RCC_OscConfig+0x628>)
 8003eb2:	400a      	ands	r2, r1
 8003eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb6:	f7fd ffbd 	bl	8001e34 <HAL_GetTick>
 8003eba:	0003      	movs	r3, r0
 8003ebc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ec0:	f7fd ffb8 	bl	8001e34 <HAL_GetTick>
 8003ec4:	0002      	movs	r2, r0
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e046      	b.n	8003f60 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ed2:	4b25      	ldr	r3, [pc, #148]	@ (8003f68 <HAL_RCC_OscConfig+0x618>)
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	2380      	movs	r3, #128	@ 0x80
 8003ed8:	049b      	lsls	r3, r3, #18
 8003eda:	4013      	ands	r3, r2
 8003edc:	d1f0      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003ede:	4b22      	ldr	r3, [pc, #136]	@ (8003f68 <HAL_RCC_OscConfig+0x618>)
 8003ee0:	68da      	ldr	r2, [r3, #12]
 8003ee2:	4b21      	ldr	r3, [pc, #132]	@ (8003f68 <HAL_RCC_OscConfig+0x618>)
 8003ee4:	4926      	ldr	r1, [pc, #152]	@ (8003f80 <HAL_RCC_OscConfig+0x630>)
 8003ee6:	400a      	ands	r2, r1
 8003ee8:	60da      	str	r2, [r3, #12]
 8003eea:	e038      	b.n	8003f5e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	69db      	ldr	r3, [r3, #28]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d101      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e033      	b.n	8003f60 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003ef8:	4b1b      	ldr	r3, [pc, #108]	@ (8003f68 <HAL_RCC_OscConfig+0x618>)
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	2203      	movs	r2, #3
 8003f02:	401a      	ands	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a1b      	ldr	r3, [r3, #32]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d126      	bne.n	8003f5a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	2270      	movs	r2, #112	@ 0x70
 8003f10:	401a      	ands	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d11f      	bne.n	8003f5a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	23fe      	movs	r3, #254	@ 0xfe
 8003f1e:	01db      	lsls	r3, r3, #7
 8003f20:	401a      	ands	r2, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f26:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d116      	bne.n	8003f5a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f2c:	697a      	ldr	r2, [r7, #20]
 8003f2e:	23f8      	movs	r3, #248	@ 0xf8
 8003f30:	039b      	lsls	r3, r3, #14
 8003f32:	401a      	ands	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d10e      	bne.n	8003f5a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003f3c:	697a      	ldr	r2, [r7, #20]
 8003f3e:	23e0      	movs	r3, #224	@ 0xe0
 8003f40:	051b      	lsls	r3, r3, #20
 8003f42:	401a      	ands	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d106      	bne.n	8003f5a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	0f5b      	lsrs	r3, r3, #29
 8003f50:	075a      	lsls	r2, r3, #29
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d001      	beq.n	8003f5e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e000      	b.n	8003f60 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	0018      	movs	r0, r3
 8003f62:	46bd      	mov	sp, r7
 8003f64:	b008      	add	sp, #32
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	40021000 	.word	0x40021000
 8003f6c:	40007000 	.word	0x40007000
 8003f70:	00001388 	.word	0x00001388
 8003f74:	efffffff 	.word	0xefffffff
 8003f78:	feffffff 	.word	0xfeffffff
 8003f7c:	11c1808c 	.word	0x11c1808c
 8003f80:	eefefffc 	.word	0xeefefffc

08003f84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d101      	bne.n	8003f98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e0e9      	b.n	800416c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f98:	4b76      	ldr	r3, [pc, #472]	@ (8004174 <HAL_RCC_ClockConfig+0x1f0>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2207      	movs	r2, #7
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	683a      	ldr	r2, [r7, #0]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d91e      	bls.n	8003fe4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fa6:	4b73      	ldr	r3, [pc, #460]	@ (8004174 <HAL_RCC_ClockConfig+0x1f0>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2207      	movs	r2, #7
 8003fac:	4393      	bics	r3, r2
 8003fae:	0019      	movs	r1, r3
 8003fb0:	4b70      	ldr	r3, [pc, #448]	@ (8004174 <HAL_RCC_ClockConfig+0x1f0>)
 8003fb2:	683a      	ldr	r2, [r7, #0]
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003fb8:	f7fd ff3c 	bl	8001e34 <HAL_GetTick>
 8003fbc:	0003      	movs	r3, r0
 8003fbe:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003fc0:	e009      	b.n	8003fd6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fc2:	f7fd ff37 	bl	8001e34 <HAL_GetTick>
 8003fc6:	0002      	movs	r2, r0
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	4a6a      	ldr	r2, [pc, #424]	@ (8004178 <HAL_RCC_ClockConfig+0x1f4>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e0ca      	b.n	800416c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003fd6:	4b67      	ldr	r3, [pc, #412]	@ (8004174 <HAL_RCC_ClockConfig+0x1f0>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2207      	movs	r2, #7
 8003fdc:	4013      	ands	r3, r2
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d1ee      	bne.n	8003fc2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2202      	movs	r2, #2
 8003fea:	4013      	ands	r3, r2
 8003fec:	d015      	beq.n	800401a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2204      	movs	r2, #4
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	d006      	beq.n	8004006 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003ff8:	4b60      	ldr	r3, [pc, #384]	@ (800417c <HAL_RCC_ClockConfig+0x1f8>)
 8003ffa:	689a      	ldr	r2, [r3, #8]
 8003ffc:	4b5f      	ldr	r3, [pc, #380]	@ (800417c <HAL_RCC_ClockConfig+0x1f8>)
 8003ffe:	21e0      	movs	r1, #224	@ 0xe0
 8004000:	01c9      	lsls	r1, r1, #7
 8004002:	430a      	orrs	r2, r1
 8004004:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004006:	4b5d      	ldr	r3, [pc, #372]	@ (800417c <HAL_RCC_ClockConfig+0x1f8>)
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	4a5d      	ldr	r2, [pc, #372]	@ (8004180 <HAL_RCC_ClockConfig+0x1fc>)
 800400c:	4013      	ands	r3, r2
 800400e:	0019      	movs	r1, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689a      	ldr	r2, [r3, #8]
 8004014:	4b59      	ldr	r3, [pc, #356]	@ (800417c <HAL_RCC_ClockConfig+0x1f8>)
 8004016:	430a      	orrs	r2, r1
 8004018:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2201      	movs	r2, #1
 8004020:	4013      	ands	r3, r2
 8004022:	d057      	beq.n	80040d4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d107      	bne.n	800403c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800402c:	4b53      	ldr	r3, [pc, #332]	@ (800417c <HAL_RCC_ClockConfig+0x1f8>)
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	2380      	movs	r3, #128	@ 0x80
 8004032:	029b      	lsls	r3, r3, #10
 8004034:	4013      	ands	r3, r2
 8004036:	d12b      	bne.n	8004090 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e097      	b.n	800416c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	2b02      	cmp	r3, #2
 8004042:	d107      	bne.n	8004054 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004044:	4b4d      	ldr	r3, [pc, #308]	@ (800417c <HAL_RCC_ClockConfig+0x1f8>)
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	2380      	movs	r3, #128	@ 0x80
 800404a:	049b      	lsls	r3, r3, #18
 800404c:	4013      	ands	r3, r2
 800404e:	d11f      	bne.n	8004090 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e08b      	b.n	800416c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d107      	bne.n	800406c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800405c:	4b47      	ldr	r3, [pc, #284]	@ (800417c <HAL_RCC_ClockConfig+0x1f8>)
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	2380      	movs	r3, #128	@ 0x80
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	4013      	ands	r3, r2
 8004066:	d113      	bne.n	8004090 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e07f      	b.n	800416c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	2b03      	cmp	r3, #3
 8004072:	d106      	bne.n	8004082 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004074:	4b41      	ldr	r3, [pc, #260]	@ (800417c <HAL_RCC_ClockConfig+0x1f8>)
 8004076:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004078:	2202      	movs	r2, #2
 800407a:	4013      	ands	r3, r2
 800407c:	d108      	bne.n	8004090 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e074      	b.n	800416c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004082:	4b3e      	ldr	r3, [pc, #248]	@ (800417c <HAL_RCC_ClockConfig+0x1f8>)
 8004084:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004086:	2202      	movs	r2, #2
 8004088:	4013      	ands	r3, r2
 800408a:	d101      	bne.n	8004090 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e06d      	b.n	800416c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004090:	4b3a      	ldr	r3, [pc, #232]	@ (800417c <HAL_RCC_ClockConfig+0x1f8>)
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	2207      	movs	r2, #7
 8004096:	4393      	bics	r3, r2
 8004098:	0019      	movs	r1, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	4b37      	ldr	r3, [pc, #220]	@ (800417c <HAL_RCC_ClockConfig+0x1f8>)
 80040a0:	430a      	orrs	r2, r1
 80040a2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040a4:	f7fd fec6 	bl	8001e34 <HAL_GetTick>
 80040a8:	0003      	movs	r3, r0
 80040aa:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ac:	e009      	b.n	80040c2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040ae:	f7fd fec1 	bl	8001e34 <HAL_GetTick>
 80040b2:	0002      	movs	r2, r0
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	4a2f      	ldr	r2, [pc, #188]	@ (8004178 <HAL_RCC_ClockConfig+0x1f4>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e054      	b.n	800416c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040c2:	4b2e      	ldr	r3, [pc, #184]	@ (800417c <HAL_RCC_ClockConfig+0x1f8>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	2238      	movs	r2, #56	@ 0x38
 80040c8:	401a      	ands	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	00db      	lsls	r3, r3, #3
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d1ec      	bne.n	80040ae <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040d4:	4b27      	ldr	r3, [pc, #156]	@ (8004174 <HAL_RCC_ClockConfig+0x1f0>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2207      	movs	r2, #7
 80040da:	4013      	ands	r3, r2
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d21e      	bcs.n	8004120 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040e2:	4b24      	ldr	r3, [pc, #144]	@ (8004174 <HAL_RCC_ClockConfig+0x1f0>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2207      	movs	r2, #7
 80040e8:	4393      	bics	r3, r2
 80040ea:	0019      	movs	r1, r3
 80040ec:	4b21      	ldr	r3, [pc, #132]	@ (8004174 <HAL_RCC_ClockConfig+0x1f0>)
 80040ee:	683a      	ldr	r2, [r7, #0]
 80040f0:	430a      	orrs	r2, r1
 80040f2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80040f4:	f7fd fe9e 	bl	8001e34 <HAL_GetTick>
 80040f8:	0003      	movs	r3, r0
 80040fa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80040fc:	e009      	b.n	8004112 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040fe:	f7fd fe99 	bl	8001e34 <HAL_GetTick>
 8004102:	0002      	movs	r2, r0
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	4a1b      	ldr	r2, [pc, #108]	@ (8004178 <HAL_RCC_ClockConfig+0x1f4>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d901      	bls.n	8004112 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e02c      	b.n	800416c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004112:	4b18      	ldr	r3, [pc, #96]	@ (8004174 <HAL_RCC_ClockConfig+0x1f0>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2207      	movs	r2, #7
 8004118:	4013      	ands	r3, r2
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	429a      	cmp	r2, r3
 800411e:	d1ee      	bne.n	80040fe <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2204      	movs	r2, #4
 8004126:	4013      	ands	r3, r2
 8004128:	d009      	beq.n	800413e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800412a:	4b14      	ldr	r3, [pc, #80]	@ (800417c <HAL_RCC_ClockConfig+0x1f8>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	4a15      	ldr	r2, [pc, #84]	@ (8004184 <HAL_RCC_ClockConfig+0x200>)
 8004130:	4013      	ands	r3, r2
 8004132:	0019      	movs	r1, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68da      	ldr	r2, [r3, #12]
 8004138:	4b10      	ldr	r3, [pc, #64]	@ (800417c <HAL_RCC_ClockConfig+0x1f8>)
 800413a:	430a      	orrs	r2, r1
 800413c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800413e:	f000 f829 	bl	8004194 <HAL_RCC_GetSysClockFreq>
 8004142:	0001      	movs	r1, r0
 8004144:	4b0d      	ldr	r3, [pc, #52]	@ (800417c <HAL_RCC_ClockConfig+0x1f8>)
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	0a1b      	lsrs	r3, r3, #8
 800414a:	220f      	movs	r2, #15
 800414c:	401a      	ands	r2, r3
 800414e:	4b0e      	ldr	r3, [pc, #56]	@ (8004188 <HAL_RCC_ClockConfig+0x204>)
 8004150:	0092      	lsls	r2, r2, #2
 8004152:	58d3      	ldr	r3, [r2, r3]
 8004154:	221f      	movs	r2, #31
 8004156:	4013      	ands	r3, r2
 8004158:	000a      	movs	r2, r1
 800415a:	40da      	lsrs	r2, r3
 800415c:	4b0b      	ldr	r3, [pc, #44]	@ (800418c <HAL_RCC_ClockConfig+0x208>)
 800415e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004160:	4b0b      	ldr	r3, [pc, #44]	@ (8004190 <HAL_RCC_ClockConfig+0x20c>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	0018      	movs	r0, r3
 8004166:	f7fd fe09 	bl	8001d7c <HAL_InitTick>
 800416a:	0003      	movs	r3, r0
}
 800416c:	0018      	movs	r0, r3
 800416e:	46bd      	mov	sp, r7
 8004170:	b004      	add	sp, #16
 8004172:	bd80      	pop	{r7, pc}
 8004174:	40022000 	.word	0x40022000
 8004178:	00001388 	.word	0x00001388
 800417c:	40021000 	.word	0x40021000
 8004180:	fffff0ff 	.word	0xfffff0ff
 8004184:	ffff8fff 	.word	0xffff8fff
 8004188:	08006b20 	.word	0x08006b20
 800418c:	20000404 	.word	0x20000404
 8004190:	20000408 	.word	0x20000408

08004194 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800419a:	4b3c      	ldr	r3, [pc, #240]	@ (800428c <HAL_RCC_GetSysClockFreq+0xf8>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	2238      	movs	r2, #56	@ 0x38
 80041a0:	4013      	ands	r3, r2
 80041a2:	d10f      	bne.n	80041c4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80041a4:	4b39      	ldr	r3, [pc, #228]	@ (800428c <HAL_RCC_GetSysClockFreq+0xf8>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	0adb      	lsrs	r3, r3, #11
 80041aa:	2207      	movs	r2, #7
 80041ac:	4013      	ands	r3, r2
 80041ae:	2201      	movs	r2, #1
 80041b0:	409a      	lsls	r2, r3
 80041b2:	0013      	movs	r3, r2
 80041b4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80041b6:	6839      	ldr	r1, [r7, #0]
 80041b8:	4835      	ldr	r0, [pc, #212]	@ (8004290 <HAL_RCC_GetSysClockFreq+0xfc>)
 80041ba:	f7fb ffad 	bl	8000118 <__udivsi3>
 80041be:	0003      	movs	r3, r0
 80041c0:	613b      	str	r3, [r7, #16]
 80041c2:	e05d      	b.n	8004280 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041c4:	4b31      	ldr	r3, [pc, #196]	@ (800428c <HAL_RCC_GetSysClockFreq+0xf8>)
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	2238      	movs	r2, #56	@ 0x38
 80041ca:	4013      	ands	r3, r2
 80041cc:	2b08      	cmp	r3, #8
 80041ce:	d102      	bne.n	80041d6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80041d0:	4b30      	ldr	r3, [pc, #192]	@ (8004294 <HAL_RCC_GetSysClockFreq+0x100>)
 80041d2:	613b      	str	r3, [r7, #16]
 80041d4:	e054      	b.n	8004280 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041d6:	4b2d      	ldr	r3, [pc, #180]	@ (800428c <HAL_RCC_GetSysClockFreq+0xf8>)
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	2238      	movs	r2, #56	@ 0x38
 80041dc:	4013      	ands	r3, r2
 80041de:	2b10      	cmp	r3, #16
 80041e0:	d138      	bne.n	8004254 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80041e2:	4b2a      	ldr	r3, [pc, #168]	@ (800428c <HAL_RCC_GetSysClockFreq+0xf8>)
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	2203      	movs	r2, #3
 80041e8:	4013      	ands	r3, r2
 80041ea:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041ec:	4b27      	ldr	r3, [pc, #156]	@ (800428c <HAL_RCC_GetSysClockFreq+0xf8>)
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	091b      	lsrs	r3, r3, #4
 80041f2:	2207      	movs	r2, #7
 80041f4:	4013      	ands	r3, r2
 80041f6:	3301      	adds	r3, #1
 80041f8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2b03      	cmp	r3, #3
 80041fe:	d10d      	bne.n	800421c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004200:	68b9      	ldr	r1, [r7, #8]
 8004202:	4824      	ldr	r0, [pc, #144]	@ (8004294 <HAL_RCC_GetSysClockFreq+0x100>)
 8004204:	f7fb ff88 	bl	8000118 <__udivsi3>
 8004208:	0003      	movs	r3, r0
 800420a:	0019      	movs	r1, r3
 800420c:	4b1f      	ldr	r3, [pc, #124]	@ (800428c <HAL_RCC_GetSysClockFreq+0xf8>)
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	0a1b      	lsrs	r3, r3, #8
 8004212:	227f      	movs	r2, #127	@ 0x7f
 8004214:	4013      	ands	r3, r2
 8004216:	434b      	muls	r3, r1
 8004218:	617b      	str	r3, [r7, #20]
        break;
 800421a:	e00d      	b.n	8004238 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800421c:	68b9      	ldr	r1, [r7, #8]
 800421e:	481c      	ldr	r0, [pc, #112]	@ (8004290 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004220:	f7fb ff7a 	bl	8000118 <__udivsi3>
 8004224:	0003      	movs	r3, r0
 8004226:	0019      	movs	r1, r3
 8004228:	4b18      	ldr	r3, [pc, #96]	@ (800428c <HAL_RCC_GetSysClockFreq+0xf8>)
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	0a1b      	lsrs	r3, r3, #8
 800422e:	227f      	movs	r2, #127	@ 0x7f
 8004230:	4013      	ands	r3, r2
 8004232:	434b      	muls	r3, r1
 8004234:	617b      	str	r3, [r7, #20]
        break;
 8004236:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004238:	4b14      	ldr	r3, [pc, #80]	@ (800428c <HAL_RCC_GetSysClockFreq+0xf8>)
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	0f5b      	lsrs	r3, r3, #29
 800423e:	2207      	movs	r2, #7
 8004240:	4013      	ands	r3, r2
 8004242:	3301      	adds	r3, #1
 8004244:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004246:	6879      	ldr	r1, [r7, #4]
 8004248:	6978      	ldr	r0, [r7, #20]
 800424a:	f7fb ff65 	bl	8000118 <__udivsi3>
 800424e:	0003      	movs	r3, r0
 8004250:	613b      	str	r3, [r7, #16]
 8004252:	e015      	b.n	8004280 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004254:	4b0d      	ldr	r3, [pc, #52]	@ (800428c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	2238      	movs	r2, #56	@ 0x38
 800425a:	4013      	ands	r3, r2
 800425c:	2b20      	cmp	r3, #32
 800425e:	d103      	bne.n	8004268 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004260:	2380      	movs	r3, #128	@ 0x80
 8004262:	021b      	lsls	r3, r3, #8
 8004264:	613b      	str	r3, [r7, #16]
 8004266:	e00b      	b.n	8004280 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004268:	4b08      	ldr	r3, [pc, #32]	@ (800428c <HAL_RCC_GetSysClockFreq+0xf8>)
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	2238      	movs	r2, #56	@ 0x38
 800426e:	4013      	ands	r3, r2
 8004270:	2b18      	cmp	r3, #24
 8004272:	d103      	bne.n	800427c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004274:	23fa      	movs	r3, #250	@ 0xfa
 8004276:	01db      	lsls	r3, r3, #7
 8004278:	613b      	str	r3, [r7, #16]
 800427a:	e001      	b.n	8004280 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800427c:	2300      	movs	r3, #0
 800427e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004280:	693b      	ldr	r3, [r7, #16]
}
 8004282:	0018      	movs	r0, r3
 8004284:	46bd      	mov	sp, r7
 8004286:	b006      	add	sp, #24
 8004288:	bd80      	pop	{r7, pc}
 800428a:	46c0      	nop			@ (mov r8, r8)
 800428c:	40021000 	.word	0x40021000
 8004290:	00f42400 	.word	0x00f42400
 8004294:	007a1200 	.word	0x007a1200

08004298 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b086      	sub	sp, #24
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80042a0:	2313      	movs	r3, #19
 80042a2:	18fb      	adds	r3, r7, r3
 80042a4:	2200      	movs	r2, #0
 80042a6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80042a8:	2312      	movs	r3, #18
 80042aa:	18fb      	adds	r3, r7, r3
 80042ac:	2200      	movs	r2, #0
 80042ae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	2380      	movs	r3, #128	@ 0x80
 80042b6:	029b      	lsls	r3, r3, #10
 80042b8:	4013      	ands	r3, r2
 80042ba:	d100      	bne.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x26>
 80042bc:	e0a3      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042be:	2011      	movs	r0, #17
 80042c0:	183b      	adds	r3, r7, r0
 80042c2:	2200      	movs	r2, #0
 80042c4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042c6:	4ba5      	ldr	r3, [pc, #660]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042ca:	2380      	movs	r3, #128	@ 0x80
 80042cc:	055b      	lsls	r3, r3, #21
 80042ce:	4013      	ands	r3, r2
 80042d0:	d110      	bne.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042d2:	4ba2      	ldr	r3, [pc, #648]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042d6:	4ba1      	ldr	r3, [pc, #644]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042d8:	2180      	movs	r1, #128	@ 0x80
 80042da:	0549      	lsls	r1, r1, #21
 80042dc:	430a      	orrs	r2, r1
 80042de:	63da      	str	r2, [r3, #60]	@ 0x3c
 80042e0:	4b9e      	ldr	r3, [pc, #632]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042e4:	2380      	movs	r3, #128	@ 0x80
 80042e6:	055b      	lsls	r3, r3, #21
 80042e8:	4013      	ands	r3, r2
 80042ea:	60bb      	str	r3, [r7, #8]
 80042ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042ee:	183b      	adds	r3, r7, r0
 80042f0:	2201      	movs	r2, #1
 80042f2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042f4:	4b9a      	ldr	r3, [pc, #616]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	4b99      	ldr	r3, [pc, #612]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80042fa:	2180      	movs	r1, #128	@ 0x80
 80042fc:	0049      	lsls	r1, r1, #1
 80042fe:	430a      	orrs	r2, r1
 8004300:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004302:	f7fd fd97 	bl	8001e34 <HAL_GetTick>
 8004306:	0003      	movs	r3, r0
 8004308:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800430a:	e00b      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800430c:	f7fd fd92 	bl	8001e34 <HAL_GetTick>
 8004310:	0002      	movs	r2, r0
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b02      	cmp	r3, #2
 8004318:	d904      	bls.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800431a:	2313      	movs	r3, #19
 800431c:	18fb      	adds	r3, r7, r3
 800431e:	2203      	movs	r2, #3
 8004320:	701a      	strb	r2, [r3, #0]
        break;
 8004322:	e005      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004324:	4b8e      	ldr	r3, [pc, #568]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	2380      	movs	r3, #128	@ 0x80
 800432a:	005b      	lsls	r3, r3, #1
 800432c:	4013      	ands	r3, r2
 800432e:	d0ed      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004330:	2313      	movs	r3, #19
 8004332:	18fb      	adds	r3, r7, r3
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d154      	bne.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800433a:	4b88      	ldr	r3, [pc, #544]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800433c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800433e:	23c0      	movs	r3, #192	@ 0xc0
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	4013      	ands	r3, r2
 8004344:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d019      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	429a      	cmp	r2, r3
 8004354:	d014      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004356:	4b81      	ldr	r3, [pc, #516]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004358:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800435a:	4a82      	ldr	r2, [pc, #520]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800435c:	4013      	ands	r3, r2
 800435e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004360:	4b7e      	ldr	r3, [pc, #504]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004362:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004364:	4b7d      	ldr	r3, [pc, #500]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004366:	2180      	movs	r1, #128	@ 0x80
 8004368:	0249      	lsls	r1, r1, #9
 800436a:	430a      	orrs	r2, r1
 800436c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800436e:	4b7b      	ldr	r3, [pc, #492]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004370:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004372:	4b7a      	ldr	r3, [pc, #488]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004374:	497c      	ldr	r1, [pc, #496]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8004376:	400a      	ands	r2, r1
 8004378:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800437a:	4b78      	ldr	r3, [pc, #480]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	2201      	movs	r2, #1
 8004384:	4013      	ands	r3, r2
 8004386:	d016      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004388:	f7fd fd54 	bl	8001e34 <HAL_GetTick>
 800438c:	0003      	movs	r3, r0
 800438e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004390:	e00c      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004392:	f7fd fd4f 	bl	8001e34 <HAL_GetTick>
 8004396:	0002      	movs	r2, r0
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	4a73      	ldr	r2, [pc, #460]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d904      	bls.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80043a2:	2313      	movs	r3, #19
 80043a4:	18fb      	adds	r3, r7, r3
 80043a6:	2203      	movs	r2, #3
 80043a8:	701a      	strb	r2, [r3, #0]
            break;
 80043aa:	e004      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043ac:	4b6b      	ldr	r3, [pc, #428]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043b0:	2202      	movs	r2, #2
 80043b2:	4013      	ands	r3, r2
 80043b4:	d0ed      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80043b6:	2313      	movs	r3, #19
 80043b8:	18fb      	adds	r3, r7, r3
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d10a      	bne.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043c0:	4b66      	ldr	r3, [pc, #408]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043c4:	4a67      	ldr	r2, [pc, #412]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80043c6:	4013      	ands	r3, r2
 80043c8:	0019      	movs	r1, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80043ce:	4b63      	ldr	r3, [pc, #396]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043d0:	430a      	orrs	r2, r1
 80043d2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80043d4:	e00c      	b.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043d6:	2312      	movs	r3, #18
 80043d8:	18fb      	adds	r3, r7, r3
 80043da:	2213      	movs	r2, #19
 80043dc:	18ba      	adds	r2, r7, r2
 80043de:	7812      	ldrb	r2, [r2, #0]
 80043e0:	701a      	strb	r2, [r3, #0]
 80043e2:	e005      	b.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043e4:	2312      	movs	r3, #18
 80043e6:	18fb      	adds	r3, r7, r3
 80043e8:	2213      	movs	r2, #19
 80043ea:	18ba      	adds	r2, r7, r2
 80043ec:	7812      	ldrb	r2, [r2, #0]
 80043ee:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80043f0:	2311      	movs	r3, #17
 80043f2:	18fb      	adds	r3, r7, r3
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d105      	bne.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043fa:	4b58      	ldr	r3, [pc, #352]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80043fe:	4b57      	ldr	r3, [pc, #348]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004400:	495b      	ldr	r1, [pc, #364]	@ (8004570 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004402:	400a      	ands	r2, r1
 8004404:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2201      	movs	r2, #1
 800440c:	4013      	ands	r3, r2
 800440e:	d009      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004410:	4b52      	ldr	r3, [pc, #328]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004412:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004414:	2203      	movs	r2, #3
 8004416:	4393      	bics	r3, r2
 8004418:	0019      	movs	r1, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	4b4f      	ldr	r3, [pc, #316]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004420:	430a      	orrs	r2, r1
 8004422:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2210      	movs	r2, #16
 800442a:	4013      	ands	r3, r2
 800442c:	d009      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800442e:	4b4b      	ldr	r3, [pc, #300]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004430:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004432:	4a50      	ldr	r2, [pc, #320]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8004434:	4013      	ands	r3, r2
 8004436:	0019      	movs	r1, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689a      	ldr	r2, [r3, #8]
 800443c:	4b47      	ldr	r3, [pc, #284]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800443e:	430a      	orrs	r2, r1
 8004440:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	2380      	movs	r3, #128	@ 0x80
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	4013      	ands	r3, r2
 800444c:	d009      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800444e:	4b43      	ldr	r3, [pc, #268]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004452:	4a49      	ldr	r2, [pc, #292]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004454:	4013      	ands	r3, r2
 8004456:	0019      	movs	r1, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	695a      	ldr	r2, [r3, #20]
 800445c:	4b3f      	ldr	r3, [pc, #252]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800445e:	430a      	orrs	r2, r1
 8004460:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	2380      	movs	r3, #128	@ 0x80
 8004468:	00db      	lsls	r3, r3, #3
 800446a:	4013      	ands	r3, r2
 800446c:	d009      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800446e:	4b3b      	ldr	r3, [pc, #236]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004472:	4a42      	ldr	r2, [pc, #264]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004474:	4013      	ands	r3, r2
 8004476:	0019      	movs	r1, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	699a      	ldr	r2, [r3, #24]
 800447c:	4b37      	ldr	r3, [pc, #220]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800447e:	430a      	orrs	r2, r1
 8004480:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2220      	movs	r2, #32
 8004488:	4013      	ands	r3, r2
 800448a:	d009      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800448c:	4b33      	ldr	r3, [pc, #204]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800448e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004490:	4a3b      	ldr	r2, [pc, #236]	@ (8004580 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004492:	4013      	ands	r3, r2
 8004494:	0019      	movs	r1, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68da      	ldr	r2, [r3, #12]
 800449a:	4b30      	ldr	r3, [pc, #192]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800449c:	430a      	orrs	r2, r1
 800449e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	2380      	movs	r3, #128	@ 0x80
 80044a6:	01db      	lsls	r3, r3, #7
 80044a8:	4013      	ands	r3, r2
 80044aa:	d015      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044ac:	4b2b      	ldr	r3, [pc, #172]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	0899      	lsrs	r1, r3, #2
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	69da      	ldr	r2, [r3, #28]
 80044b8:	4b28      	ldr	r3, [pc, #160]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044ba:	430a      	orrs	r2, r1
 80044bc:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	69da      	ldr	r2, [r3, #28]
 80044c2:	2380      	movs	r3, #128	@ 0x80
 80044c4:	05db      	lsls	r3, r3, #23
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d106      	bne.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80044ca:	4b24      	ldr	r3, [pc, #144]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044cc:	68da      	ldr	r2, [r3, #12]
 80044ce:	4b23      	ldr	r3, [pc, #140]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044d0:	2180      	movs	r1, #128	@ 0x80
 80044d2:	0249      	lsls	r1, r1, #9
 80044d4:	430a      	orrs	r2, r1
 80044d6:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	2380      	movs	r3, #128	@ 0x80
 80044de:	039b      	lsls	r3, r3, #14
 80044e0:	4013      	ands	r3, r2
 80044e2:	d016      	beq.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80044e4:	4b1d      	ldr	r3, [pc, #116]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044e8:	4a26      	ldr	r2, [pc, #152]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80044ea:	4013      	ands	r3, r2
 80044ec:	0019      	movs	r1, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a1a      	ldr	r2, [r3, #32]
 80044f2:	4b1a      	ldr	r3, [pc, #104]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044f4:	430a      	orrs	r2, r1
 80044f6:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a1a      	ldr	r2, [r3, #32]
 80044fc:	2380      	movs	r3, #128	@ 0x80
 80044fe:	03db      	lsls	r3, r3, #15
 8004500:	429a      	cmp	r2, r3
 8004502:	d106      	bne.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004504:	4b15      	ldr	r3, [pc, #84]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004506:	68da      	ldr	r2, [r3, #12]
 8004508:	4b14      	ldr	r3, [pc, #80]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800450a:	2180      	movs	r1, #128	@ 0x80
 800450c:	0449      	lsls	r1, r1, #17
 800450e:	430a      	orrs	r2, r1
 8004510:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	2380      	movs	r3, #128	@ 0x80
 8004518:	011b      	lsls	r3, r3, #4
 800451a:	4013      	ands	r3, r2
 800451c:	d016      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800451e:	4b0f      	ldr	r3, [pc, #60]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004522:	4a19      	ldr	r2, [pc, #100]	@ (8004588 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004524:	4013      	ands	r3, r2
 8004526:	0019      	movs	r1, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	691a      	ldr	r2, [r3, #16]
 800452c:	4b0b      	ldr	r3, [pc, #44]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800452e:	430a      	orrs	r2, r1
 8004530:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	691a      	ldr	r2, [r3, #16]
 8004536:	2380      	movs	r3, #128	@ 0x80
 8004538:	01db      	lsls	r3, r3, #7
 800453a:	429a      	cmp	r2, r3
 800453c:	d106      	bne.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800453e:	4b07      	ldr	r3, [pc, #28]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004540:	68da      	ldr	r2, [r3, #12]
 8004542:	4b06      	ldr	r3, [pc, #24]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004544:	2180      	movs	r1, #128	@ 0x80
 8004546:	0249      	lsls	r1, r1, #9
 8004548:	430a      	orrs	r2, r1
 800454a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800454c:	2312      	movs	r3, #18
 800454e:	18fb      	adds	r3, r7, r3
 8004550:	781b      	ldrb	r3, [r3, #0]
}
 8004552:	0018      	movs	r0, r3
 8004554:	46bd      	mov	sp, r7
 8004556:	b006      	add	sp, #24
 8004558:	bd80      	pop	{r7, pc}
 800455a:	46c0      	nop			@ (mov r8, r8)
 800455c:	40021000 	.word	0x40021000
 8004560:	40007000 	.word	0x40007000
 8004564:	fffffcff 	.word	0xfffffcff
 8004568:	fffeffff 	.word	0xfffeffff
 800456c:	00001388 	.word	0x00001388
 8004570:	efffffff 	.word	0xefffffff
 8004574:	fffff3ff 	.word	0xfffff3ff
 8004578:	fff3ffff 	.word	0xfff3ffff
 800457c:	ffcfffff 	.word	0xffcfffff
 8004580:	ffffcfff 	.word	0xffffcfff
 8004584:	ffbfffff 	.word	0xffbfffff
 8004588:	ffff3fff 	.word	0xffff3fff

0800458c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d101      	bne.n	800459e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e04a      	b.n	8004634 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	223d      	movs	r2, #61	@ 0x3d
 80045a2:	5c9b      	ldrb	r3, [r3, r2]
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d107      	bne.n	80045ba <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	223c      	movs	r2, #60	@ 0x3c
 80045ae:	2100      	movs	r1, #0
 80045b0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	0018      	movs	r0, r3
 80045b6:	f7fd f9df 	bl	8001978 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	223d      	movs	r2, #61	@ 0x3d
 80045be:	2102      	movs	r1, #2
 80045c0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	3304      	adds	r3, #4
 80045ca:	0019      	movs	r1, r3
 80045cc:	0010      	movs	r0, r2
 80045ce:	f000 fce7 	bl	8004fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2248      	movs	r2, #72	@ 0x48
 80045d6:	2101      	movs	r1, #1
 80045d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	223e      	movs	r2, #62	@ 0x3e
 80045de:	2101      	movs	r1, #1
 80045e0:	5499      	strb	r1, [r3, r2]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	223f      	movs	r2, #63	@ 0x3f
 80045e6:	2101      	movs	r1, #1
 80045e8:	5499      	strb	r1, [r3, r2]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2240      	movs	r2, #64	@ 0x40
 80045ee:	2101      	movs	r1, #1
 80045f0:	5499      	strb	r1, [r3, r2]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2241      	movs	r2, #65	@ 0x41
 80045f6:	2101      	movs	r1, #1
 80045f8:	5499      	strb	r1, [r3, r2]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2242      	movs	r2, #66	@ 0x42
 80045fe:	2101      	movs	r1, #1
 8004600:	5499      	strb	r1, [r3, r2]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2243      	movs	r2, #67	@ 0x43
 8004606:	2101      	movs	r1, #1
 8004608:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2244      	movs	r2, #68	@ 0x44
 800460e:	2101      	movs	r1, #1
 8004610:	5499      	strb	r1, [r3, r2]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2245      	movs	r2, #69	@ 0x45
 8004616:	2101      	movs	r1, #1
 8004618:	5499      	strb	r1, [r3, r2]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2246      	movs	r2, #70	@ 0x46
 800461e:	2101      	movs	r1, #1
 8004620:	5499      	strb	r1, [r3, r2]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2247      	movs	r2, #71	@ 0x47
 8004626:	2101      	movs	r1, #1
 8004628:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	223d      	movs	r2, #61	@ 0x3d
 800462e:	2101      	movs	r1, #1
 8004630:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	0018      	movs	r0, r3
 8004636:	46bd      	mov	sp, r7
 8004638:	b002      	add	sp, #8
 800463a:	bd80      	pop	{r7, pc}

0800463c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e04a      	b.n	80046e4 <HAL_TIM_OC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	223d      	movs	r2, #61	@ 0x3d
 8004652:	5c9b      	ldrb	r3, [r3, r2]
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d107      	bne.n	800466a <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	223c      	movs	r2, #60	@ 0x3c
 800465e:	2100      	movs	r1, #0
 8004660:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	0018      	movs	r0, r3
 8004666:	f000 f841 	bl	80046ec <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	223d      	movs	r2, #61	@ 0x3d
 800466e:	2102      	movs	r1, #2
 8004670:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	3304      	adds	r3, #4
 800467a:	0019      	movs	r1, r3
 800467c:	0010      	movs	r0, r2
 800467e:	f000 fc8f 	bl	8004fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2248      	movs	r2, #72	@ 0x48
 8004686:	2101      	movs	r1, #1
 8004688:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	223e      	movs	r2, #62	@ 0x3e
 800468e:	2101      	movs	r1, #1
 8004690:	5499      	strb	r1, [r3, r2]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	223f      	movs	r2, #63	@ 0x3f
 8004696:	2101      	movs	r1, #1
 8004698:	5499      	strb	r1, [r3, r2]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2240      	movs	r2, #64	@ 0x40
 800469e:	2101      	movs	r1, #1
 80046a0:	5499      	strb	r1, [r3, r2]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2241      	movs	r2, #65	@ 0x41
 80046a6:	2101      	movs	r1, #1
 80046a8:	5499      	strb	r1, [r3, r2]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2242      	movs	r2, #66	@ 0x42
 80046ae:	2101      	movs	r1, #1
 80046b0:	5499      	strb	r1, [r3, r2]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2243      	movs	r2, #67	@ 0x43
 80046b6:	2101      	movs	r1, #1
 80046b8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2244      	movs	r2, #68	@ 0x44
 80046be:	2101      	movs	r1, #1
 80046c0:	5499      	strb	r1, [r3, r2]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2245      	movs	r2, #69	@ 0x45
 80046c6:	2101      	movs	r1, #1
 80046c8:	5499      	strb	r1, [r3, r2]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2246      	movs	r2, #70	@ 0x46
 80046ce:	2101      	movs	r1, #1
 80046d0:	5499      	strb	r1, [r3, r2]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2247      	movs	r2, #71	@ 0x47
 80046d6:	2101      	movs	r1, #1
 80046d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	223d      	movs	r2, #61	@ 0x3d
 80046de:	2101      	movs	r1, #1
 80046e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	0018      	movs	r0, r3
 80046e6:	46bd      	mov	sp, r7
 80046e8:	b002      	add	sp, #8
 80046ea:	bd80      	pop	{r7, pc}

080046ec <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80046f4:	46c0      	nop			@ (mov r8, r8)
 80046f6:	46bd      	mov	sp, r7
 80046f8:	b002      	add	sp, #8
 80046fa:	bd80      	pop	{r7, pc}

080046fc <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d108      	bne.n	800471e <HAL_TIM_OC_Start+0x22>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	223e      	movs	r2, #62	@ 0x3e
 8004710:	5c9b      	ldrb	r3, [r3, r2]
 8004712:	b2db      	uxtb	r3, r3
 8004714:	3b01      	subs	r3, #1
 8004716:	1e5a      	subs	r2, r3, #1
 8004718:	4193      	sbcs	r3, r2
 800471a:	b2db      	uxtb	r3, r3
 800471c:	e037      	b.n	800478e <HAL_TIM_OC_Start+0x92>
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	2b04      	cmp	r3, #4
 8004722:	d108      	bne.n	8004736 <HAL_TIM_OC_Start+0x3a>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	223f      	movs	r2, #63	@ 0x3f
 8004728:	5c9b      	ldrb	r3, [r3, r2]
 800472a:	b2db      	uxtb	r3, r3
 800472c:	3b01      	subs	r3, #1
 800472e:	1e5a      	subs	r2, r3, #1
 8004730:	4193      	sbcs	r3, r2
 8004732:	b2db      	uxtb	r3, r3
 8004734:	e02b      	b.n	800478e <HAL_TIM_OC_Start+0x92>
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	2b08      	cmp	r3, #8
 800473a:	d108      	bne.n	800474e <HAL_TIM_OC_Start+0x52>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2240      	movs	r2, #64	@ 0x40
 8004740:	5c9b      	ldrb	r3, [r3, r2]
 8004742:	b2db      	uxtb	r3, r3
 8004744:	3b01      	subs	r3, #1
 8004746:	1e5a      	subs	r2, r3, #1
 8004748:	4193      	sbcs	r3, r2
 800474a:	b2db      	uxtb	r3, r3
 800474c:	e01f      	b.n	800478e <HAL_TIM_OC_Start+0x92>
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	2b0c      	cmp	r3, #12
 8004752:	d108      	bne.n	8004766 <HAL_TIM_OC_Start+0x6a>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2241      	movs	r2, #65	@ 0x41
 8004758:	5c9b      	ldrb	r3, [r3, r2]
 800475a:	b2db      	uxtb	r3, r3
 800475c:	3b01      	subs	r3, #1
 800475e:	1e5a      	subs	r2, r3, #1
 8004760:	4193      	sbcs	r3, r2
 8004762:	b2db      	uxtb	r3, r3
 8004764:	e013      	b.n	800478e <HAL_TIM_OC_Start+0x92>
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	2b10      	cmp	r3, #16
 800476a:	d108      	bne.n	800477e <HAL_TIM_OC_Start+0x82>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2242      	movs	r2, #66	@ 0x42
 8004770:	5c9b      	ldrb	r3, [r3, r2]
 8004772:	b2db      	uxtb	r3, r3
 8004774:	3b01      	subs	r3, #1
 8004776:	1e5a      	subs	r2, r3, #1
 8004778:	4193      	sbcs	r3, r2
 800477a:	b2db      	uxtb	r3, r3
 800477c:	e007      	b.n	800478e <HAL_TIM_OC_Start+0x92>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2243      	movs	r2, #67	@ 0x43
 8004782:	5c9b      	ldrb	r3, [r3, r2]
 8004784:	b2db      	uxtb	r3, r3
 8004786:	3b01      	subs	r3, #1
 8004788:	1e5a      	subs	r2, r3, #1
 800478a:	4193      	sbcs	r3, r2
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <HAL_TIM_OC_Start+0x9a>
  {
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e081      	b.n	800489a <HAL_TIM_OC_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d104      	bne.n	80047a6 <HAL_TIM_OC_Start+0xaa>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	223e      	movs	r2, #62	@ 0x3e
 80047a0:	2102      	movs	r1, #2
 80047a2:	5499      	strb	r1, [r3, r2]
 80047a4:	e023      	b.n	80047ee <HAL_TIM_OC_Start+0xf2>
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	2b04      	cmp	r3, #4
 80047aa:	d104      	bne.n	80047b6 <HAL_TIM_OC_Start+0xba>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	223f      	movs	r2, #63	@ 0x3f
 80047b0:	2102      	movs	r1, #2
 80047b2:	5499      	strb	r1, [r3, r2]
 80047b4:	e01b      	b.n	80047ee <HAL_TIM_OC_Start+0xf2>
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	2b08      	cmp	r3, #8
 80047ba:	d104      	bne.n	80047c6 <HAL_TIM_OC_Start+0xca>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2240      	movs	r2, #64	@ 0x40
 80047c0:	2102      	movs	r1, #2
 80047c2:	5499      	strb	r1, [r3, r2]
 80047c4:	e013      	b.n	80047ee <HAL_TIM_OC_Start+0xf2>
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	2b0c      	cmp	r3, #12
 80047ca:	d104      	bne.n	80047d6 <HAL_TIM_OC_Start+0xda>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2241      	movs	r2, #65	@ 0x41
 80047d0:	2102      	movs	r1, #2
 80047d2:	5499      	strb	r1, [r3, r2]
 80047d4:	e00b      	b.n	80047ee <HAL_TIM_OC_Start+0xf2>
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	2b10      	cmp	r3, #16
 80047da:	d104      	bne.n	80047e6 <HAL_TIM_OC_Start+0xea>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2242      	movs	r2, #66	@ 0x42
 80047e0:	2102      	movs	r1, #2
 80047e2:	5499      	strb	r1, [r3, r2]
 80047e4:	e003      	b.n	80047ee <HAL_TIM_OC_Start+0xf2>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2243      	movs	r2, #67	@ 0x43
 80047ea:	2102      	movs	r1, #2
 80047ec:	5499      	strb	r1, [r3, r2]

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	6839      	ldr	r1, [r7, #0]
 80047f4:	2201      	movs	r2, #1
 80047f6:	0018      	movs	r0, r3
 80047f8:	f000 ff8e 	bl	8005718 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a28      	ldr	r2, [pc, #160]	@ (80048a4 <HAL_TIM_OC_Start+0x1a8>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d009      	beq.n	800481a <HAL_TIM_OC_Start+0x11e>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a27      	ldr	r2, [pc, #156]	@ (80048a8 <HAL_TIM_OC_Start+0x1ac>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d004      	beq.n	800481a <HAL_TIM_OC_Start+0x11e>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a25      	ldr	r2, [pc, #148]	@ (80048ac <HAL_TIM_OC_Start+0x1b0>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d101      	bne.n	800481e <HAL_TIM_OC_Start+0x122>
 800481a:	2301      	movs	r3, #1
 800481c:	e000      	b.n	8004820 <HAL_TIM_OC_Start+0x124>
 800481e:	2300      	movs	r3, #0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d008      	beq.n	8004836 <HAL_TIM_OC_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2180      	movs	r1, #128	@ 0x80
 8004830:	0209      	lsls	r1, r1, #8
 8004832:	430a      	orrs	r2, r1
 8004834:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a1a      	ldr	r2, [pc, #104]	@ (80048a4 <HAL_TIM_OC_Start+0x1a8>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d00a      	beq.n	8004856 <HAL_TIM_OC_Start+0x15a>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	2380      	movs	r3, #128	@ 0x80
 8004846:	05db      	lsls	r3, r3, #23
 8004848:	429a      	cmp	r2, r3
 800484a:	d004      	beq.n	8004856 <HAL_TIM_OC_Start+0x15a>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a17      	ldr	r2, [pc, #92]	@ (80048b0 <HAL_TIM_OC_Start+0x1b4>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d116      	bne.n	8004884 <HAL_TIM_OC_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	4a15      	ldr	r2, [pc, #84]	@ (80048b4 <HAL_TIM_OC_Start+0x1b8>)
 800485e:	4013      	ands	r3, r2
 8004860:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2b06      	cmp	r3, #6
 8004866:	d016      	beq.n	8004896 <HAL_TIM_OC_Start+0x19a>
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	2380      	movs	r3, #128	@ 0x80
 800486c:	025b      	lsls	r3, r3, #9
 800486e:	429a      	cmp	r2, r3
 8004870:	d011      	beq.n	8004896 <HAL_TIM_OC_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2101      	movs	r1, #1
 800487e:	430a      	orrs	r2, r1
 8004880:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004882:	e008      	b.n	8004896 <HAL_TIM_OC_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2101      	movs	r1, #1
 8004890:	430a      	orrs	r2, r1
 8004892:	601a      	str	r2, [r3, #0]
 8004894:	e000      	b.n	8004898 <HAL_TIM_OC_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004896:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	0018      	movs	r0, r3
 800489c:	46bd      	mov	sp, r7
 800489e:	b004      	add	sp, #16
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	46c0      	nop			@ (mov r8, r8)
 80048a4:	40012c00 	.word	0x40012c00
 80048a8:	40014400 	.word	0x40014400
 80048ac:	40014800 	.word	0x40014800
 80048b0:	40000400 	.word	0x40000400
 80048b4:	00010007 	.word	0x00010007

080048b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d101      	bne.n	80048ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e04a      	b.n	8004960 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	223d      	movs	r2, #61	@ 0x3d
 80048ce:	5c9b      	ldrb	r3, [r3, r2]
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d107      	bne.n	80048e6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	223c      	movs	r2, #60	@ 0x3c
 80048da:	2100      	movs	r1, #0
 80048dc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	0018      	movs	r0, r3
 80048e2:	f000 f841 	bl	8004968 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	223d      	movs	r2, #61	@ 0x3d
 80048ea:	2102      	movs	r1, #2
 80048ec:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	3304      	adds	r3, #4
 80048f6:	0019      	movs	r1, r3
 80048f8:	0010      	movs	r0, r2
 80048fa:	f000 fb51 	bl	8004fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2248      	movs	r2, #72	@ 0x48
 8004902:	2101      	movs	r1, #1
 8004904:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	223e      	movs	r2, #62	@ 0x3e
 800490a:	2101      	movs	r1, #1
 800490c:	5499      	strb	r1, [r3, r2]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	223f      	movs	r2, #63	@ 0x3f
 8004912:	2101      	movs	r1, #1
 8004914:	5499      	strb	r1, [r3, r2]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2240      	movs	r2, #64	@ 0x40
 800491a:	2101      	movs	r1, #1
 800491c:	5499      	strb	r1, [r3, r2]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2241      	movs	r2, #65	@ 0x41
 8004922:	2101      	movs	r1, #1
 8004924:	5499      	strb	r1, [r3, r2]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2242      	movs	r2, #66	@ 0x42
 800492a:	2101      	movs	r1, #1
 800492c:	5499      	strb	r1, [r3, r2]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2243      	movs	r2, #67	@ 0x43
 8004932:	2101      	movs	r1, #1
 8004934:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2244      	movs	r2, #68	@ 0x44
 800493a:	2101      	movs	r1, #1
 800493c:	5499      	strb	r1, [r3, r2]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2245      	movs	r2, #69	@ 0x45
 8004942:	2101      	movs	r1, #1
 8004944:	5499      	strb	r1, [r3, r2]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2246      	movs	r2, #70	@ 0x46
 800494a:	2101      	movs	r1, #1
 800494c:	5499      	strb	r1, [r3, r2]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2247      	movs	r2, #71	@ 0x47
 8004952:	2101      	movs	r1, #1
 8004954:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	223d      	movs	r2, #61	@ 0x3d
 800495a:	2101      	movs	r1, #1
 800495c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	0018      	movs	r0, r3
 8004962:	46bd      	mov	sp, r7
 8004964:	b002      	add	sp, #8
 8004966:	bd80      	pop	{r7, pc}

08004968 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004970:	46c0      	nop			@ (mov r8, r8)
 8004972:	46bd      	mov	sp, r7
 8004974:	b002      	add	sp, #8
 8004976:	bd80      	pop	{r7, pc}

08004978 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d108      	bne.n	800499a <HAL_TIM_PWM_Start+0x22>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	223e      	movs	r2, #62	@ 0x3e
 800498c:	5c9b      	ldrb	r3, [r3, r2]
 800498e:	b2db      	uxtb	r3, r3
 8004990:	3b01      	subs	r3, #1
 8004992:	1e5a      	subs	r2, r3, #1
 8004994:	4193      	sbcs	r3, r2
 8004996:	b2db      	uxtb	r3, r3
 8004998:	e037      	b.n	8004a0a <HAL_TIM_PWM_Start+0x92>
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	2b04      	cmp	r3, #4
 800499e:	d108      	bne.n	80049b2 <HAL_TIM_PWM_Start+0x3a>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	223f      	movs	r2, #63	@ 0x3f
 80049a4:	5c9b      	ldrb	r3, [r3, r2]
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	3b01      	subs	r3, #1
 80049aa:	1e5a      	subs	r2, r3, #1
 80049ac:	4193      	sbcs	r3, r2
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	e02b      	b.n	8004a0a <HAL_TIM_PWM_Start+0x92>
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	2b08      	cmp	r3, #8
 80049b6:	d108      	bne.n	80049ca <HAL_TIM_PWM_Start+0x52>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2240      	movs	r2, #64	@ 0x40
 80049bc:	5c9b      	ldrb	r3, [r3, r2]
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	3b01      	subs	r3, #1
 80049c2:	1e5a      	subs	r2, r3, #1
 80049c4:	4193      	sbcs	r3, r2
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	e01f      	b.n	8004a0a <HAL_TIM_PWM_Start+0x92>
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	2b0c      	cmp	r3, #12
 80049ce:	d108      	bne.n	80049e2 <HAL_TIM_PWM_Start+0x6a>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2241      	movs	r2, #65	@ 0x41
 80049d4:	5c9b      	ldrb	r3, [r3, r2]
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	3b01      	subs	r3, #1
 80049da:	1e5a      	subs	r2, r3, #1
 80049dc:	4193      	sbcs	r3, r2
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	e013      	b.n	8004a0a <HAL_TIM_PWM_Start+0x92>
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	2b10      	cmp	r3, #16
 80049e6:	d108      	bne.n	80049fa <HAL_TIM_PWM_Start+0x82>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2242      	movs	r2, #66	@ 0x42
 80049ec:	5c9b      	ldrb	r3, [r3, r2]
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	3b01      	subs	r3, #1
 80049f2:	1e5a      	subs	r2, r3, #1
 80049f4:	4193      	sbcs	r3, r2
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	e007      	b.n	8004a0a <HAL_TIM_PWM_Start+0x92>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2243      	movs	r2, #67	@ 0x43
 80049fe:	5c9b      	ldrb	r3, [r3, r2]
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	3b01      	subs	r3, #1
 8004a04:	1e5a      	subs	r2, r3, #1
 8004a06:	4193      	sbcs	r3, r2
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d001      	beq.n	8004a12 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e081      	b.n	8004b16 <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d104      	bne.n	8004a22 <HAL_TIM_PWM_Start+0xaa>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	223e      	movs	r2, #62	@ 0x3e
 8004a1c:	2102      	movs	r1, #2
 8004a1e:	5499      	strb	r1, [r3, r2]
 8004a20:	e023      	b.n	8004a6a <HAL_TIM_PWM_Start+0xf2>
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	2b04      	cmp	r3, #4
 8004a26:	d104      	bne.n	8004a32 <HAL_TIM_PWM_Start+0xba>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	223f      	movs	r2, #63	@ 0x3f
 8004a2c:	2102      	movs	r1, #2
 8004a2e:	5499      	strb	r1, [r3, r2]
 8004a30:	e01b      	b.n	8004a6a <HAL_TIM_PWM_Start+0xf2>
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	2b08      	cmp	r3, #8
 8004a36:	d104      	bne.n	8004a42 <HAL_TIM_PWM_Start+0xca>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2240      	movs	r2, #64	@ 0x40
 8004a3c:	2102      	movs	r1, #2
 8004a3e:	5499      	strb	r1, [r3, r2]
 8004a40:	e013      	b.n	8004a6a <HAL_TIM_PWM_Start+0xf2>
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	2b0c      	cmp	r3, #12
 8004a46:	d104      	bne.n	8004a52 <HAL_TIM_PWM_Start+0xda>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2241      	movs	r2, #65	@ 0x41
 8004a4c:	2102      	movs	r1, #2
 8004a4e:	5499      	strb	r1, [r3, r2]
 8004a50:	e00b      	b.n	8004a6a <HAL_TIM_PWM_Start+0xf2>
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	2b10      	cmp	r3, #16
 8004a56:	d104      	bne.n	8004a62 <HAL_TIM_PWM_Start+0xea>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2242      	movs	r2, #66	@ 0x42
 8004a5c:	2102      	movs	r1, #2
 8004a5e:	5499      	strb	r1, [r3, r2]
 8004a60:	e003      	b.n	8004a6a <HAL_TIM_PWM_Start+0xf2>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2243      	movs	r2, #67	@ 0x43
 8004a66:	2102      	movs	r1, #2
 8004a68:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	6839      	ldr	r1, [r7, #0]
 8004a70:	2201      	movs	r2, #1
 8004a72:	0018      	movs	r0, r3
 8004a74:	f000 fe50 	bl	8005718 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a28      	ldr	r2, [pc, #160]	@ (8004b20 <HAL_TIM_PWM_Start+0x1a8>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d009      	beq.n	8004a96 <HAL_TIM_PWM_Start+0x11e>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a27      	ldr	r2, [pc, #156]	@ (8004b24 <HAL_TIM_PWM_Start+0x1ac>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d004      	beq.n	8004a96 <HAL_TIM_PWM_Start+0x11e>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a25      	ldr	r2, [pc, #148]	@ (8004b28 <HAL_TIM_PWM_Start+0x1b0>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d101      	bne.n	8004a9a <HAL_TIM_PWM_Start+0x122>
 8004a96:	2301      	movs	r3, #1
 8004a98:	e000      	b.n	8004a9c <HAL_TIM_PWM_Start+0x124>
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d008      	beq.n	8004ab2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2180      	movs	r1, #128	@ 0x80
 8004aac:	0209      	lsls	r1, r1, #8
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a1a      	ldr	r2, [pc, #104]	@ (8004b20 <HAL_TIM_PWM_Start+0x1a8>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d00a      	beq.n	8004ad2 <HAL_TIM_PWM_Start+0x15a>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	2380      	movs	r3, #128	@ 0x80
 8004ac2:	05db      	lsls	r3, r3, #23
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d004      	beq.n	8004ad2 <HAL_TIM_PWM_Start+0x15a>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a17      	ldr	r2, [pc, #92]	@ (8004b2c <HAL_TIM_PWM_Start+0x1b4>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d116      	bne.n	8004b00 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	4a15      	ldr	r2, [pc, #84]	@ (8004b30 <HAL_TIM_PWM_Start+0x1b8>)
 8004ada:	4013      	ands	r3, r2
 8004adc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2b06      	cmp	r3, #6
 8004ae2:	d016      	beq.n	8004b12 <HAL_TIM_PWM_Start+0x19a>
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	2380      	movs	r3, #128	@ 0x80
 8004ae8:	025b      	lsls	r3, r3, #9
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d011      	beq.n	8004b12 <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2101      	movs	r1, #1
 8004afa:	430a      	orrs	r2, r1
 8004afc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004afe:	e008      	b.n	8004b12 <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2101      	movs	r1, #1
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	601a      	str	r2, [r3, #0]
 8004b10:	e000      	b.n	8004b14 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b12:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	0018      	movs	r0, r3
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	b004      	add	sp, #16
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	46c0      	nop			@ (mov r8, r8)
 8004b20:	40012c00 	.word	0x40012c00
 8004b24:	40014400 	.word	0x40014400
 8004b28:	40014800 	.word	0x40014800
 8004b2c:	40000400 	.word	0x40000400
 8004b30:	00010007 	.word	0x00010007

08004b34 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b086      	sub	sp, #24
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b40:	2317      	movs	r3, #23
 8004b42:	18fb      	adds	r3, r7, r3
 8004b44:	2200      	movs	r2, #0
 8004b46:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	223c      	movs	r2, #60	@ 0x3c
 8004b4c:	5c9b      	ldrb	r3, [r3, r2]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d101      	bne.n	8004b56 <HAL_TIM_OC_ConfigChannel+0x22>
 8004b52:	2302      	movs	r3, #2
 8004b54:	e048      	b.n	8004be8 <HAL_TIM_OC_ConfigChannel+0xb4>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	223c      	movs	r2, #60	@ 0x3c
 8004b5a:	2101      	movs	r1, #1
 8004b5c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2b14      	cmp	r3, #20
 8004b62:	d835      	bhi.n	8004bd0 <HAL_TIM_OC_ConfigChannel+0x9c>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	009a      	lsls	r2, r3, #2
 8004b68:	4b21      	ldr	r3, [pc, #132]	@ (8004bf0 <HAL_TIM_OC_ConfigChannel+0xbc>)
 8004b6a:	18d3      	adds	r3, r2, r3
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68ba      	ldr	r2, [r7, #8]
 8004b76:	0011      	movs	r1, r2
 8004b78:	0018      	movs	r0, r3
 8004b7a:	f000 fa95 	bl	80050a8 <TIM_OC1_SetConfig>
      break;
 8004b7e:	e02c      	b.n	8004bda <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68ba      	ldr	r2, [r7, #8]
 8004b86:	0011      	movs	r1, r2
 8004b88:	0018      	movs	r0, r3
 8004b8a:	f000 fb0d 	bl	80051a8 <TIM_OC2_SetConfig>
      break;
 8004b8e:	e024      	b.n	8004bda <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68ba      	ldr	r2, [r7, #8]
 8004b96:	0011      	movs	r1, r2
 8004b98:	0018      	movs	r0, r3
 8004b9a:	f000 fb83 	bl	80052a4 <TIM_OC3_SetConfig>
      break;
 8004b9e:	e01c      	b.n	8004bda <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68ba      	ldr	r2, [r7, #8]
 8004ba6:	0011      	movs	r1, r2
 8004ba8:	0018      	movs	r0, r3
 8004baa:	f000 fbfd 	bl	80053a8 <TIM_OC4_SetConfig>
      break;
 8004bae:	e014      	b.n	8004bda <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68ba      	ldr	r2, [r7, #8]
 8004bb6:	0011      	movs	r1, r2
 8004bb8:	0018      	movs	r0, r3
 8004bba:	f000 fc59 	bl	8005470 <TIM_OC5_SetConfig>
      break;
 8004bbe:	e00c      	b.n	8004bda <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68ba      	ldr	r2, [r7, #8]
 8004bc6:	0011      	movs	r1, r2
 8004bc8:	0018      	movs	r0, r3
 8004bca:	f000 fcab 	bl	8005524 <TIM_OC6_SetConfig>
      break;
 8004bce:	e004      	b.n	8004bda <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004bd0:	2317      	movs	r3, #23
 8004bd2:	18fb      	adds	r3, r7, r3
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	701a      	strb	r2, [r3, #0]
      break;
 8004bd8:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	223c      	movs	r2, #60	@ 0x3c
 8004bde:	2100      	movs	r1, #0
 8004be0:	5499      	strb	r1, [r3, r2]

  return status;
 8004be2:	2317      	movs	r3, #23
 8004be4:	18fb      	adds	r3, r7, r3
 8004be6:	781b      	ldrb	r3, [r3, #0]
}
 8004be8:	0018      	movs	r0, r3
 8004bea:	46bd      	mov	sp, r7
 8004bec:	b006      	add	sp, #24
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	08006b60 	.word	0x08006b60

08004bf4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b086      	sub	sp, #24
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c00:	2317      	movs	r3, #23
 8004c02:	18fb      	adds	r3, r7, r3
 8004c04:	2200      	movs	r2, #0
 8004c06:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	223c      	movs	r2, #60	@ 0x3c
 8004c0c:	5c9b      	ldrb	r3, [r3, r2]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d101      	bne.n	8004c16 <HAL_TIM_PWM_ConfigChannel+0x22>
 8004c12:	2302      	movs	r3, #2
 8004c14:	e0e5      	b.n	8004de2 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	223c      	movs	r2, #60	@ 0x3c
 8004c1a:	2101      	movs	r1, #1
 8004c1c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2b14      	cmp	r3, #20
 8004c22:	d900      	bls.n	8004c26 <HAL_TIM_PWM_ConfigChannel+0x32>
 8004c24:	e0d1      	b.n	8004dca <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	009a      	lsls	r2, r3, #2
 8004c2a:	4b70      	ldr	r3, [pc, #448]	@ (8004dec <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8004c2c:	18d3      	adds	r3, r2, r3
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68ba      	ldr	r2, [r7, #8]
 8004c38:	0011      	movs	r1, r2
 8004c3a:	0018      	movs	r0, r3
 8004c3c:	f000 fa34 	bl	80050a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	699a      	ldr	r2, [r3, #24]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2108      	movs	r1, #8
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	699a      	ldr	r2, [r3, #24]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2104      	movs	r1, #4
 8004c5c:	438a      	bics	r2, r1
 8004c5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	6999      	ldr	r1, [r3, #24]
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	691a      	ldr	r2, [r3, #16]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	619a      	str	r2, [r3, #24]
      break;
 8004c72:	e0af      	b.n	8004dd4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	0011      	movs	r1, r2
 8004c7c:	0018      	movs	r0, r3
 8004c7e:	f000 fa93 	bl	80051a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	699a      	ldr	r2, [r3, #24]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2180      	movs	r1, #128	@ 0x80
 8004c8e:	0109      	lsls	r1, r1, #4
 8004c90:	430a      	orrs	r2, r1
 8004c92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	699a      	ldr	r2, [r3, #24]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4954      	ldr	r1, [pc, #336]	@ (8004df0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004ca0:	400a      	ands	r2, r1
 8004ca2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6999      	ldr	r1, [r3, #24]
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	021a      	lsls	r2, r3, #8
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	430a      	orrs	r2, r1
 8004cb6:	619a      	str	r2, [r3, #24]
      break;
 8004cb8:	e08c      	b.n	8004dd4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68ba      	ldr	r2, [r7, #8]
 8004cc0:	0011      	movs	r1, r2
 8004cc2:	0018      	movs	r0, r3
 8004cc4:	f000 faee 	bl	80052a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	69da      	ldr	r2, [r3, #28]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2108      	movs	r1, #8
 8004cd4:	430a      	orrs	r2, r1
 8004cd6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	69da      	ldr	r2, [r3, #28]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2104      	movs	r1, #4
 8004ce4:	438a      	bics	r2, r1
 8004ce6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	69d9      	ldr	r1, [r3, #28]
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	691a      	ldr	r2, [r3, #16]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	61da      	str	r2, [r3, #28]
      break;
 8004cfa:	e06b      	b.n	8004dd4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68ba      	ldr	r2, [r7, #8]
 8004d02:	0011      	movs	r1, r2
 8004d04:	0018      	movs	r0, r3
 8004d06:	f000 fb4f 	bl	80053a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	69da      	ldr	r2, [r3, #28]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2180      	movs	r1, #128	@ 0x80
 8004d16:	0109      	lsls	r1, r1, #4
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	69da      	ldr	r2, [r3, #28]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4932      	ldr	r1, [pc, #200]	@ (8004df0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004d28:	400a      	ands	r2, r1
 8004d2a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	69d9      	ldr	r1, [r3, #28]
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	021a      	lsls	r2, r3, #8
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	61da      	str	r2, [r3, #28]
      break;
 8004d40:	e048      	b.n	8004dd4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68ba      	ldr	r2, [r7, #8]
 8004d48:	0011      	movs	r1, r2
 8004d4a:	0018      	movs	r0, r3
 8004d4c:	f000 fb90 	bl	8005470 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2108      	movs	r1, #8
 8004d5c:	430a      	orrs	r2, r1
 8004d5e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2104      	movs	r1, #4
 8004d6c:	438a      	bics	r2, r1
 8004d6e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	691a      	ldr	r2, [r3, #16]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	430a      	orrs	r2, r1
 8004d80:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004d82:	e027      	b.n	8004dd4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68ba      	ldr	r2, [r7, #8]
 8004d8a:	0011      	movs	r1, r2
 8004d8c:	0018      	movs	r0, r3
 8004d8e:	f000 fbc9 	bl	8005524 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2180      	movs	r1, #128	@ 0x80
 8004d9e:	0109      	lsls	r1, r1, #4
 8004da0:	430a      	orrs	r2, r1
 8004da2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4910      	ldr	r1, [pc, #64]	@ (8004df0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004db0:	400a      	ands	r2, r1
 8004db2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	021a      	lsls	r2, r3, #8
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004dc8:	e004      	b.n	8004dd4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8004dca:	2317      	movs	r3, #23
 8004dcc:	18fb      	adds	r3, r7, r3
 8004dce:	2201      	movs	r2, #1
 8004dd0:	701a      	strb	r2, [r3, #0]
      break;
 8004dd2:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	223c      	movs	r2, #60	@ 0x3c
 8004dd8:	2100      	movs	r1, #0
 8004dda:	5499      	strb	r1, [r3, r2]

  return status;
 8004ddc:	2317      	movs	r3, #23
 8004dde:	18fb      	adds	r3, r7, r3
 8004de0:	781b      	ldrb	r3, [r3, #0]
}
 8004de2:	0018      	movs	r0, r3
 8004de4:	46bd      	mov	sp, r7
 8004de6:	b006      	add	sp, #24
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	46c0      	nop			@ (mov r8, r8)
 8004dec:	08006bb4 	.word	0x08006bb4
 8004df0:	fffffbff 	.word	0xfffffbff

08004df4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dfe:	230f      	movs	r3, #15
 8004e00:	18fb      	adds	r3, r7, r3
 8004e02:	2200      	movs	r2, #0
 8004e04:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	223c      	movs	r2, #60	@ 0x3c
 8004e0a:	5c9b      	ldrb	r3, [r3, r2]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d101      	bne.n	8004e14 <HAL_TIM_ConfigClockSource+0x20>
 8004e10:	2302      	movs	r3, #2
 8004e12:	e0bc      	b.n	8004f8e <HAL_TIM_ConfigClockSource+0x19a>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	223c      	movs	r2, #60	@ 0x3c
 8004e18:	2101      	movs	r1, #1
 8004e1a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	223d      	movs	r2, #61	@ 0x3d
 8004e20:	2102      	movs	r1, #2
 8004e22:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	4a5a      	ldr	r2, [pc, #360]	@ (8004f98 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004e30:	4013      	ands	r3, r2
 8004e32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	4a59      	ldr	r2, [pc, #356]	@ (8004f9c <HAL_TIM_ConfigClockSource+0x1a8>)
 8004e38:	4013      	ands	r3, r2
 8004e3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68ba      	ldr	r2, [r7, #8]
 8004e42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2280      	movs	r2, #128	@ 0x80
 8004e4a:	0192      	lsls	r2, r2, #6
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d040      	beq.n	8004ed2 <HAL_TIM_ConfigClockSource+0xde>
 8004e50:	2280      	movs	r2, #128	@ 0x80
 8004e52:	0192      	lsls	r2, r2, #6
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d900      	bls.n	8004e5a <HAL_TIM_ConfigClockSource+0x66>
 8004e58:	e088      	b.n	8004f6c <HAL_TIM_ConfigClockSource+0x178>
 8004e5a:	2280      	movs	r2, #128	@ 0x80
 8004e5c:	0152      	lsls	r2, r2, #5
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d100      	bne.n	8004e64 <HAL_TIM_ConfigClockSource+0x70>
 8004e62:	e088      	b.n	8004f76 <HAL_TIM_ConfigClockSource+0x182>
 8004e64:	2280      	movs	r2, #128	@ 0x80
 8004e66:	0152      	lsls	r2, r2, #5
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d900      	bls.n	8004e6e <HAL_TIM_ConfigClockSource+0x7a>
 8004e6c:	e07e      	b.n	8004f6c <HAL_TIM_ConfigClockSource+0x178>
 8004e6e:	2b70      	cmp	r3, #112	@ 0x70
 8004e70:	d018      	beq.n	8004ea4 <HAL_TIM_ConfigClockSource+0xb0>
 8004e72:	d900      	bls.n	8004e76 <HAL_TIM_ConfigClockSource+0x82>
 8004e74:	e07a      	b.n	8004f6c <HAL_TIM_ConfigClockSource+0x178>
 8004e76:	2b60      	cmp	r3, #96	@ 0x60
 8004e78:	d04f      	beq.n	8004f1a <HAL_TIM_ConfigClockSource+0x126>
 8004e7a:	d900      	bls.n	8004e7e <HAL_TIM_ConfigClockSource+0x8a>
 8004e7c:	e076      	b.n	8004f6c <HAL_TIM_ConfigClockSource+0x178>
 8004e7e:	2b50      	cmp	r3, #80	@ 0x50
 8004e80:	d03b      	beq.n	8004efa <HAL_TIM_ConfigClockSource+0x106>
 8004e82:	d900      	bls.n	8004e86 <HAL_TIM_ConfigClockSource+0x92>
 8004e84:	e072      	b.n	8004f6c <HAL_TIM_ConfigClockSource+0x178>
 8004e86:	2b40      	cmp	r3, #64	@ 0x40
 8004e88:	d057      	beq.n	8004f3a <HAL_TIM_ConfigClockSource+0x146>
 8004e8a:	d900      	bls.n	8004e8e <HAL_TIM_ConfigClockSource+0x9a>
 8004e8c:	e06e      	b.n	8004f6c <HAL_TIM_ConfigClockSource+0x178>
 8004e8e:	2b30      	cmp	r3, #48	@ 0x30
 8004e90:	d063      	beq.n	8004f5a <HAL_TIM_ConfigClockSource+0x166>
 8004e92:	d86b      	bhi.n	8004f6c <HAL_TIM_ConfigClockSource+0x178>
 8004e94:	2b20      	cmp	r3, #32
 8004e96:	d060      	beq.n	8004f5a <HAL_TIM_ConfigClockSource+0x166>
 8004e98:	d868      	bhi.n	8004f6c <HAL_TIM_ConfigClockSource+0x178>
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d05d      	beq.n	8004f5a <HAL_TIM_ConfigClockSource+0x166>
 8004e9e:	2b10      	cmp	r3, #16
 8004ea0:	d05b      	beq.n	8004f5a <HAL_TIM_ConfigClockSource+0x166>
 8004ea2:	e063      	b.n	8004f6c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004eb4:	f000 fc10 	bl	80056d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	2277      	movs	r2, #119	@ 0x77
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68ba      	ldr	r2, [r7, #8]
 8004ece:	609a      	str	r2, [r3, #8]
      break;
 8004ed0:	e052      	b.n	8004f78 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ee2:	f000 fbf9 	bl	80056d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	689a      	ldr	r2, [r3, #8]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2180      	movs	r1, #128	@ 0x80
 8004ef2:	01c9      	lsls	r1, r1, #7
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	609a      	str	r2, [r3, #8]
      break;
 8004ef8:	e03e      	b.n	8004f78 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f06:	001a      	movs	r2, r3
 8004f08:	f000 fb6a 	bl	80055e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2150      	movs	r1, #80	@ 0x50
 8004f12:	0018      	movs	r0, r3
 8004f14:	f000 fbc4 	bl	80056a0 <TIM_ITRx_SetConfig>
      break;
 8004f18:	e02e      	b.n	8004f78 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f26:	001a      	movs	r2, r3
 8004f28:	f000 fb88 	bl	800563c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2160      	movs	r1, #96	@ 0x60
 8004f32:	0018      	movs	r0, r3
 8004f34:	f000 fbb4 	bl	80056a0 <TIM_ITRx_SetConfig>
      break;
 8004f38:	e01e      	b.n	8004f78 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f46:	001a      	movs	r2, r3
 8004f48:	f000 fb4a 	bl	80055e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2140      	movs	r1, #64	@ 0x40
 8004f52:	0018      	movs	r0, r3
 8004f54:	f000 fba4 	bl	80056a0 <TIM_ITRx_SetConfig>
      break;
 8004f58:	e00e      	b.n	8004f78 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	0019      	movs	r1, r3
 8004f64:	0010      	movs	r0, r2
 8004f66:	f000 fb9b 	bl	80056a0 <TIM_ITRx_SetConfig>
      break;
 8004f6a:	e005      	b.n	8004f78 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004f6c:	230f      	movs	r3, #15
 8004f6e:	18fb      	adds	r3, r7, r3
 8004f70:	2201      	movs	r2, #1
 8004f72:	701a      	strb	r2, [r3, #0]
      break;
 8004f74:	e000      	b.n	8004f78 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004f76:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	223d      	movs	r2, #61	@ 0x3d
 8004f7c:	2101      	movs	r1, #1
 8004f7e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	223c      	movs	r2, #60	@ 0x3c
 8004f84:	2100      	movs	r1, #0
 8004f86:	5499      	strb	r1, [r3, r2]

  return status;
 8004f88:	230f      	movs	r3, #15
 8004f8a:	18fb      	adds	r3, r7, r3
 8004f8c:	781b      	ldrb	r3, [r3, #0]
}
 8004f8e:	0018      	movs	r0, r3
 8004f90:	46bd      	mov	sp, r7
 8004f92:	b004      	add	sp, #16
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	46c0      	nop			@ (mov r8, r8)
 8004f98:	ffceff88 	.word	0xffceff88
 8004f9c:	ffff00ff 	.word	0xffff00ff

08004fa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a37      	ldr	r2, [pc, #220]	@ (8005090 <TIM_Base_SetConfig+0xf0>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d008      	beq.n	8004fca <TIM_Base_SetConfig+0x2a>
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	2380      	movs	r3, #128	@ 0x80
 8004fbc:	05db      	lsls	r3, r3, #23
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d003      	beq.n	8004fca <TIM_Base_SetConfig+0x2a>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a33      	ldr	r2, [pc, #204]	@ (8005094 <TIM_Base_SetConfig+0xf4>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d108      	bne.n	8004fdc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2270      	movs	r2, #112	@ 0x70
 8004fce:	4393      	bics	r3, r2
 8004fd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a2c      	ldr	r2, [pc, #176]	@ (8005090 <TIM_Base_SetConfig+0xf0>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d014      	beq.n	800500e <TIM_Base_SetConfig+0x6e>
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	2380      	movs	r3, #128	@ 0x80
 8004fe8:	05db      	lsls	r3, r3, #23
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d00f      	beq.n	800500e <TIM_Base_SetConfig+0x6e>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a28      	ldr	r2, [pc, #160]	@ (8005094 <TIM_Base_SetConfig+0xf4>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d00b      	beq.n	800500e <TIM_Base_SetConfig+0x6e>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a27      	ldr	r2, [pc, #156]	@ (8005098 <TIM_Base_SetConfig+0xf8>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d007      	beq.n	800500e <TIM_Base_SetConfig+0x6e>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a26      	ldr	r2, [pc, #152]	@ (800509c <TIM_Base_SetConfig+0xfc>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d003      	beq.n	800500e <TIM_Base_SetConfig+0x6e>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a25      	ldr	r2, [pc, #148]	@ (80050a0 <TIM_Base_SetConfig+0x100>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d108      	bne.n	8005020 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	4a24      	ldr	r2, [pc, #144]	@ (80050a4 <TIM_Base_SetConfig+0x104>)
 8005012:	4013      	ands	r3, r2
 8005014:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	4313      	orrs	r3, r2
 800501e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2280      	movs	r2, #128	@ 0x80
 8005024:	4393      	bics	r3, r2
 8005026:	001a      	movs	r2, r3
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	695b      	ldr	r3, [r3, #20]
 800502c:	4313      	orrs	r3, r2
 800502e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	689a      	ldr	r2, [r3, #8]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a11      	ldr	r2, [pc, #68]	@ (8005090 <TIM_Base_SetConfig+0xf0>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d007      	beq.n	800505e <TIM_Base_SetConfig+0xbe>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a12      	ldr	r2, [pc, #72]	@ (800509c <TIM_Base_SetConfig+0xfc>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d003      	beq.n	800505e <TIM_Base_SetConfig+0xbe>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a11      	ldr	r2, [pc, #68]	@ (80050a0 <TIM_Base_SetConfig+0x100>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d103      	bne.n	8005066 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	691a      	ldr	r2, [r3, #16]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2201      	movs	r2, #1
 800506a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	2201      	movs	r2, #1
 8005072:	4013      	ands	r3, r2
 8005074:	2b01      	cmp	r3, #1
 8005076:	d106      	bne.n	8005086 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	2201      	movs	r2, #1
 800507e:	4393      	bics	r3, r2
 8005080:	001a      	movs	r2, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	611a      	str	r2, [r3, #16]
  }
}
 8005086:	46c0      	nop			@ (mov r8, r8)
 8005088:	46bd      	mov	sp, r7
 800508a:	b004      	add	sp, #16
 800508c:	bd80      	pop	{r7, pc}
 800508e:	46c0      	nop			@ (mov r8, r8)
 8005090:	40012c00 	.word	0x40012c00
 8005094:	40000400 	.word	0x40000400
 8005098:	40002000 	.word	0x40002000
 800509c:	40014400 	.word	0x40014400
 80050a0:	40014800 	.word	0x40014800
 80050a4:	fffffcff 	.word	0xfffffcff

080050a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b086      	sub	sp, #24
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a1b      	ldr	r3, [r3, #32]
 80050bc:	2201      	movs	r2, #1
 80050be:	4393      	bics	r3, r2
 80050c0:	001a      	movs	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	699b      	ldr	r3, [r3, #24]
 80050d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	4a2e      	ldr	r2, [pc, #184]	@ (8005190 <TIM_OC1_SetConfig+0xe8>)
 80050d6:	4013      	ands	r3, r2
 80050d8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2203      	movs	r2, #3
 80050de:	4393      	bics	r3, r2
 80050e0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	2202      	movs	r2, #2
 80050f0:	4393      	bics	r3, r2
 80050f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	697a      	ldr	r2, [r7, #20]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a24      	ldr	r2, [pc, #144]	@ (8005194 <TIM_OC1_SetConfig+0xec>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d007      	beq.n	8005116 <TIM_OC1_SetConfig+0x6e>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a23      	ldr	r2, [pc, #140]	@ (8005198 <TIM_OC1_SetConfig+0xf0>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d003      	beq.n	8005116 <TIM_OC1_SetConfig+0x6e>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a22      	ldr	r2, [pc, #136]	@ (800519c <TIM_OC1_SetConfig+0xf4>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d10c      	bne.n	8005130 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	2208      	movs	r2, #8
 800511a:	4393      	bics	r3, r2
 800511c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	4313      	orrs	r3, r2
 8005126:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	2204      	movs	r2, #4
 800512c:	4393      	bics	r3, r2
 800512e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a18      	ldr	r2, [pc, #96]	@ (8005194 <TIM_OC1_SetConfig+0xec>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d007      	beq.n	8005148 <TIM_OC1_SetConfig+0xa0>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a17      	ldr	r2, [pc, #92]	@ (8005198 <TIM_OC1_SetConfig+0xf0>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d003      	beq.n	8005148 <TIM_OC1_SetConfig+0xa0>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a16      	ldr	r2, [pc, #88]	@ (800519c <TIM_OC1_SetConfig+0xf4>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d111      	bne.n	800516c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	4a15      	ldr	r2, [pc, #84]	@ (80051a0 <TIM_OC1_SetConfig+0xf8>)
 800514c:	4013      	ands	r3, r2
 800514e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	4a14      	ldr	r2, [pc, #80]	@ (80051a4 <TIM_OC1_SetConfig+0xfc>)
 8005154:	4013      	ands	r3, r2
 8005156:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	695b      	ldr	r3, [r3, #20]
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	4313      	orrs	r3, r2
 8005160:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	693a      	ldr	r2, [r7, #16]
 8005168:	4313      	orrs	r3, r2
 800516a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	693a      	ldr	r2, [r7, #16]
 8005170:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	685a      	ldr	r2, [r3, #4]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	621a      	str	r2, [r3, #32]
}
 8005186:	46c0      	nop			@ (mov r8, r8)
 8005188:	46bd      	mov	sp, r7
 800518a:	b006      	add	sp, #24
 800518c:	bd80      	pop	{r7, pc}
 800518e:	46c0      	nop			@ (mov r8, r8)
 8005190:	fffeff8f 	.word	0xfffeff8f
 8005194:	40012c00 	.word	0x40012c00
 8005198:	40014400 	.word	0x40014400
 800519c:	40014800 	.word	0x40014800
 80051a0:	fffffeff 	.word	0xfffffeff
 80051a4:	fffffdff 	.word	0xfffffdff

080051a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b086      	sub	sp, #24
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a1b      	ldr	r3, [r3, #32]
 80051bc:	2210      	movs	r2, #16
 80051be:	4393      	bics	r3, r2
 80051c0:	001a      	movs	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	4a2c      	ldr	r2, [pc, #176]	@ (8005288 <TIM_OC2_SetConfig+0xe0>)
 80051d6:	4013      	ands	r3, r2
 80051d8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	4a2b      	ldr	r2, [pc, #172]	@ (800528c <TIM_OC2_SetConfig+0xe4>)
 80051de:	4013      	ands	r3, r2
 80051e0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	021b      	lsls	r3, r3, #8
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	2220      	movs	r2, #32
 80051f2:	4393      	bics	r3, r2
 80051f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	011b      	lsls	r3, r3, #4
 80051fc:	697a      	ldr	r2, [r7, #20]
 80051fe:	4313      	orrs	r3, r2
 8005200:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a22      	ldr	r2, [pc, #136]	@ (8005290 <TIM_OC2_SetConfig+0xe8>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d10d      	bne.n	8005226 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	2280      	movs	r2, #128	@ 0x80
 800520e:	4393      	bics	r3, r2
 8005210:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	011b      	lsls	r3, r3, #4
 8005218:	697a      	ldr	r2, [r7, #20]
 800521a:	4313      	orrs	r3, r2
 800521c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	2240      	movs	r2, #64	@ 0x40
 8005222:	4393      	bics	r3, r2
 8005224:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a19      	ldr	r2, [pc, #100]	@ (8005290 <TIM_OC2_SetConfig+0xe8>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d007      	beq.n	800523e <TIM_OC2_SetConfig+0x96>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a18      	ldr	r2, [pc, #96]	@ (8005294 <TIM_OC2_SetConfig+0xec>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d003      	beq.n	800523e <TIM_OC2_SetConfig+0x96>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a17      	ldr	r2, [pc, #92]	@ (8005298 <TIM_OC2_SetConfig+0xf0>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d113      	bne.n	8005266 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	4a16      	ldr	r2, [pc, #88]	@ (800529c <TIM_OC2_SetConfig+0xf4>)
 8005242:	4013      	ands	r3, r2
 8005244:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	4a15      	ldr	r2, [pc, #84]	@ (80052a0 <TIM_OC2_SetConfig+0xf8>)
 800524a:	4013      	ands	r3, r2
 800524c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	695b      	ldr	r3, [r3, #20]
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	4313      	orrs	r3, r2
 8005258:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	693a      	ldr	r2, [r7, #16]
 8005262:	4313      	orrs	r3, r2
 8005264:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	693a      	ldr	r2, [r7, #16]
 800526a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	685a      	ldr	r2, [r3, #4]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	697a      	ldr	r2, [r7, #20]
 800527e:	621a      	str	r2, [r3, #32]
}
 8005280:	46c0      	nop			@ (mov r8, r8)
 8005282:	46bd      	mov	sp, r7
 8005284:	b006      	add	sp, #24
 8005286:	bd80      	pop	{r7, pc}
 8005288:	feff8fff 	.word	0xfeff8fff
 800528c:	fffffcff 	.word	0xfffffcff
 8005290:	40012c00 	.word	0x40012c00
 8005294:	40014400 	.word	0x40014400
 8005298:	40014800 	.word	0x40014800
 800529c:	fffffbff 	.word	0xfffffbff
 80052a0:	fffff7ff 	.word	0xfffff7ff

080052a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b086      	sub	sp, #24
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a1b      	ldr	r3, [r3, #32]
 80052b8:	4a31      	ldr	r2, [pc, #196]	@ (8005380 <TIM_OC3_SetConfig+0xdc>)
 80052ba:	401a      	ands	r2, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	69db      	ldr	r3, [r3, #28]
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	4a2d      	ldr	r2, [pc, #180]	@ (8005384 <TIM_OC3_SetConfig+0xe0>)
 80052d0:	4013      	ands	r3, r2
 80052d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2203      	movs	r2, #3
 80052d8:	4393      	bics	r3, r2
 80052da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	4a27      	ldr	r2, [pc, #156]	@ (8005388 <TIM_OC3_SetConfig+0xe4>)
 80052ea:	4013      	ands	r3, r2
 80052ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	021b      	lsls	r3, r3, #8
 80052f4:	697a      	ldr	r2, [r7, #20]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a23      	ldr	r2, [pc, #140]	@ (800538c <TIM_OC3_SetConfig+0xe8>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d10d      	bne.n	800531e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	4a22      	ldr	r2, [pc, #136]	@ (8005390 <TIM_OC3_SetConfig+0xec>)
 8005306:	4013      	ands	r3, r2
 8005308:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	021b      	lsls	r3, r3, #8
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	4313      	orrs	r3, r2
 8005314:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	4a1e      	ldr	r2, [pc, #120]	@ (8005394 <TIM_OC3_SetConfig+0xf0>)
 800531a:	4013      	ands	r3, r2
 800531c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a1a      	ldr	r2, [pc, #104]	@ (800538c <TIM_OC3_SetConfig+0xe8>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d007      	beq.n	8005336 <TIM_OC3_SetConfig+0x92>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a1b      	ldr	r2, [pc, #108]	@ (8005398 <TIM_OC3_SetConfig+0xf4>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d003      	beq.n	8005336 <TIM_OC3_SetConfig+0x92>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a1a      	ldr	r2, [pc, #104]	@ (800539c <TIM_OC3_SetConfig+0xf8>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d113      	bne.n	800535e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	4a19      	ldr	r2, [pc, #100]	@ (80053a0 <TIM_OC3_SetConfig+0xfc>)
 800533a:	4013      	ands	r3, r2
 800533c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	4a18      	ldr	r2, [pc, #96]	@ (80053a4 <TIM_OC3_SetConfig+0x100>)
 8005342:	4013      	ands	r3, r2
 8005344:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	011b      	lsls	r3, r3, #4
 800534c:	693a      	ldr	r2, [r7, #16]
 800534e:	4313      	orrs	r3, r2
 8005350:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	011b      	lsls	r3, r3, #4
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	4313      	orrs	r3, r2
 800535c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	685a      	ldr	r2, [r3, #4]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	697a      	ldr	r2, [r7, #20]
 8005376:	621a      	str	r2, [r3, #32]
}
 8005378:	46c0      	nop			@ (mov r8, r8)
 800537a:	46bd      	mov	sp, r7
 800537c:	b006      	add	sp, #24
 800537e:	bd80      	pop	{r7, pc}
 8005380:	fffffeff 	.word	0xfffffeff
 8005384:	fffeff8f 	.word	0xfffeff8f
 8005388:	fffffdff 	.word	0xfffffdff
 800538c:	40012c00 	.word	0x40012c00
 8005390:	fffff7ff 	.word	0xfffff7ff
 8005394:	fffffbff 	.word	0xfffffbff
 8005398:	40014400 	.word	0x40014400
 800539c:	40014800 	.word	0x40014800
 80053a0:	ffffefff 	.word	0xffffefff
 80053a4:	ffffdfff 	.word	0xffffdfff

080053a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b086      	sub	sp, #24
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a1b      	ldr	r3, [r3, #32]
 80053b6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a1b      	ldr	r3, [r3, #32]
 80053bc:	4a24      	ldr	r2, [pc, #144]	@ (8005450 <TIM_OC4_SetConfig+0xa8>)
 80053be:	401a      	ands	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	69db      	ldr	r3, [r3, #28]
 80053ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	4a20      	ldr	r2, [pc, #128]	@ (8005454 <TIM_OC4_SetConfig+0xac>)
 80053d4:	4013      	ands	r3, r2
 80053d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	4a1f      	ldr	r2, [pc, #124]	@ (8005458 <TIM_OC4_SetConfig+0xb0>)
 80053dc:	4013      	ands	r3, r2
 80053de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	021b      	lsls	r3, r3, #8
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	4a1b      	ldr	r2, [pc, #108]	@ (800545c <TIM_OC4_SetConfig+0xb4>)
 80053f0:	4013      	ands	r3, r2
 80053f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	031b      	lsls	r3, r3, #12
 80053fa:	693a      	ldr	r2, [r7, #16]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a17      	ldr	r2, [pc, #92]	@ (8005460 <TIM_OC4_SetConfig+0xb8>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d007      	beq.n	8005418 <TIM_OC4_SetConfig+0x70>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a16      	ldr	r2, [pc, #88]	@ (8005464 <TIM_OC4_SetConfig+0xbc>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d003      	beq.n	8005418 <TIM_OC4_SetConfig+0x70>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a15      	ldr	r2, [pc, #84]	@ (8005468 <TIM_OC4_SetConfig+0xc0>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d109      	bne.n	800542c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	4a14      	ldr	r2, [pc, #80]	@ (800546c <TIM_OC4_SetConfig+0xc4>)
 800541c:	4013      	ands	r3, r2
 800541e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	695b      	ldr	r3, [r3, #20]
 8005424:	019b      	lsls	r3, r3, #6
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	4313      	orrs	r3, r2
 800542a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	697a      	ldr	r2, [r7, #20]
 8005430:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	685a      	ldr	r2, [r3, #4]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	621a      	str	r2, [r3, #32]
}
 8005446:	46c0      	nop			@ (mov r8, r8)
 8005448:	46bd      	mov	sp, r7
 800544a:	b006      	add	sp, #24
 800544c:	bd80      	pop	{r7, pc}
 800544e:	46c0      	nop			@ (mov r8, r8)
 8005450:	ffffefff 	.word	0xffffefff
 8005454:	feff8fff 	.word	0xfeff8fff
 8005458:	fffffcff 	.word	0xfffffcff
 800545c:	ffffdfff 	.word	0xffffdfff
 8005460:	40012c00 	.word	0x40012c00
 8005464:	40014400 	.word	0x40014400
 8005468:	40014800 	.word	0x40014800
 800546c:	ffffbfff 	.word	0xffffbfff

08005470 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b086      	sub	sp, #24
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a1b      	ldr	r3, [r3, #32]
 800547e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a1b      	ldr	r3, [r3, #32]
 8005484:	4a21      	ldr	r2, [pc, #132]	@ (800550c <TIM_OC5_SetConfig+0x9c>)
 8005486:	401a      	ands	r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	4a1d      	ldr	r2, [pc, #116]	@ (8005510 <TIM_OC5_SetConfig+0xa0>)
 800549c:	4013      	ands	r3, r2
 800549e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	4a19      	ldr	r2, [pc, #100]	@ (8005514 <TIM_OC5_SetConfig+0xa4>)
 80054ae:	4013      	ands	r3, r2
 80054b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	041b      	lsls	r3, r3, #16
 80054b8:	693a      	ldr	r2, [r7, #16]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a15      	ldr	r2, [pc, #84]	@ (8005518 <TIM_OC5_SetConfig+0xa8>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d007      	beq.n	80054d6 <TIM_OC5_SetConfig+0x66>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a14      	ldr	r2, [pc, #80]	@ (800551c <TIM_OC5_SetConfig+0xac>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d003      	beq.n	80054d6 <TIM_OC5_SetConfig+0x66>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a13      	ldr	r2, [pc, #76]	@ (8005520 <TIM_OC5_SetConfig+0xb0>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d109      	bne.n	80054ea <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	4a0c      	ldr	r2, [pc, #48]	@ (800550c <TIM_OC5_SetConfig+0x9c>)
 80054da:	4013      	ands	r3, r2
 80054dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	021b      	lsls	r3, r3, #8
 80054e4:	697a      	ldr	r2, [r7, #20]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	697a      	ldr	r2, [r7, #20]
 80054ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	685a      	ldr	r2, [r3, #4]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	621a      	str	r2, [r3, #32]
}
 8005504:	46c0      	nop			@ (mov r8, r8)
 8005506:	46bd      	mov	sp, r7
 8005508:	b006      	add	sp, #24
 800550a:	bd80      	pop	{r7, pc}
 800550c:	fffeffff 	.word	0xfffeffff
 8005510:	fffeff8f 	.word	0xfffeff8f
 8005514:	fffdffff 	.word	0xfffdffff
 8005518:	40012c00 	.word	0x40012c00
 800551c:	40014400 	.word	0x40014400
 8005520:	40014800 	.word	0x40014800

08005524 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b086      	sub	sp, #24
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a1b      	ldr	r3, [r3, #32]
 8005538:	4a22      	ldr	r2, [pc, #136]	@ (80055c4 <TIM_OC6_SetConfig+0xa0>)
 800553a:	401a      	ands	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800554a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	4a1e      	ldr	r2, [pc, #120]	@ (80055c8 <TIM_OC6_SetConfig+0xa4>)
 8005550:	4013      	ands	r3, r2
 8005552:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	021b      	lsls	r3, r3, #8
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	4313      	orrs	r3, r2
 800555e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	4a1a      	ldr	r2, [pc, #104]	@ (80055cc <TIM_OC6_SetConfig+0xa8>)
 8005564:	4013      	ands	r3, r2
 8005566:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	051b      	lsls	r3, r3, #20
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	4313      	orrs	r3, r2
 8005572:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a16      	ldr	r2, [pc, #88]	@ (80055d0 <TIM_OC6_SetConfig+0xac>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d007      	beq.n	800558c <TIM_OC6_SetConfig+0x68>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a15      	ldr	r2, [pc, #84]	@ (80055d4 <TIM_OC6_SetConfig+0xb0>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d003      	beq.n	800558c <TIM_OC6_SetConfig+0x68>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a14      	ldr	r2, [pc, #80]	@ (80055d8 <TIM_OC6_SetConfig+0xb4>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d109      	bne.n	80055a0 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	4a13      	ldr	r2, [pc, #76]	@ (80055dc <TIM_OC6_SetConfig+0xb8>)
 8005590:	4013      	ands	r3, r2
 8005592:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	695b      	ldr	r3, [r3, #20]
 8005598:	029b      	lsls	r3, r3, #10
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	4313      	orrs	r3, r2
 800559e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	685a      	ldr	r2, [r3, #4]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	693a      	ldr	r2, [r7, #16]
 80055b8:	621a      	str	r2, [r3, #32]
}
 80055ba:	46c0      	nop			@ (mov r8, r8)
 80055bc:	46bd      	mov	sp, r7
 80055be:	b006      	add	sp, #24
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	46c0      	nop			@ (mov r8, r8)
 80055c4:	ffefffff 	.word	0xffefffff
 80055c8:	feff8fff 	.word	0xfeff8fff
 80055cc:	ffdfffff 	.word	0xffdfffff
 80055d0:	40012c00 	.word	0x40012c00
 80055d4:	40014400 	.word	0x40014400
 80055d8:	40014800 	.word	0x40014800
 80055dc:	fffbffff 	.word	0xfffbffff

080055e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b086      	sub	sp, #24
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6a1b      	ldr	r3, [r3, #32]
 80055f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6a1b      	ldr	r3, [r3, #32]
 80055f6:	2201      	movs	r2, #1
 80055f8:	4393      	bics	r3, r2
 80055fa:	001a      	movs	r2, r3
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	22f0      	movs	r2, #240	@ 0xf0
 800560a:	4393      	bics	r3, r2
 800560c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	011b      	lsls	r3, r3, #4
 8005612:	693a      	ldr	r2, [r7, #16]
 8005614:	4313      	orrs	r3, r2
 8005616:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	220a      	movs	r2, #10
 800561c:	4393      	bics	r3, r2
 800561e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005620:	697a      	ldr	r2, [r7, #20]
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	4313      	orrs	r3, r2
 8005626:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	693a      	ldr	r2, [r7, #16]
 800562c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	697a      	ldr	r2, [r7, #20]
 8005632:	621a      	str	r2, [r3, #32]
}
 8005634:	46c0      	nop			@ (mov r8, r8)
 8005636:	46bd      	mov	sp, r7
 8005638:	b006      	add	sp, #24
 800563a:	bd80      	pop	{r7, pc}

0800563c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b086      	sub	sp, #24
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6a1b      	ldr	r3, [r3, #32]
 800564c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6a1b      	ldr	r3, [r3, #32]
 8005652:	2210      	movs	r2, #16
 8005654:	4393      	bics	r3, r2
 8005656:	001a      	movs	r2, r3
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	699b      	ldr	r3, [r3, #24]
 8005660:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	4a0d      	ldr	r2, [pc, #52]	@ (800569c <TIM_TI2_ConfigInputStage+0x60>)
 8005666:	4013      	ands	r3, r2
 8005668:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	031b      	lsls	r3, r3, #12
 800566e:	693a      	ldr	r2, [r7, #16]
 8005670:	4313      	orrs	r3, r2
 8005672:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	22a0      	movs	r2, #160	@ 0xa0
 8005678:	4393      	bics	r3, r2
 800567a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	011b      	lsls	r3, r3, #4
 8005680:	697a      	ldr	r2, [r7, #20]
 8005682:	4313      	orrs	r3, r2
 8005684:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	621a      	str	r2, [r3, #32]
}
 8005692:	46c0      	nop			@ (mov r8, r8)
 8005694:	46bd      	mov	sp, r7
 8005696:	b006      	add	sp, #24
 8005698:	bd80      	pop	{r7, pc}
 800569a:	46c0      	nop			@ (mov r8, r8)
 800569c:	ffff0fff 	.word	0xffff0fff

080056a0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	4a08      	ldr	r2, [pc, #32]	@ (80056d4 <TIM_ITRx_SetConfig+0x34>)
 80056b4:	4013      	ands	r3, r2
 80056b6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056b8:	683a      	ldr	r2, [r7, #0]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	4313      	orrs	r3, r2
 80056be:	2207      	movs	r2, #7
 80056c0:	4313      	orrs	r3, r2
 80056c2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	609a      	str	r2, [r3, #8]
}
 80056ca:	46c0      	nop			@ (mov r8, r8)
 80056cc:	46bd      	mov	sp, r7
 80056ce:	b004      	add	sp, #16
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	46c0      	nop			@ (mov r8, r8)
 80056d4:	ffcfff8f 	.word	0xffcfff8f

080056d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b086      	sub	sp, #24
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	607a      	str	r2, [r7, #4]
 80056e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	4a09      	ldr	r2, [pc, #36]	@ (8005714 <TIM_ETR_SetConfig+0x3c>)
 80056f0:	4013      	ands	r3, r2
 80056f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	021a      	lsls	r2, r3, #8
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	431a      	orrs	r2, r3
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	4313      	orrs	r3, r2
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	4313      	orrs	r3, r2
 8005704:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	697a      	ldr	r2, [r7, #20]
 800570a:	609a      	str	r2, [r3, #8]
}
 800570c:	46c0      	nop			@ (mov r8, r8)
 800570e:	46bd      	mov	sp, r7
 8005710:	b006      	add	sp, #24
 8005712:	bd80      	pop	{r7, pc}
 8005714:	ffff00ff 	.word	0xffff00ff

08005718 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b086      	sub	sp, #24
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	221f      	movs	r2, #31
 8005728:	4013      	ands	r3, r2
 800572a:	2201      	movs	r2, #1
 800572c:	409a      	lsls	r2, r3
 800572e:	0013      	movs	r3, r2
 8005730:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6a1b      	ldr	r3, [r3, #32]
 8005736:	697a      	ldr	r2, [r7, #20]
 8005738:	43d2      	mvns	r2, r2
 800573a:	401a      	ands	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6a1a      	ldr	r2, [r3, #32]
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	211f      	movs	r1, #31
 8005748:	400b      	ands	r3, r1
 800574a:	6879      	ldr	r1, [r7, #4]
 800574c:	4099      	lsls	r1, r3
 800574e:	000b      	movs	r3, r1
 8005750:	431a      	orrs	r2, r3
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	621a      	str	r2, [r3, #32]
}
 8005756:	46c0      	nop			@ (mov r8, r8)
 8005758:	46bd      	mov	sp, r7
 800575a:	b006      	add	sp, #24
 800575c:	bd80      	pop	{r7, pc}
	...

08005760 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	223c      	movs	r2, #60	@ 0x3c
 800576e:	5c9b      	ldrb	r3, [r3, r2]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d101      	bne.n	8005778 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005774:	2302      	movs	r3, #2
 8005776:	e050      	b.n	800581a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	223c      	movs	r2, #60	@ 0x3c
 800577c:	2101      	movs	r1, #1
 800577e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	223d      	movs	r2, #61	@ 0x3d
 8005784:	2102      	movs	r1, #2
 8005786:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a21      	ldr	r2, [pc, #132]	@ (8005824 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d108      	bne.n	80057b4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	4a20      	ldr	r2, [pc, #128]	@ (8005828 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80057a6:	4013      	ands	r3, r2
 80057a8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2270      	movs	r2, #112	@ 0x70
 80057b8:	4393      	bics	r3, r2
 80057ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68fa      	ldr	r2, [r7, #12]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a14      	ldr	r2, [pc, #80]	@ (8005824 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d00a      	beq.n	80057ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	2380      	movs	r3, #128	@ 0x80
 80057de:	05db      	lsls	r3, r3, #23
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d004      	beq.n	80057ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a10      	ldr	r2, [pc, #64]	@ (800582c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d10c      	bne.n	8005808 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	2280      	movs	r2, #128	@ 0x80
 80057f2:	4393      	bics	r3, r2
 80057f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	68ba      	ldr	r2, [r7, #8]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68ba      	ldr	r2, [r7, #8]
 8005806:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	223d      	movs	r2, #61	@ 0x3d
 800580c:	2101      	movs	r1, #1
 800580e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	223c      	movs	r2, #60	@ 0x3c
 8005814:	2100      	movs	r1, #0
 8005816:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	0018      	movs	r0, r3
 800581c:	46bd      	mov	sp, r7
 800581e:	b004      	add	sp, #16
 8005820:	bd80      	pop	{r7, pc}
 8005822:	46c0      	nop			@ (mov r8, r8)
 8005824:	40012c00 	.word	0x40012c00
 8005828:	ff0fffff 	.word	0xff0fffff
 800582c:	40000400 	.word	0x40000400

08005830 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800583a:	2300      	movs	r3, #0
 800583c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	223c      	movs	r2, #60	@ 0x3c
 8005842:	5c9b      	ldrb	r3, [r3, r2]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d101      	bne.n	800584c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005848:	2302      	movs	r3, #2
 800584a:	e06f      	b.n	800592c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	223c      	movs	r2, #60	@ 0x3c
 8005850:	2101      	movs	r1, #1
 8005852:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	22ff      	movs	r2, #255	@ 0xff
 8005858:	4393      	bics	r3, r2
 800585a:	001a      	movs	r2, r3
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	4313      	orrs	r3, r2
 8005862:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	4a33      	ldr	r2, [pc, #204]	@ (8005934 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8005868:	401a      	ands	r2, r3
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	4313      	orrs	r3, r2
 8005870:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	4a30      	ldr	r2, [pc, #192]	@ (8005938 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8005876:	401a      	ands	r2, r3
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	4313      	orrs	r3, r2
 800587e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	4a2e      	ldr	r2, [pc, #184]	@ (800593c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8005884:	401a      	ands	r2, r3
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4313      	orrs	r3, r2
 800588c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	4a2b      	ldr	r2, [pc, #172]	@ (8005940 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8005892:	401a      	ands	r2, r3
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	4313      	orrs	r3, r2
 800589a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	4a29      	ldr	r2, [pc, #164]	@ (8005944 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80058a0:	401a      	ands	r2, r3
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	695b      	ldr	r3, [r3, #20]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	4a26      	ldr	r2, [pc, #152]	@ (8005948 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80058ae:	401a      	ands	r2, r3
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b4:	4313      	orrs	r3, r2
 80058b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	4a24      	ldr	r2, [pc, #144]	@ (800594c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80058bc:	401a      	ands	r2, r3
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	041b      	lsls	r3, r3, #16
 80058c4:	4313      	orrs	r3, r2
 80058c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	4a21      	ldr	r2, [pc, #132]	@ (8005950 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80058cc:	401a      	ands	r2, r3
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	69db      	ldr	r3, [r3, #28]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a1e      	ldr	r2, [pc, #120]	@ (8005954 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d11c      	bne.n	800591a <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	4a1d      	ldr	r2, [pc, #116]	@ (8005958 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80058e4:	401a      	ands	r2, r3
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ea:	051b      	lsls	r3, r3, #20
 80058ec:	4313      	orrs	r3, r2
 80058ee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	4a1a      	ldr	r2, [pc, #104]	@ (800595c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80058f4:	401a      	ands	r2, r3
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	6a1b      	ldr	r3, [r3, #32]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	4a17      	ldr	r2, [pc, #92]	@ (8005960 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8005902:	401a      	ands	r2, r3
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005908:	4313      	orrs	r3, r2
 800590a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	4a15      	ldr	r2, [pc, #84]	@ (8005964 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8005910:	401a      	ands	r2, r3
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005916:	4313      	orrs	r3, r2
 8005918:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	223c      	movs	r2, #60	@ 0x3c
 8005926:	2100      	movs	r1, #0
 8005928:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800592a:	2300      	movs	r3, #0
}
 800592c:	0018      	movs	r0, r3
 800592e:	46bd      	mov	sp, r7
 8005930:	b004      	add	sp, #16
 8005932:	bd80      	pop	{r7, pc}
 8005934:	fffffcff 	.word	0xfffffcff
 8005938:	fffffbff 	.word	0xfffffbff
 800593c:	fffff7ff 	.word	0xfffff7ff
 8005940:	ffffefff 	.word	0xffffefff
 8005944:	ffffdfff 	.word	0xffffdfff
 8005948:	ffffbfff 	.word	0xffffbfff
 800594c:	fff0ffff 	.word	0xfff0ffff
 8005950:	efffffff 	.word	0xefffffff
 8005954:	40012c00 	.word	0x40012c00
 8005958:	ff0fffff 	.word	0xff0fffff
 800595c:	feffffff 	.word	0xfeffffff
 8005960:	fdffffff 	.word	0xfdffffff
 8005964:	dfffffff 	.word	0xdfffffff

08005968 <srand>:
 8005968:	4b11      	ldr	r3, [pc, #68]	@ (80059b0 <srand+0x48>)
 800596a:	b570      	push	{r4, r5, r6, lr}
 800596c:	681d      	ldr	r5, [r3, #0]
 800596e:	0004      	movs	r4, r0
 8005970:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8005972:	2b00      	cmp	r3, #0
 8005974:	d116      	bne.n	80059a4 <srand+0x3c>
 8005976:	2018      	movs	r0, #24
 8005978:	f000 f9b2 	bl	8005ce0 <malloc>
 800597c:	1e02      	subs	r2, r0, #0
 800597e:	6328      	str	r0, [r5, #48]	@ 0x30
 8005980:	d104      	bne.n	800598c <srand+0x24>
 8005982:	2146      	movs	r1, #70	@ 0x46
 8005984:	4b0b      	ldr	r3, [pc, #44]	@ (80059b4 <srand+0x4c>)
 8005986:	480c      	ldr	r0, [pc, #48]	@ (80059b8 <srand+0x50>)
 8005988:	f000 f98c 	bl	8005ca4 <__assert_func>
 800598c:	4b0b      	ldr	r3, [pc, #44]	@ (80059bc <srand+0x54>)
 800598e:	2100      	movs	r1, #0
 8005990:	6003      	str	r3, [r0, #0]
 8005992:	4b0b      	ldr	r3, [pc, #44]	@ (80059c0 <srand+0x58>)
 8005994:	6043      	str	r3, [r0, #4]
 8005996:	4b0b      	ldr	r3, [pc, #44]	@ (80059c4 <srand+0x5c>)
 8005998:	6083      	str	r3, [r0, #8]
 800599a:	230b      	movs	r3, #11
 800599c:	8183      	strh	r3, [r0, #12]
 800599e:	2001      	movs	r0, #1
 80059a0:	6110      	str	r0, [r2, #16]
 80059a2:	6151      	str	r1, [r2, #20]
 80059a4:	2200      	movs	r2, #0
 80059a6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80059a8:	611c      	str	r4, [r3, #16]
 80059aa:	615a      	str	r2, [r3, #20]
 80059ac:	bd70      	pop	{r4, r5, r6, pc}
 80059ae:	46c0      	nop			@ (mov r8, r8)
 80059b0:	2000041c 	.word	0x2000041c
 80059b4:	08006c08 	.word	0x08006c08
 80059b8:	08006c1f 	.word	0x08006c1f
 80059bc:	abcd330e 	.word	0xabcd330e
 80059c0:	e66d1234 	.word	0xe66d1234
 80059c4:	0005deec 	.word	0x0005deec

080059c8 <rand>:
 80059c8:	4b16      	ldr	r3, [pc, #88]	@ (8005a24 <rand+0x5c>)
 80059ca:	b510      	push	{r4, lr}
 80059cc:	681c      	ldr	r4, [r3, #0]
 80059ce:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d116      	bne.n	8005a02 <rand+0x3a>
 80059d4:	2018      	movs	r0, #24
 80059d6:	f000 f983 	bl	8005ce0 <malloc>
 80059da:	1e02      	subs	r2, r0, #0
 80059dc:	6320      	str	r0, [r4, #48]	@ 0x30
 80059de:	d104      	bne.n	80059ea <rand+0x22>
 80059e0:	2152      	movs	r1, #82	@ 0x52
 80059e2:	4b11      	ldr	r3, [pc, #68]	@ (8005a28 <rand+0x60>)
 80059e4:	4811      	ldr	r0, [pc, #68]	@ (8005a2c <rand+0x64>)
 80059e6:	f000 f95d 	bl	8005ca4 <__assert_func>
 80059ea:	4b11      	ldr	r3, [pc, #68]	@ (8005a30 <rand+0x68>)
 80059ec:	2100      	movs	r1, #0
 80059ee:	6003      	str	r3, [r0, #0]
 80059f0:	4b10      	ldr	r3, [pc, #64]	@ (8005a34 <rand+0x6c>)
 80059f2:	6043      	str	r3, [r0, #4]
 80059f4:	4b10      	ldr	r3, [pc, #64]	@ (8005a38 <rand+0x70>)
 80059f6:	6083      	str	r3, [r0, #8]
 80059f8:	230b      	movs	r3, #11
 80059fa:	8183      	strh	r3, [r0, #12]
 80059fc:	2001      	movs	r0, #1
 80059fe:	6110      	str	r0, [r2, #16]
 8005a00:	6151      	str	r1, [r2, #20]
 8005a02:	6b24      	ldr	r4, [r4, #48]	@ 0x30
 8005a04:	4a0d      	ldr	r2, [pc, #52]	@ (8005a3c <rand+0x74>)
 8005a06:	6920      	ldr	r0, [r4, #16]
 8005a08:	6961      	ldr	r1, [r4, #20]
 8005a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8005a40 <rand+0x78>)
 8005a0c:	f7fa fc10 	bl	8000230 <__aeabi_lmul>
 8005a10:	2201      	movs	r2, #1
 8005a12:	2300      	movs	r3, #0
 8005a14:	1880      	adds	r0, r0, r2
 8005a16:	4159      	adcs	r1, r3
 8005a18:	6120      	str	r0, [r4, #16]
 8005a1a:	6161      	str	r1, [r4, #20]
 8005a1c:	0048      	lsls	r0, r1, #1
 8005a1e:	0840      	lsrs	r0, r0, #1
 8005a20:	bd10      	pop	{r4, pc}
 8005a22:	46c0      	nop			@ (mov r8, r8)
 8005a24:	2000041c 	.word	0x2000041c
 8005a28:	08006c08 	.word	0x08006c08
 8005a2c:	08006c1f 	.word	0x08006c1f
 8005a30:	abcd330e 	.word	0xabcd330e
 8005a34:	e66d1234 	.word	0xe66d1234
 8005a38:	0005deec 	.word	0x0005deec
 8005a3c:	4c957f2d 	.word	0x4c957f2d
 8005a40:	5851f42d 	.word	0x5851f42d

08005a44 <std>:
 8005a44:	2300      	movs	r3, #0
 8005a46:	b510      	push	{r4, lr}
 8005a48:	0004      	movs	r4, r0
 8005a4a:	6003      	str	r3, [r0, #0]
 8005a4c:	6043      	str	r3, [r0, #4]
 8005a4e:	6083      	str	r3, [r0, #8]
 8005a50:	8181      	strh	r1, [r0, #12]
 8005a52:	6643      	str	r3, [r0, #100]	@ 0x64
 8005a54:	81c2      	strh	r2, [r0, #14]
 8005a56:	6103      	str	r3, [r0, #16]
 8005a58:	6143      	str	r3, [r0, #20]
 8005a5a:	6183      	str	r3, [r0, #24]
 8005a5c:	0019      	movs	r1, r3
 8005a5e:	2208      	movs	r2, #8
 8005a60:	305c      	adds	r0, #92	@ 0x5c
 8005a62:	f000 f8b3 	bl	8005bcc <memset>
 8005a66:	4b0b      	ldr	r3, [pc, #44]	@ (8005a94 <std+0x50>)
 8005a68:	6224      	str	r4, [r4, #32]
 8005a6a:	6263      	str	r3, [r4, #36]	@ 0x24
 8005a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8005a98 <std+0x54>)
 8005a6e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005a70:	4b0a      	ldr	r3, [pc, #40]	@ (8005a9c <std+0x58>)
 8005a72:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005a74:	4b0a      	ldr	r3, [pc, #40]	@ (8005aa0 <std+0x5c>)
 8005a76:	6323      	str	r3, [r4, #48]	@ 0x30
 8005a78:	4b0a      	ldr	r3, [pc, #40]	@ (8005aa4 <std+0x60>)
 8005a7a:	429c      	cmp	r4, r3
 8005a7c:	d005      	beq.n	8005a8a <std+0x46>
 8005a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8005aa8 <std+0x64>)
 8005a80:	429c      	cmp	r4, r3
 8005a82:	d002      	beq.n	8005a8a <std+0x46>
 8005a84:	4b09      	ldr	r3, [pc, #36]	@ (8005aac <std+0x68>)
 8005a86:	429c      	cmp	r4, r3
 8005a88:	d103      	bne.n	8005a92 <std+0x4e>
 8005a8a:	0020      	movs	r0, r4
 8005a8c:	3058      	adds	r0, #88	@ 0x58
 8005a8e:	f000 f8fd 	bl	8005c8c <__retarget_lock_init_recursive>
 8005a92:	bd10      	pop	{r4, pc}
 8005a94:	08005fbd 	.word	0x08005fbd
 8005a98:	08005fe5 	.word	0x08005fe5
 8005a9c:	0800601d 	.word	0x0800601d
 8005aa0:	08006049 	.word	0x08006049
 8005aa4:	20001258 	.word	0x20001258
 8005aa8:	200012c0 	.word	0x200012c0
 8005aac:	20001328 	.word	0x20001328

08005ab0 <stdio_exit_handler>:
 8005ab0:	b510      	push	{r4, lr}
 8005ab2:	4a03      	ldr	r2, [pc, #12]	@ (8005ac0 <stdio_exit_handler+0x10>)
 8005ab4:	4903      	ldr	r1, [pc, #12]	@ (8005ac4 <stdio_exit_handler+0x14>)
 8005ab6:	4804      	ldr	r0, [pc, #16]	@ (8005ac8 <stdio_exit_handler+0x18>)
 8005ab8:	f000 f86c 	bl	8005b94 <_fwalk_sglue>
 8005abc:	bd10      	pop	{r4, pc}
 8005abe:	46c0      	nop			@ (mov r8, r8)
 8005ac0:	20000410 	.word	0x20000410
 8005ac4:	08005f45 	.word	0x08005f45
 8005ac8:	20000420 	.word	0x20000420

08005acc <cleanup_stdio>:
 8005acc:	6841      	ldr	r1, [r0, #4]
 8005ace:	4b0b      	ldr	r3, [pc, #44]	@ (8005afc <cleanup_stdio+0x30>)
 8005ad0:	b510      	push	{r4, lr}
 8005ad2:	0004      	movs	r4, r0
 8005ad4:	4299      	cmp	r1, r3
 8005ad6:	d001      	beq.n	8005adc <cleanup_stdio+0x10>
 8005ad8:	f000 fa34 	bl	8005f44 <_fflush_r>
 8005adc:	68a1      	ldr	r1, [r4, #8]
 8005ade:	4b08      	ldr	r3, [pc, #32]	@ (8005b00 <cleanup_stdio+0x34>)
 8005ae0:	4299      	cmp	r1, r3
 8005ae2:	d002      	beq.n	8005aea <cleanup_stdio+0x1e>
 8005ae4:	0020      	movs	r0, r4
 8005ae6:	f000 fa2d 	bl	8005f44 <_fflush_r>
 8005aea:	68e1      	ldr	r1, [r4, #12]
 8005aec:	4b05      	ldr	r3, [pc, #20]	@ (8005b04 <cleanup_stdio+0x38>)
 8005aee:	4299      	cmp	r1, r3
 8005af0:	d002      	beq.n	8005af8 <cleanup_stdio+0x2c>
 8005af2:	0020      	movs	r0, r4
 8005af4:	f000 fa26 	bl	8005f44 <_fflush_r>
 8005af8:	bd10      	pop	{r4, pc}
 8005afa:	46c0      	nop			@ (mov r8, r8)
 8005afc:	20001258 	.word	0x20001258
 8005b00:	200012c0 	.word	0x200012c0
 8005b04:	20001328 	.word	0x20001328

08005b08 <global_stdio_init.part.0>:
 8005b08:	b510      	push	{r4, lr}
 8005b0a:	4b09      	ldr	r3, [pc, #36]	@ (8005b30 <global_stdio_init.part.0+0x28>)
 8005b0c:	4a09      	ldr	r2, [pc, #36]	@ (8005b34 <global_stdio_init.part.0+0x2c>)
 8005b0e:	2104      	movs	r1, #4
 8005b10:	601a      	str	r2, [r3, #0]
 8005b12:	4809      	ldr	r0, [pc, #36]	@ (8005b38 <global_stdio_init.part.0+0x30>)
 8005b14:	2200      	movs	r2, #0
 8005b16:	f7ff ff95 	bl	8005a44 <std>
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	2109      	movs	r1, #9
 8005b1e:	4807      	ldr	r0, [pc, #28]	@ (8005b3c <global_stdio_init.part.0+0x34>)
 8005b20:	f7ff ff90 	bl	8005a44 <std>
 8005b24:	2202      	movs	r2, #2
 8005b26:	2112      	movs	r1, #18
 8005b28:	4805      	ldr	r0, [pc, #20]	@ (8005b40 <global_stdio_init.part.0+0x38>)
 8005b2a:	f7ff ff8b 	bl	8005a44 <std>
 8005b2e:	bd10      	pop	{r4, pc}
 8005b30:	20001390 	.word	0x20001390
 8005b34:	08005ab1 	.word	0x08005ab1
 8005b38:	20001258 	.word	0x20001258
 8005b3c:	200012c0 	.word	0x200012c0
 8005b40:	20001328 	.word	0x20001328

08005b44 <__sfp_lock_acquire>:
 8005b44:	b510      	push	{r4, lr}
 8005b46:	4802      	ldr	r0, [pc, #8]	@ (8005b50 <__sfp_lock_acquire+0xc>)
 8005b48:	f000 f8a1 	bl	8005c8e <__retarget_lock_acquire_recursive>
 8005b4c:	bd10      	pop	{r4, pc}
 8005b4e:	46c0      	nop			@ (mov r8, r8)
 8005b50:	20001395 	.word	0x20001395

08005b54 <__sfp_lock_release>:
 8005b54:	b510      	push	{r4, lr}
 8005b56:	4802      	ldr	r0, [pc, #8]	@ (8005b60 <__sfp_lock_release+0xc>)
 8005b58:	f000 f89a 	bl	8005c90 <__retarget_lock_release_recursive>
 8005b5c:	bd10      	pop	{r4, pc}
 8005b5e:	46c0      	nop			@ (mov r8, r8)
 8005b60:	20001395 	.word	0x20001395

08005b64 <__sinit>:
 8005b64:	b510      	push	{r4, lr}
 8005b66:	0004      	movs	r4, r0
 8005b68:	f7ff ffec 	bl	8005b44 <__sfp_lock_acquire>
 8005b6c:	6a23      	ldr	r3, [r4, #32]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d002      	beq.n	8005b78 <__sinit+0x14>
 8005b72:	f7ff ffef 	bl	8005b54 <__sfp_lock_release>
 8005b76:	bd10      	pop	{r4, pc}
 8005b78:	4b04      	ldr	r3, [pc, #16]	@ (8005b8c <__sinit+0x28>)
 8005b7a:	6223      	str	r3, [r4, #32]
 8005b7c:	4b04      	ldr	r3, [pc, #16]	@ (8005b90 <__sinit+0x2c>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d1f6      	bne.n	8005b72 <__sinit+0xe>
 8005b84:	f7ff ffc0 	bl	8005b08 <global_stdio_init.part.0>
 8005b88:	e7f3      	b.n	8005b72 <__sinit+0xe>
 8005b8a:	46c0      	nop			@ (mov r8, r8)
 8005b8c:	08005acd 	.word	0x08005acd
 8005b90:	20001390 	.word	0x20001390

08005b94 <_fwalk_sglue>:
 8005b94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b96:	0014      	movs	r4, r2
 8005b98:	2600      	movs	r6, #0
 8005b9a:	9000      	str	r0, [sp, #0]
 8005b9c:	9101      	str	r1, [sp, #4]
 8005b9e:	68a5      	ldr	r5, [r4, #8]
 8005ba0:	6867      	ldr	r7, [r4, #4]
 8005ba2:	3f01      	subs	r7, #1
 8005ba4:	d504      	bpl.n	8005bb0 <_fwalk_sglue+0x1c>
 8005ba6:	6824      	ldr	r4, [r4, #0]
 8005ba8:	2c00      	cmp	r4, #0
 8005baa:	d1f8      	bne.n	8005b9e <_fwalk_sglue+0xa>
 8005bac:	0030      	movs	r0, r6
 8005bae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005bb0:	89ab      	ldrh	r3, [r5, #12]
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d908      	bls.n	8005bc8 <_fwalk_sglue+0x34>
 8005bb6:	220e      	movs	r2, #14
 8005bb8:	5eab      	ldrsh	r3, [r5, r2]
 8005bba:	3301      	adds	r3, #1
 8005bbc:	d004      	beq.n	8005bc8 <_fwalk_sglue+0x34>
 8005bbe:	0029      	movs	r1, r5
 8005bc0:	9800      	ldr	r0, [sp, #0]
 8005bc2:	9b01      	ldr	r3, [sp, #4]
 8005bc4:	4798      	blx	r3
 8005bc6:	4306      	orrs	r6, r0
 8005bc8:	3568      	adds	r5, #104	@ 0x68
 8005bca:	e7ea      	b.n	8005ba2 <_fwalk_sglue+0xe>

08005bcc <memset>:
 8005bcc:	0003      	movs	r3, r0
 8005bce:	1882      	adds	r2, r0, r2
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d100      	bne.n	8005bd6 <memset+0xa>
 8005bd4:	4770      	bx	lr
 8005bd6:	7019      	strb	r1, [r3, #0]
 8005bd8:	3301      	adds	r3, #1
 8005bda:	e7f9      	b.n	8005bd0 <memset+0x4>

08005bdc <time>:
 8005bdc:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 8005bde:	2601      	movs	r6, #1
 8005be0:	4276      	negs	r6, r6
 8005be2:	17f7      	asrs	r7, r6, #31
 8005be4:	4b0a      	ldr	r3, [pc, #40]	@ (8005c10 <time+0x34>)
 8005be6:	0004      	movs	r4, r0
 8005be8:	2200      	movs	r2, #0
 8005bea:	4669      	mov	r1, sp
 8005bec:	6818      	ldr	r0, [r3, #0]
 8005bee:	9600      	str	r6, [sp, #0]
 8005bf0:	9701      	str	r7, [sp, #4]
 8005bf2:	f000 f80f 	bl	8005c14 <_gettimeofday_r>
 8005bf6:	2800      	cmp	r0, #0
 8005bf8:	da01      	bge.n	8005bfe <time+0x22>
 8005bfa:	9600      	str	r6, [sp, #0]
 8005bfc:	9701      	str	r7, [sp, #4]
 8005bfe:	9800      	ldr	r0, [sp, #0]
 8005c00:	9901      	ldr	r1, [sp, #4]
 8005c02:	2c00      	cmp	r4, #0
 8005c04:	d001      	beq.n	8005c0a <time+0x2e>
 8005c06:	6020      	str	r0, [r4, #0]
 8005c08:	6061      	str	r1, [r4, #4]
 8005c0a:	b004      	add	sp, #16
 8005c0c:	bdd0      	pop	{r4, r6, r7, pc}
 8005c0e:	46c0      	nop			@ (mov r8, r8)
 8005c10:	2000041c 	.word	0x2000041c

08005c14 <_gettimeofday_r>:
 8005c14:	2300      	movs	r3, #0
 8005c16:	b570      	push	{r4, r5, r6, lr}
 8005c18:	4d06      	ldr	r5, [pc, #24]	@ (8005c34 <_gettimeofday_r+0x20>)
 8005c1a:	0004      	movs	r4, r0
 8005c1c:	0008      	movs	r0, r1
 8005c1e:	0011      	movs	r1, r2
 8005c20:	602b      	str	r3, [r5, #0]
 8005c22:	f000 ff69 	bl	8006af8 <_gettimeofday>
 8005c26:	1c43      	adds	r3, r0, #1
 8005c28:	d103      	bne.n	8005c32 <_gettimeofday_r+0x1e>
 8005c2a:	682b      	ldr	r3, [r5, #0]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d000      	beq.n	8005c32 <_gettimeofday_r+0x1e>
 8005c30:	6023      	str	r3, [r4, #0]
 8005c32:	bd70      	pop	{r4, r5, r6, pc}
 8005c34:	200013a0 	.word	0x200013a0

08005c38 <__errno>:
 8005c38:	4b01      	ldr	r3, [pc, #4]	@ (8005c40 <__errno+0x8>)
 8005c3a:	6818      	ldr	r0, [r3, #0]
 8005c3c:	4770      	bx	lr
 8005c3e:	46c0      	nop			@ (mov r8, r8)
 8005c40:	2000041c 	.word	0x2000041c

08005c44 <__libc_init_array>:
 8005c44:	b570      	push	{r4, r5, r6, lr}
 8005c46:	2600      	movs	r6, #0
 8005c48:	4c0c      	ldr	r4, [pc, #48]	@ (8005c7c <__libc_init_array+0x38>)
 8005c4a:	4d0d      	ldr	r5, [pc, #52]	@ (8005c80 <__libc_init_array+0x3c>)
 8005c4c:	1b64      	subs	r4, r4, r5
 8005c4e:	10a4      	asrs	r4, r4, #2
 8005c50:	42a6      	cmp	r6, r4
 8005c52:	d109      	bne.n	8005c68 <__libc_init_array+0x24>
 8005c54:	2600      	movs	r6, #0
 8005c56:	f000 ff57 	bl	8006b08 <_init>
 8005c5a:	4c0a      	ldr	r4, [pc, #40]	@ (8005c84 <__libc_init_array+0x40>)
 8005c5c:	4d0a      	ldr	r5, [pc, #40]	@ (8005c88 <__libc_init_array+0x44>)
 8005c5e:	1b64      	subs	r4, r4, r5
 8005c60:	10a4      	asrs	r4, r4, #2
 8005c62:	42a6      	cmp	r6, r4
 8005c64:	d105      	bne.n	8005c72 <__libc_init_array+0x2e>
 8005c66:	bd70      	pop	{r4, r5, r6, pc}
 8005c68:	00b3      	lsls	r3, r6, #2
 8005c6a:	58eb      	ldr	r3, [r5, r3]
 8005c6c:	4798      	blx	r3
 8005c6e:	3601      	adds	r6, #1
 8005c70:	e7ee      	b.n	8005c50 <__libc_init_array+0xc>
 8005c72:	00b3      	lsls	r3, r6, #2
 8005c74:	58eb      	ldr	r3, [r5, r3]
 8005c76:	4798      	blx	r3
 8005c78:	3601      	adds	r6, #1
 8005c7a:	e7f2      	b.n	8005c62 <__libc_init_array+0x1e>
 8005c7c:	08006ce8 	.word	0x08006ce8
 8005c80:	08006ce8 	.word	0x08006ce8
 8005c84:	08006cec 	.word	0x08006cec
 8005c88:	08006ce8 	.word	0x08006ce8

08005c8c <__retarget_lock_init_recursive>:
 8005c8c:	4770      	bx	lr

08005c8e <__retarget_lock_acquire_recursive>:
 8005c8e:	4770      	bx	lr

08005c90 <__retarget_lock_release_recursive>:
 8005c90:	4770      	bx	lr

08005c92 <memcpy>:
 8005c92:	2300      	movs	r3, #0
 8005c94:	b510      	push	{r4, lr}
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d100      	bne.n	8005c9c <memcpy+0xa>
 8005c9a:	bd10      	pop	{r4, pc}
 8005c9c:	5ccc      	ldrb	r4, [r1, r3]
 8005c9e:	54c4      	strb	r4, [r0, r3]
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	e7f8      	b.n	8005c96 <memcpy+0x4>

08005ca4 <__assert_func>:
 8005ca4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8005ca6:	0014      	movs	r4, r2
 8005ca8:	001a      	movs	r2, r3
 8005caa:	4b09      	ldr	r3, [pc, #36]	@ (8005cd0 <__assert_func+0x2c>)
 8005cac:	0005      	movs	r5, r0
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	000e      	movs	r6, r1
 8005cb2:	68d8      	ldr	r0, [r3, #12]
 8005cb4:	4b07      	ldr	r3, [pc, #28]	@ (8005cd4 <__assert_func+0x30>)
 8005cb6:	2c00      	cmp	r4, #0
 8005cb8:	d101      	bne.n	8005cbe <__assert_func+0x1a>
 8005cba:	4b07      	ldr	r3, [pc, #28]	@ (8005cd8 <__assert_func+0x34>)
 8005cbc:	001c      	movs	r4, r3
 8005cbe:	4907      	ldr	r1, [pc, #28]	@ (8005cdc <__assert_func+0x38>)
 8005cc0:	9301      	str	r3, [sp, #4]
 8005cc2:	9402      	str	r4, [sp, #8]
 8005cc4:	002b      	movs	r3, r5
 8005cc6:	9600      	str	r6, [sp, #0]
 8005cc8:	f000 f9c4 	bl	8006054 <fiprintf>
 8005ccc:	f000 fa32 	bl	8006134 <abort>
 8005cd0:	2000041c 	.word	0x2000041c
 8005cd4:	08006c77 	.word	0x08006c77
 8005cd8:	08006cb2 	.word	0x08006cb2
 8005cdc:	08006c84 	.word	0x08006c84

08005ce0 <malloc>:
 8005ce0:	b510      	push	{r4, lr}
 8005ce2:	4b03      	ldr	r3, [pc, #12]	@ (8005cf0 <malloc+0x10>)
 8005ce4:	0001      	movs	r1, r0
 8005ce6:	6818      	ldr	r0, [r3, #0]
 8005ce8:	f000 f826 	bl	8005d38 <_malloc_r>
 8005cec:	bd10      	pop	{r4, pc}
 8005cee:	46c0      	nop			@ (mov r8, r8)
 8005cf0:	2000041c 	.word	0x2000041c

08005cf4 <sbrk_aligned>:
 8005cf4:	b570      	push	{r4, r5, r6, lr}
 8005cf6:	4e0f      	ldr	r6, [pc, #60]	@ (8005d34 <sbrk_aligned+0x40>)
 8005cf8:	000d      	movs	r5, r1
 8005cfa:	6831      	ldr	r1, [r6, #0]
 8005cfc:	0004      	movs	r4, r0
 8005cfe:	2900      	cmp	r1, #0
 8005d00:	d102      	bne.n	8005d08 <sbrk_aligned+0x14>
 8005d02:	f000 f9f1 	bl	80060e8 <_sbrk_r>
 8005d06:	6030      	str	r0, [r6, #0]
 8005d08:	0029      	movs	r1, r5
 8005d0a:	0020      	movs	r0, r4
 8005d0c:	f000 f9ec 	bl	80060e8 <_sbrk_r>
 8005d10:	1c43      	adds	r3, r0, #1
 8005d12:	d103      	bne.n	8005d1c <sbrk_aligned+0x28>
 8005d14:	2501      	movs	r5, #1
 8005d16:	426d      	negs	r5, r5
 8005d18:	0028      	movs	r0, r5
 8005d1a:	bd70      	pop	{r4, r5, r6, pc}
 8005d1c:	2303      	movs	r3, #3
 8005d1e:	1cc5      	adds	r5, r0, #3
 8005d20:	439d      	bics	r5, r3
 8005d22:	42a8      	cmp	r0, r5
 8005d24:	d0f8      	beq.n	8005d18 <sbrk_aligned+0x24>
 8005d26:	1a29      	subs	r1, r5, r0
 8005d28:	0020      	movs	r0, r4
 8005d2a:	f000 f9dd 	bl	80060e8 <_sbrk_r>
 8005d2e:	3001      	adds	r0, #1
 8005d30:	d1f2      	bne.n	8005d18 <sbrk_aligned+0x24>
 8005d32:	e7ef      	b.n	8005d14 <sbrk_aligned+0x20>
 8005d34:	20001398 	.word	0x20001398

08005d38 <_malloc_r>:
 8005d38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d3a:	2203      	movs	r2, #3
 8005d3c:	1ccb      	adds	r3, r1, #3
 8005d3e:	4393      	bics	r3, r2
 8005d40:	3308      	adds	r3, #8
 8005d42:	0005      	movs	r5, r0
 8005d44:	001f      	movs	r7, r3
 8005d46:	2b0c      	cmp	r3, #12
 8005d48:	d234      	bcs.n	8005db4 <_malloc_r+0x7c>
 8005d4a:	270c      	movs	r7, #12
 8005d4c:	42b9      	cmp	r1, r7
 8005d4e:	d833      	bhi.n	8005db8 <_malloc_r+0x80>
 8005d50:	0028      	movs	r0, r5
 8005d52:	f000 f923 	bl	8005f9c <__malloc_lock>
 8005d56:	4e37      	ldr	r6, [pc, #220]	@ (8005e34 <_malloc_r+0xfc>)
 8005d58:	6833      	ldr	r3, [r6, #0]
 8005d5a:	001c      	movs	r4, r3
 8005d5c:	2c00      	cmp	r4, #0
 8005d5e:	d12f      	bne.n	8005dc0 <_malloc_r+0x88>
 8005d60:	0039      	movs	r1, r7
 8005d62:	0028      	movs	r0, r5
 8005d64:	f7ff ffc6 	bl	8005cf4 <sbrk_aligned>
 8005d68:	0004      	movs	r4, r0
 8005d6a:	1c43      	adds	r3, r0, #1
 8005d6c:	d15f      	bne.n	8005e2e <_malloc_r+0xf6>
 8005d6e:	6834      	ldr	r4, [r6, #0]
 8005d70:	9400      	str	r4, [sp, #0]
 8005d72:	9b00      	ldr	r3, [sp, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d14a      	bne.n	8005e0e <_malloc_r+0xd6>
 8005d78:	2c00      	cmp	r4, #0
 8005d7a:	d052      	beq.n	8005e22 <_malloc_r+0xea>
 8005d7c:	6823      	ldr	r3, [r4, #0]
 8005d7e:	0028      	movs	r0, r5
 8005d80:	18e3      	adds	r3, r4, r3
 8005d82:	9900      	ldr	r1, [sp, #0]
 8005d84:	9301      	str	r3, [sp, #4]
 8005d86:	f000 f9af 	bl	80060e8 <_sbrk_r>
 8005d8a:	9b01      	ldr	r3, [sp, #4]
 8005d8c:	4283      	cmp	r3, r0
 8005d8e:	d148      	bne.n	8005e22 <_malloc_r+0xea>
 8005d90:	6823      	ldr	r3, [r4, #0]
 8005d92:	0028      	movs	r0, r5
 8005d94:	1aff      	subs	r7, r7, r3
 8005d96:	0039      	movs	r1, r7
 8005d98:	f7ff ffac 	bl	8005cf4 <sbrk_aligned>
 8005d9c:	3001      	adds	r0, #1
 8005d9e:	d040      	beq.n	8005e22 <_malloc_r+0xea>
 8005da0:	6823      	ldr	r3, [r4, #0]
 8005da2:	19db      	adds	r3, r3, r7
 8005da4:	6023      	str	r3, [r4, #0]
 8005da6:	6833      	ldr	r3, [r6, #0]
 8005da8:	685a      	ldr	r2, [r3, #4]
 8005daa:	2a00      	cmp	r2, #0
 8005dac:	d133      	bne.n	8005e16 <_malloc_r+0xde>
 8005dae:	9b00      	ldr	r3, [sp, #0]
 8005db0:	6033      	str	r3, [r6, #0]
 8005db2:	e019      	b.n	8005de8 <_malloc_r+0xb0>
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	dac9      	bge.n	8005d4c <_malloc_r+0x14>
 8005db8:	230c      	movs	r3, #12
 8005dba:	602b      	str	r3, [r5, #0]
 8005dbc:	2000      	movs	r0, #0
 8005dbe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005dc0:	6821      	ldr	r1, [r4, #0]
 8005dc2:	1bc9      	subs	r1, r1, r7
 8005dc4:	d420      	bmi.n	8005e08 <_malloc_r+0xd0>
 8005dc6:	290b      	cmp	r1, #11
 8005dc8:	d90a      	bls.n	8005de0 <_malloc_r+0xa8>
 8005dca:	19e2      	adds	r2, r4, r7
 8005dcc:	6027      	str	r7, [r4, #0]
 8005dce:	42a3      	cmp	r3, r4
 8005dd0:	d104      	bne.n	8005ddc <_malloc_r+0xa4>
 8005dd2:	6032      	str	r2, [r6, #0]
 8005dd4:	6863      	ldr	r3, [r4, #4]
 8005dd6:	6011      	str	r1, [r2, #0]
 8005dd8:	6053      	str	r3, [r2, #4]
 8005dda:	e005      	b.n	8005de8 <_malloc_r+0xb0>
 8005ddc:	605a      	str	r2, [r3, #4]
 8005dde:	e7f9      	b.n	8005dd4 <_malloc_r+0x9c>
 8005de0:	6862      	ldr	r2, [r4, #4]
 8005de2:	42a3      	cmp	r3, r4
 8005de4:	d10e      	bne.n	8005e04 <_malloc_r+0xcc>
 8005de6:	6032      	str	r2, [r6, #0]
 8005de8:	0028      	movs	r0, r5
 8005dea:	f000 f8df 	bl	8005fac <__malloc_unlock>
 8005dee:	0020      	movs	r0, r4
 8005df0:	2207      	movs	r2, #7
 8005df2:	300b      	adds	r0, #11
 8005df4:	1d23      	adds	r3, r4, #4
 8005df6:	4390      	bics	r0, r2
 8005df8:	1ac2      	subs	r2, r0, r3
 8005dfa:	4298      	cmp	r0, r3
 8005dfc:	d0df      	beq.n	8005dbe <_malloc_r+0x86>
 8005dfe:	1a1b      	subs	r3, r3, r0
 8005e00:	50a3      	str	r3, [r4, r2]
 8005e02:	e7dc      	b.n	8005dbe <_malloc_r+0x86>
 8005e04:	605a      	str	r2, [r3, #4]
 8005e06:	e7ef      	b.n	8005de8 <_malloc_r+0xb0>
 8005e08:	0023      	movs	r3, r4
 8005e0a:	6864      	ldr	r4, [r4, #4]
 8005e0c:	e7a6      	b.n	8005d5c <_malloc_r+0x24>
 8005e0e:	9c00      	ldr	r4, [sp, #0]
 8005e10:	6863      	ldr	r3, [r4, #4]
 8005e12:	9300      	str	r3, [sp, #0]
 8005e14:	e7ad      	b.n	8005d72 <_malloc_r+0x3a>
 8005e16:	001a      	movs	r2, r3
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	42a3      	cmp	r3, r4
 8005e1c:	d1fb      	bne.n	8005e16 <_malloc_r+0xde>
 8005e1e:	2300      	movs	r3, #0
 8005e20:	e7da      	b.n	8005dd8 <_malloc_r+0xa0>
 8005e22:	230c      	movs	r3, #12
 8005e24:	0028      	movs	r0, r5
 8005e26:	602b      	str	r3, [r5, #0]
 8005e28:	f000 f8c0 	bl	8005fac <__malloc_unlock>
 8005e2c:	e7c6      	b.n	8005dbc <_malloc_r+0x84>
 8005e2e:	6007      	str	r7, [r0, #0]
 8005e30:	e7da      	b.n	8005de8 <_malloc_r+0xb0>
 8005e32:	46c0      	nop			@ (mov r8, r8)
 8005e34:	2000139c 	.word	0x2000139c

08005e38 <__sflush_r>:
 8005e38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e3a:	220c      	movs	r2, #12
 8005e3c:	5e8b      	ldrsh	r3, [r1, r2]
 8005e3e:	0005      	movs	r5, r0
 8005e40:	000c      	movs	r4, r1
 8005e42:	071a      	lsls	r2, r3, #28
 8005e44:	d456      	bmi.n	8005ef4 <__sflush_r+0xbc>
 8005e46:	684a      	ldr	r2, [r1, #4]
 8005e48:	2a00      	cmp	r2, #0
 8005e4a:	dc02      	bgt.n	8005e52 <__sflush_r+0x1a>
 8005e4c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8005e4e:	2a00      	cmp	r2, #0
 8005e50:	dd4e      	ble.n	8005ef0 <__sflush_r+0xb8>
 8005e52:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8005e54:	2f00      	cmp	r7, #0
 8005e56:	d04b      	beq.n	8005ef0 <__sflush_r+0xb8>
 8005e58:	2200      	movs	r2, #0
 8005e5a:	2080      	movs	r0, #128	@ 0x80
 8005e5c:	682e      	ldr	r6, [r5, #0]
 8005e5e:	602a      	str	r2, [r5, #0]
 8005e60:	001a      	movs	r2, r3
 8005e62:	0140      	lsls	r0, r0, #5
 8005e64:	6a21      	ldr	r1, [r4, #32]
 8005e66:	4002      	ands	r2, r0
 8005e68:	4203      	tst	r3, r0
 8005e6a:	d033      	beq.n	8005ed4 <__sflush_r+0x9c>
 8005e6c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005e6e:	89a3      	ldrh	r3, [r4, #12]
 8005e70:	075b      	lsls	r3, r3, #29
 8005e72:	d506      	bpl.n	8005e82 <__sflush_r+0x4a>
 8005e74:	6863      	ldr	r3, [r4, #4]
 8005e76:	1ad2      	subs	r2, r2, r3
 8005e78:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d001      	beq.n	8005e82 <__sflush_r+0x4a>
 8005e7e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005e80:	1ad2      	subs	r2, r2, r3
 8005e82:	2300      	movs	r3, #0
 8005e84:	0028      	movs	r0, r5
 8005e86:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8005e88:	6a21      	ldr	r1, [r4, #32]
 8005e8a:	47b8      	blx	r7
 8005e8c:	89a2      	ldrh	r2, [r4, #12]
 8005e8e:	1c43      	adds	r3, r0, #1
 8005e90:	d106      	bne.n	8005ea0 <__sflush_r+0x68>
 8005e92:	6829      	ldr	r1, [r5, #0]
 8005e94:	291d      	cmp	r1, #29
 8005e96:	d846      	bhi.n	8005f26 <__sflush_r+0xee>
 8005e98:	4b29      	ldr	r3, [pc, #164]	@ (8005f40 <__sflush_r+0x108>)
 8005e9a:	410b      	asrs	r3, r1
 8005e9c:	07db      	lsls	r3, r3, #31
 8005e9e:	d442      	bmi.n	8005f26 <__sflush_r+0xee>
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	6063      	str	r3, [r4, #4]
 8005ea4:	6923      	ldr	r3, [r4, #16]
 8005ea6:	6023      	str	r3, [r4, #0]
 8005ea8:	04d2      	lsls	r2, r2, #19
 8005eaa:	d505      	bpl.n	8005eb8 <__sflush_r+0x80>
 8005eac:	1c43      	adds	r3, r0, #1
 8005eae:	d102      	bne.n	8005eb6 <__sflush_r+0x7e>
 8005eb0:	682b      	ldr	r3, [r5, #0]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d100      	bne.n	8005eb8 <__sflush_r+0x80>
 8005eb6:	6560      	str	r0, [r4, #84]	@ 0x54
 8005eb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005eba:	602e      	str	r6, [r5, #0]
 8005ebc:	2900      	cmp	r1, #0
 8005ebe:	d017      	beq.n	8005ef0 <__sflush_r+0xb8>
 8005ec0:	0023      	movs	r3, r4
 8005ec2:	3344      	adds	r3, #68	@ 0x44
 8005ec4:	4299      	cmp	r1, r3
 8005ec6:	d002      	beq.n	8005ece <__sflush_r+0x96>
 8005ec8:	0028      	movs	r0, r5
 8005eca:	f000 f93b 	bl	8006144 <_free_r>
 8005ece:	2300      	movs	r3, #0
 8005ed0:	6363      	str	r3, [r4, #52]	@ 0x34
 8005ed2:	e00d      	b.n	8005ef0 <__sflush_r+0xb8>
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	0028      	movs	r0, r5
 8005ed8:	47b8      	blx	r7
 8005eda:	0002      	movs	r2, r0
 8005edc:	1c43      	adds	r3, r0, #1
 8005ede:	d1c6      	bne.n	8005e6e <__sflush_r+0x36>
 8005ee0:	682b      	ldr	r3, [r5, #0]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d0c3      	beq.n	8005e6e <__sflush_r+0x36>
 8005ee6:	2b1d      	cmp	r3, #29
 8005ee8:	d001      	beq.n	8005eee <__sflush_r+0xb6>
 8005eea:	2b16      	cmp	r3, #22
 8005eec:	d11a      	bne.n	8005f24 <__sflush_r+0xec>
 8005eee:	602e      	str	r6, [r5, #0]
 8005ef0:	2000      	movs	r0, #0
 8005ef2:	e01e      	b.n	8005f32 <__sflush_r+0xfa>
 8005ef4:	690e      	ldr	r6, [r1, #16]
 8005ef6:	2e00      	cmp	r6, #0
 8005ef8:	d0fa      	beq.n	8005ef0 <__sflush_r+0xb8>
 8005efa:	680f      	ldr	r7, [r1, #0]
 8005efc:	600e      	str	r6, [r1, #0]
 8005efe:	1bba      	subs	r2, r7, r6
 8005f00:	9201      	str	r2, [sp, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	079b      	lsls	r3, r3, #30
 8005f06:	d100      	bne.n	8005f0a <__sflush_r+0xd2>
 8005f08:	694a      	ldr	r2, [r1, #20]
 8005f0a:	60a2      	str	r2, [r4, #8]
 8005f0c:	9b01      	ldr	r3, [sp, #4]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	ddee      	ble.n	8005ef0 <__sflush_r+0xb8>
 8005f12:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005f14:	0032      	movs	r2, r6
 8005f16:	001f      	movs	r7, r3
 8005f18:	0028      	movs	r0, r5
 8005f1a:	9b01      	ldr	r3, [sp, #4]
 8005f1c:	6a21      	ldr	r1, [r4, #32]
 8005f1e:	47b8      	blx	r7
 8005f20:	2800      	cmp	r0, #0
 8005f22:	dc07      	bgt.n	8005f34 <__sflush_r+0xfc>
 8005f24:	89a2      	ldrh	r2, [r4, #12]
 8005f26:	2340      	movs	r3, #64	@ 0x40
 8005f28:	2001      	movs	r0, #1
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	b21b      	sxth	r3, r3
 8005f2e:	81a3      	strh	r3, [r4, #12]
 8005f30:	4240      	negs	r0, r0
 8005f32:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005f34:	9b01      	ldr	r3, [sp, #4]
 8005f36:	1836      	adds	r6, r6, r0
 8005f38:	1a1b      	subs	r3, r3, r0
 8005f3a:	9301      	str	r3, [sp, #4]
 8005f3c:	e7e6      	b.n	8005f0c <__sflush_r+0xd4>
 8005f3e:	46c0      	nop			@ (mov r8, r8)
 8005f40:	dfbffffe 	.word	0xdfbffffe

08005f44 <_fflush_r>:
 8005f44:	690b      	ldr	r3, [r1, #16]
 8005f46:	b570      	push	{r4, r5, r6, lr}
 8005f48:	0005      	movs	r5, r0
 8005f4a:	000c      	movs	r4, r1
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d102      	bne.n	8005f56 <_fflush_r+0x12>
 8005f50:	2500      	movs	r5, #0
 8005f52:	0028      	movs	r0, r5
 8005f54:	bd70      	pop	{r4, r5, r6, pc}
 8005f56:	2800      	cmp	r0, #0
 8005f58:	d004      	beq.n	8005f64 <_fflush_r+0x20>
 8005f5a:	6a03      	ldr	r3, [r0, #32]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d101      	bne.n	8005f64 <_fflush_r+0x20>
 8005f60:	f7ff fe00 	bl	8005b64 <__sinit>
 8005f64:	220c      	movs	r2, #12
 8005f66:	5ea3      	ldrsh	r3, [r4, r2]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d0f1      	beq.n	8005f50 <_fflush_r+0xc>
 8005f6c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005f6e:	07d2      	lsls	r2, r2, #31
 8005f70:	d404      	bmi.n	8005f7c <_fflush_r+0x38>
 8005f72:	059b      	lsls	r3, r3, #22
 8005f74:	d402      	bmi.n	8005f7c <_fflush_r+0x38>
 8005f76:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f78:	f7ff fe89 	bl	8005c8e <__retarget_lock_acquire_recursive>
 8005f7c:	0028      	movs	r0, r5
 8005f7e:	0021      	movs	r1, r4
 8005f80:	f7ff ff5a 	bl	8005e38 <__sflush_r>
 8005f84:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005f86:	0005      	movs	r5, r0
 8005f88:	07db      	lsls	r3, r3, #31
 8005f8a:	d4e2      	bmi.n	8005f52 <_fflush_r+0xe>
 8005f8c:	89a3      	ldrh	r3, [r4, #12]
 8005f8e:	059b      	lsls	r3, r3, #22
 8005f90:	d4df      	bmi.n	8005f52 <_fflush_r+0xe>
 8005f92:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f94:	f7ff fe7c 	bl	8005c90 <__retarget_lock_release_recursive>
 8005f98:	e7db      	b.n	8005f52 <_fflush_r+0xe>
	...

08005f9c <__malloc_lock>:
 8005f9c:	b510      	push	{r4, lr}
 8005f9e:	4802      	ldr	r0, [pc, #8]	@ (8005fa8 <__malloc_lock+0xc>)
 8005fa0:	f7ff fe75 	bl	8005c8e <__retarget_lock_acquire_recursive>
 8005fa4:	bd10      	pop	{r4, pc}
 8005fa6:	46c0      	nop			@ (mov r8, r8)
 8005fa8:	20001394 	.word	0x20001394

08005fac <__malloc_unlock>:
 8005fac:	b510      	push	{r4, lr}
 8005fae:	4802      	ldr	r0, [pc, #8]	@ (8005fb8 <__malloc_unlock+0xc>)
 8005fb0:	f7ff fe6e 	bl	8005c90 <__retarget_lock_release_recursive>
 8005fb4:	bd10      	pop	{r4, pc}
 8005fb6:	46c0      	nop			@ (mov r8, r8)
 8005fb8:	20001394 	.word	0x20001394

08005fbc <__sread>:
 8005fbc:	b570      	push	{r4, r5, r6, lr}
 8005fbe:	000c      	movs	r4, r1
 8005fc0:	250e      	movs	r5, #14
 8005fc2:	5f49      	ldrsh	r1, [r1, r5]
 8005fc4:	f000 f87c 	bl	80060c0 <_read_r>
 8005fc8:	2800      	cmp	r0, #0
 8005fca:	db03      	blt.n	8005fd4 <__sread+0x18>
 8005fcc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005fce:	181b      	adds	r3, r3, r0
 8005fd0:	6563      	str	r3, [r4, #84]	@ 0x54
 8005fd2:	bd70      	pop	{r4, r5, r6, pc}
 8005fd4:	89a3      	ldrh	r3, [r4, #12]
 8005fd6:	4a02      	ldr	r2, [pc, #8]	@ (8005fe0 <__sread+0x24>)
 8005fd8:	4013      	ands	r3, r2
 8005fda:	81a3      	strh	r3, [r4, #12]
 8005fdc:	e7f9      	b.n	8005fd2 <__sread+0x16>
 8005fde:	46c0      	nop			@ (mov r8, r8)
 8005fe0:	ffffefff 	.word	0xffffefff

08005fe4 <__swrite>:
 8005fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fe6:	001f      	movs	r7, r3
 8005fe8:	898b      	ldrh	r3, [r1, #12]
 8005fea:	0005      	movs	r5, r0
 8005fec:	000c      	movs	r4, r1
 8005fee:	0016      	movs	r6, r2
 8005ff0:	05db      	lsls	r3, r3, #23
 8005ff2:	d505      	bpl.n	8006000 <__swrite+0x1c>
 8005ff4:	230e      	movs	r3, #14
 8005ff6:	5ec9      	ldrsh	r1, [r1, r3]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	2302      	movs	r3, #2
 8005ffc:	f000 f84c 	bl	8006098 <_lseek_r>
 8006000:	89a3      	ldrh	r3, [r4, #12]
 8006002:	4a05      	ldr	r2, [pc, #20]	@ (8006018 <__swrite+0x34>)
 8006004:	0028      	movs	r0, r5
 8006006:	4013      	ands	r3, r2
 8006008:	81a3      	strh	r3, [r4, #12]
 800600a:	0032      	movs	r2, r6
 800600c:	230e      	movs	r3, #14
 800600e:	5ee1      	ldrsh	r1, [r4, r3]
 8006010:	003b      	movs	r3, r7
 8006012:	f000 f87b 	bl	800610c <_write_r>
 8006016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006018:	ffffefff 	.word	0xffffefff

0800601c <__sseek>:
 800601c:	b570      	push	{r4, r5, r6, lr}
 800601e:	000c      	movs	r4, r1
 8006020:	250e      	movs	r5, #14
 8006022:	5f49      	ldrsh	r1, [r1, r5]
 8006024:	f000 f838 	bl	8006098 <_lseek_r>
 8006028:	89a3      	ldrh	r3, [r4, #12]
 800602a:	1c42      	adds	r2, r0, #1
 800602c:	d103      	bne.n	8006036 <__sseek+0x1a>
 800602e:	4a05      	ldr	r2, [pc, #20]	@ (8006044 <__sseek+0x28>)
 8006030:	4013      	ands	r3, r2
 8006032:	81a3      	strh	r3, [r4, #12]
 8006034:	bd70      	pop	{r4, r5, r6, pc}
 8006036:	2280      	movs	r2, #128	@ 0x80
 8006038:	0152      	lsls	r2, r2, #5
 800603a:	4313      	orrs	r3, r2
 800603c:	81a3      	strh	r3, [r4, #12]
 800603e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006040:	e7f8      	b.n	8006034 <__sseek+0x18>
 8006042:	46c0      	nop			@ (mov r8, r8)
 8006044:	ffffefff 	.word	0xffffefff

08006048 <__sclose>:
 8006048:	b510      	push	{r4, lr}
 800604a:	230e      	movs	r3, #14
 800604c:	5ec9      	ldrsh	r1, [r1, r3]
 800604e:	f000 f811 	bl	8006074 <_close_r>
 8006052:	bd10      	pop	{r4, pc}

08006054 <fiprintf>:
 8006054:	b40e      	push	{r1, r2, r3}
 8006056:	b517      	push	{r0, r1, r2, r4, lr}
 8006058:	4c05      	ldr	r4, [pc, #20]	@ (8006070 <fiprintf+0x1c>)
 800605a:	ab05      	add	r3, sp, #20
 800605c:	cb04      	ldmia	r3!, {r2}
 800605e:	0001      	movs	r1, r0
 8006060:	6820      	ldr	r0, [r4, #0]
 8006062:	9301      	str	r3, [sp, #4]
 8006064:	f000 f8e0 	bl	8006228 <_vfiprintf_r>
 8006068:	bc1e      	pop	{r1, r2, r3, r4}
 800606a:	bc08      	pop	{r3}
 800606c:	b003      	add	sp, #12
 800606e:	4718      	bx	r3
 8006070:	2000041c 	.word	0x2000041c

08006074 <_close_r>:
 8006074:	2300      	movs	r3, #0
 8006076:	b570      	push	{r4, r5, r6, lr}
 8006078:	4d06      	ldr	r5, [pc, #24]	@ (8006094 <_close_r+0x20>)
 800607a:	0004      	movs	r4, r0
 800607c:	0008      	movs	r0, r1
 800607e:	602b      	str	r3, [r5, #0]
 8006080:	f7fb fdca 	bl	8001c18 <_close>
 8006084:	1c43      	adds	r3, r0, #1
 8006086:	d103      	bne.n	8006090 <_close_r+0x1c>
 8006088:	682b      	ldr	r3, [r5, #0]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d000      	beq.n	8006090 <_close_r+0x1c>
 800608e:	6023      	str	r3, [r4, #0]
 8006090:	bd70      	pop	{r4, r5, r6, pc}
 8006092:	46c0      	nop			@ (mov r8, r8)
 8006094:	200013a0 	.word	0x200013a0

08006098 <_lseek_r>:
 8006098:	b570      	push	{r4, r5, r6, lr}
 800609a:	0004      	movs	r4, r0
 800609c:	0008      	movs	r0, r1
 800609e:	0011      	movs	r1, r2
 80060a0:	001a      	movs	r2, r3
 80060a2:	2300      	movs	r3, #0
 80060a4:	4d05      	ldr	r5, [pc, #20]	@ (80060bc <_lseek_r+0x24>)
 80060a6:	602b      	str	r3, [r5, #0]
 80060a8:	f7fb fdd7 	bl	8001c5a <_lseek>
 80060ac:	1c43      	adds	r3, r0, #1
 80060ae:	d103      	bne.n	80060b8 <_lseek_r+0x20>
 80060b0:	682b      	ldr	r3, [r5, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d000      	beq.n	80060b8 <_lseek_r+0x20>
 80060b6:	6023      	str	r3, [r4, #0]
 80060b8:	bd70      	pop	{r4, r5, r6, pc}
 80060ba:	46c0      	nop			@ (mov r8, r8)
 80060bc:	200013a0 	.word	0x200013a0

080060c0 <_read_r>:
 80060c0:	b570      	push	{r4, r5, r6, lr}
 80060c2:	0004      	movs	r4, r0
 80060c4:	0008      	movs	r0, r1
 80060c6:	0011      	movs	r1, r2
 80060c8:	001a      	movs	r2, r3
 80060ca:	2300      	movs	r3, #0
 80060cc:	4d05      	ldr	r5, [pc, #20]	@ (80060e4 <_read_r+0x24>)
 80060ce:	602b      	str	r3, [r5, #0]
 80060d0:	f7fb fd69 	bl	8001ba6 <_read>
 80060d4:	1c43      	adds	r3, r0, #1
 80060d6:	d103      	bne.n	80060e0 <_read_r+0x20>
 80060d8:	682b      	ldr	r3, [r5, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d000      	beq.n	80060e0 <_read_r+0x20>
 80060de:	6023      	str	r3, [r4, #0]
 80060e0:	bd70      	pop	{r4, r5, r6, pc}
 80060e2:	46c0      	nop			@ (mov r8, r8)
 80060e4:	200013a0 	.word	0x200013a0

080060e8 <_sbrk_r>:
 80060e8:	2300      	movs	r3, #0
 80060ea:	b570      	push	{r4, r5, r6, lr}
 80060ec:	4d06      	ldr	r5, [pc, #24]	@ (8006108 <_sbrk_r+0x20>)
 80060ee:	0004      	movs	r4, r0
 80060f0:	0008      	movs	r0, r1
 80060f2:	602b      	str	r3, [r5, #0]
 80060f4:	f7fb fdbc 	bl	8001c70 <_sbrk>
 80060f8:	1c43      	adds	r3, r0, #1
 80060fa:	d103      	bne.n	8006104 <_sbrk_r+0x1c>
 80060fc:	682b      	ldr	r3, [r5, #0]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d000      	beq.n	8006104 <_sbrk_r+0x1c>
 8006102:	6023      	str	r3, [r4, #0]
 8006104:	bd70      	pop	{r4, r5, r6, pc}
 8006106:	46c0      	nop			@ (mov r8, r8)
 8006108:	200013a0 	.word	0x200013a0

0800610c <_write_r>:
 800610c:	b570      	push	{r4, r5, r6, lr}
 800610e:	0004      	movs	r4, r0
 8006110:	0008      	movs	r0, r1
 8006112:	0011      	movs	r1, r2
 8006114:	001a      	movs	r2, r3
 8006116:	2300      	movs	r3, #0
 8006118:	4d05      	ldr	r5, [pc, #20]	@ (8006130 <_write_r+0x24>)
 800611a:	602b      	str	r3, [r5, #0]
 800611c:	f7fb fd60 	bl	8001be0 <_write>
 8006120:	1c43      	adds	r3, r0, #1
 8006122:	d103      	bne.n	800612c <_write_r+0x20>
 8006124:	682b      	ldr	r3, [r5, #0]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d000      	beq.n	800612c <_write_r+0x20>
 800612a:	6023      	str	r3, [r4, #0]
 800612c:	bd70      	pop	{r4, r5, r6, pc}
 800612e:	46c0      	nop			@ (mov r8, r8)
 8006130:	200013a0 	.word	0x200013a0

08006134 <abort>:
 8006134:	2006      	movs	r0, #6
 8006136:	b510      	push	{r4, lr}
 8006138:	f000 fc6a 	bl	8006a10 <raise>
 800613c:	2001      	movs	r0, #1
 800613e:	f7fb fd25 	bl	8001b8c <_exit>
	...

08006144 <_free_r>:
 8006144:	b570      	push	{r4, r5, r6, lr}
 8006146:	0005      	movs	r5, r0
 8006148:	1e0c      	subs	r4, r1, #0
 800614a:	d010      	beq.n	800616e <_free_r+0x2a>
 800614c:	3c04      	subs	r4, #4
 800614e:	6823      	ldr	r3, [r4, #0]
 8006150:	2b00      	cmp	r3, #0
 8006152:	da00      	bge.n	8006156 <_free_r+0x12>
 8006154:	18e4      	adds	r4, r4, r3
 8006156:	0028      	movs	r0, r5
 8006158:	f7ff ff20 	bl	8005f9c <__malloc_lock>
 800615c:	4a1d      	ldr	r2, [pc, #116]	@ (80061d4 <_free_r+0x90>)
 800615e:	6813      	ldr	r3, [r2, #0]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d105      	bne.n	8006170 <_free_r+0x2c>
 8006164:	6063      	str	r3, [r4, #4]
 8006166:	6014      	str	r4, [r2, #0]
 8006168:	0028      	movs	r0, r5
 800616a:	f7ff ff1f 	bl	8005fac <__malloc_unlock>
 800616e:	bd70      	pop	{r4, r5, r6, pc}
 8006170:	42a3      	cmp	r3, r4
 8006172:	d908      	bls.n	8006186 <_free_r+0x42>
 8006174:	6820      	ldr	r0, [r4, #0]
 8006176:	1821      	adds	r1, r4, r0
 8006178:	428b      	cmp	r3, r1
 800617a:	d1f3      	bne.n	8006164 <_free_r+0x20>
 800617c:	6819      	ldr	r1, [r3, #0]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	1809      	adds	r1, r1, r0
 8006182:	6021      	str	r1, [r4, #0]
 8006184:	e7ee      	b.n	8006164 <_free_r+0x20>
 8006186:	001a      	movs	r2, r3
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d001      	beq.n	8006192 <_free_r+0x4e>
 800618e:	42a3      	cmp	r3, r4
 8006190:	d9f9      	bls.n	8006186 <_free_r+0x42>
 8006192:	6811      	ldr	r1, [r2, #0]
 8006194:	1850      	adds	r0, r2, r1
 8006196:	42a0      	cmp	r0, r4
 8006198:	d10b      	bne.n	80061b2 <_free_r+0x6e>
 800619a:	6820      	ldr	r0, [r4, #0]
 800619c:	1809      	adds	r1, r1, r0
 800619e:	1850      	adds	r0, r2, r1
 80061a0:	6011      	str	r1, [r2, #0]
 80061a2:	4283      	cmp	r3, r0
 80061a4:	d1e0      	bne.n	8006168 <_free_r+0x24>
 80061a6:	6818      	ldr	r0, [r3, #0]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	1841      	adds	r1, r0, r1
 80061ac:	6011      	str	r1, [r2, #0]
 80061ae:	6053      	str	r3, [r2, #4]
 80061b0:	e7da      	b.n	8006168 <_free_r+0x24>
 80061b2:	42a0      	cmp	r0, r4
 80061b4:	d902      	bls.n	80061bc <_free_r+0x78>
 80061b6:	230c      	movs	r3, #12
 80061b8:	602b      	str	r3, [r5, #0]
 80061ba:	e7d5      	b.n	8006168 <_free_r+0x24>
 80061bc:	6820      	ldr	r0, [r4, #0]
 80061be:	1821      	adds	r1, r4, r0
 80061c0:	428b      	cmp	r3, r1
 80061c2:	d103      	bne.n	80061cc <_free_r+0x88>
 80061c4:	6819      	ldr	r1, [r3, #0]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	1809      	adds	r1, r1, r0
 80061ca:	6021      	str	r1, [r4, #0]
 80061cc:	6063      	str	r3, [r4, #4]
 80061ce:	6054      	str	r4, [r2, #4]
 80061d0:	e7ca      	b.n	8006168 <_free_r+0x24>
 80061d2:	46c0      	nop			@ (mov r8, r8)
 80061d4:	2000139c 	.word	0x2000139c

080061d8 <__sfputc_r>:
 80061d8:	6893      	ldr	r3, [r2, #8]
 80061da:	b510      	push	{r4, lr}
 80061dc:	3b01      	subs	r3, #1
 80061de:	6093      	str	r3, [r2, #8]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	da04      	bge.n	80061ee <__sfputc_r+0x16>
 80061e4:	6994      	ldr	r4, [r2, #24]
 80061e6:	42a3      	cmp	r3, r4
 80061e8:	db07      	blt.n	80061fa <__sfputc_r+0x22>
 80061ea:	290a      	cmp	r1, #10
 80061ec:	d005      	beq.n	80061fa <__sfputc_r+0x22>
 80061ee:	6813      	ldr	r3, [r2, #0]
 80061f0:	1c58      	adds	r0, r3, #1
 80061f2:	6010      	str	r0, [r2, #0]
 80061f4:	7019      	strb	r1, [r3, #0]
 80061f6:	0008      	movs	r0, r1
 80061f8:	bd10      	pop	{r4, pc}
 80061fa:	f000 faaf 	bl	800675c <__swbuf_r>
 80061fe:	0001      	movs	r1, r0
 8006200:	e7f9      	b.n	80061f6 <__sfputc_r+0x1e>

08006202 <__sfputs_r>:
 8006202:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006204:	0006      	movs	r6, r0
 8006206:	000f      	movs	r7, r1
 8006208:	0014      	movs	r4, r2
 800620a:	18d5      	adds	r5, r2, r3
 800620c:	42ac      	cmp	r4, r5
 800620e:	d101      	bne.n	8006214 <__sfputs_r+0x12>
 8006210:	2000      	movs	r0, #0
 8006212:	e007      	b.n	8006224 <__sfputs_r+0x22>
 8006214:	7821      	ldrb	r1, [r4, #0]
 8006216:	003a      	movs	r2, r7
 8006218:	0030      	movs	r0, r6
 800621a:	f7ff ffdd 	bl	80061d8 <__sfputc_r>
 800621e:	3401      	adds	r4, #1
 8006220:	1c43      	adds	r3, r0, #1
 8006222:	d1f3      	bne.n	800620c <__sfputs_r+0xa>
 8006224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006228 <_vfiprintf_r>:
 8006228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800622a:	b0a1      	sub	sp, #132	@ 0x84
 800622c:	000f      	movs	r7, r1
 800622e:	0015      	movs	r5, r2
 8006230:	001e      	movs	r6, r3
 8006232:	9003      	str	r0, [sp, #12]
 8006234:	2800      	cmp	r0, #0
 8006236:	d004      	beq.n	8006242 <_vfiprintf_r+0x1a>
 8006238:	6a03      	ldr	r3, [r0, #32]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d101      	bne.n	8006242 <_vfiprintf_r+0x1a>
 800623e:	f7ff fc91 	bl	8005b64 <__sinit>
 8006242:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006244:	07db      	lsls	r3, r3, #31
 8006246:	d405      	bmi.n	8006254 <_vfiprintf_r+0x2c>
 8006248:	89bb      	ldrh	r3, [r7, #12]
 800624a:	059b      	lsls	r3, r3, #22
 800624c:	d402      	bmi.n	8006254 <_vfiprintf_r+0x2c>
 800624e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006250:	f7ff fd1d 	bl	8005c8e <__retarget_lock_acquire_recursive>
 8006254:	89bb      	ldrh	r3, [r7, #12]
 8006256:	071b      	lsls	r3, r3, #28
 8006258:	d502      	bpl.n	8006260 <_vfiprintf_r+0x38>
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d113      	bne.n	8006288 <_vfiprintf_r+0x60>
 8006260:	0039      	movs	r1, r7
 8006262:	9803      	ldr	r0, [sp, #12]
 8006264:	f000 fabc 	bl	80067e0 <__swsetup_r>
 8006268:	2800      	cmp	r0, #0
 800626a:	d00d      	beq.n	8006288 <_vfiprintf_r+0x60>
 800626c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800626e:	07db      	lsls	r3, r3, #31
 8006270:	d503      	bpl.n	800627a <_vfiprintf_r+0x52>
 8006272:	2001      	movs	r0, #1
 8006274:	4240      	negs	r0, r0
 8006276:	b021      	add	sp, #132	@ 0x84
 8006278:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800627a:	89bb      	ldrh	r3, [r7, #12]
 800627c:	059b      	lsls	r3, r3, #22
 800627e:	d4f8      	bmi.n	8006272 <_vfiprintf_r+0x4a>
 8006280:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006282:	f7ff fd05 	bl	8005c90 <__retarget_lock_release_recursive>
 8006286:	e7f4      	b.n	8006272 <_vfiprintf_r+0x4a>
 8006288:	2300      	movs	r3, #0
 800628a:	ac08      	add	r4, sp, #32
 800628c:	6163      	str	r3, [r4, #20]
 800628e:	3320      	adds	r3, #32
 8006290:	7663      	strb	r3, [r4, #25]
 8006292:	3310      	adds	r3, #16
 8006294:	76a3      	strb	r3, [r4, #26]
 8006296:	9607      	str	r6, [sp, #28]
 8006298:	002e      	movs	r6, r5
 800629a:	7833      	ldrb	r3, [r6, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d001      	beq.n	80062a4 <_vfiprintf_r+0x7c>
 80062a0:	2b25      	cmp	r3, #37	@ 0x25
 80062a2:	d148      	bne.n	8006336 <_vfiprintf_r+0x10e>
 80062a4:	1b73      	subs	r3, r6, r5
 80062a6:	9305      	str	r3, [sp, #20]
 80062a8:	42ae      	cmp	r6, r5
 80062aa:	d00b      	beq.n	80062c4 <_vfiprintf_r+0x9c>
 80062ac:	002a      	movs	r2, r5
 80062ae:	0039      	movs	r1, r7
 80062b0:	9803      	ldr	r0, [sp, #12]
 80062b2:	f7ff ffa6 	bl	8006202 <__sfputs_r>
 80062b6:	3001      	adds	r0, #1
 80062b8:	d100      	bne.n	80062bc <_vfiprintf_r+0x94>
 80062ba:	e0ae      	b.n	800641a <_vfiprintf_r+0x1f2>
 80062bc:	6963      	ldr	r3, [r4, #20]
 80062be:	9a05      	ldr	r2, [sp, #20]
 80062c0:	189b      	adds	r3, r3, r2
 80062c2:	6163      	str	r3, [r4, #20]
 80062c4:	7833      	ldrb	r3, [r6, #0]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d100      	bne.n	80062cc <_vfiprintf_r+0xa4>
 80062ca:	e0a6      	b.n	800641a <_vfiprintf_r+0x1f2>
 80062cc:	2201      	movs	r2, #1
 80062ce:	2300      	movs	r3, #0
 80062d0:	4252      	negs	r2, r2
 80062d2:	6062      	str	r2, [r4, #4]
 80062d4:	a904      	add	r1, sp, #16
 80062d6:	3254      	adds	r2, #84	@ 0x54
 80062d8:	1852      	adds	r2, r2, r1
 80062da:	1c75      	adds	r5, r6, #1
 80062dc:	6023      	str	r3, [r4, #0]
 80062de:	60e3      	str	r3, [r4, #12]
 80062e0:	60a3      	str	r3, [r4, #8]
 80062e2:	7013      	strb	r3, [r2, #0]
 80062e4:	65a3      	str	r3, [r4, #88]	@ 0x58
 80062e6:	4b59      	ldr	r3, [pc, #356]	@ (800644c <_vfiprintf_r+0x224>)
 80062e8:	2205      	movs	r2, #5
 80062ea:	0018      	movs	r0, r3
 80062ec:	7829      	ldrb	r1, [r5, #0]
 80062ee:	9305      	str	r3, [sp, #20]
 80062f0:	f000 fbae 	bl	8006a50 <memchr>
 80062f4:	1c6e      	adds	r6, r5, #1
 80062f6:	2800      	cmp	r0, #0
 80062f8:	d11f      	bne.n	800633a <_vfiprintf_r+0x112>
 80062fa:	6822      	ldr	r2, [r4, #0]
 80062fc:	06d3      	lsls	r3, r2, #27
 80062fe:	d504      	bpl.n	800630a <_vfiprintf_r+0xe2>
 8006300:	2353      	movs	r3, #83	@ 0x53
 8006302:	a904      	add	r1, sp, #16
 8006304:	185b      	adds	r3, r3, r1
 8006306:	2120      	movs	r1, #32
 8006308:	7019      	strb	r1, [r3, #0]
 800630a:	0713      	lsls	r3, r2, #28
 800630c:	d504      	bpl.n	8006318 <_vfiprintf_r+0xf0>
 800630e:	2353      	movs	r3, #83	@ 0x53
 8006310:	a904      	add	r1, sp, #16
 8006312:	185b      	adds	r3, r3, r1
 8006314:	212b      	movs	r1, #43	@ 0x2b
 8006316:	7019      	strb	r1, [r3, #0]
 8006318:	782b      	ldrb	r3, [r5, #0]
 800631a:	2b2a      	cmp	r3, #42	@ 0x2a
 800631c:	d016      	beq.n	800634c <_vfiprintf_r+0x124>
 800631e:	002e      	movs	r6, r5
 8006320:	2100      	movs	r1, #0
 8006322:	200a      	movs	r0, #10
 8006324:	68e3      	ldr	r3, [r4, #12]
 8006326:	7832      	ldrb	r2, [r6, #0]
 8006328:	1c75      	adds	r5, r6, #1
 800632a:	3a30      	subs	r2, #48	@ 0x30
 800632c:	2a09      	cmp	r2, #9
 800632e:	d950      	bls.n	80063d2 <_vfiprintf_r+0x1aa>
 8006330:	2900      	cmp	r1, #0
 8006332:	d111      	bne.n	8006358 <_vfiprintf_r+0x130>
 8006334:	e017      	b.n	8006366 <_vfiprintf_r+0x13e>
 8006336:	3601      	adds	r6, #1
 8006338:	e7af      	b.n	800629a <_vfiprintf_r+0x72>
 800633a:	9b05      	ldr	r3, [sp, #20]
 800633c:	6822      	ldr	r2, [r4, #0]
 800633e:	1ac0      	subs	r0, r0, r3
 8006340:	2301      	movs	r3, #1
 8006342:	4083      	lsls	r3, r0
 8006344:	4313      	orrs	r3, r2
 8006346:	0035      	movs	r5, r6
 8006348:	6023      	str	r3, [r4, #0]
 800634a:	e7cc      	b.n	80062e6 <_vfiprintf_r+0xbe>
 800634c:	9b07      	ldr	r3, [sp, #28]
 800634e:	1d19      	adds	r1, r3, #4
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	9107      	str	r1, [sp, #28]
 8006354:	2b00      	cmp	r3, #0
 8006356:	db01      	blt.n	800635c <_vfiprintf_r+0x134>
 8006358:	930b      	str	r3, [sp, #44]	@ 0x2c
 800635a:	e004      	b.n	8006366 <_vfiprintf_r+0x13e>
 800635c:	425b      	negs	r3, r3
 800635e:	60e3      	str	r3, [r4, #12]
 8006360:	2302      	movs	r3, #2
 8006362:	4313      	orrs	r3, r2
 8006364:	6023      	str	r3, [r4, #0]
 8006366:	7833      	ldrb	r3, [r6, #0]
 8006368:	2b2e      	cmp	r3, #46	@ 0x2e
 800636a:	d10c      	bne.n	8006386 <_vfiprintf_r+0x15e>
 800636c:	7873      	ldrb	r3, [r6, #1]
 800636e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006370:	d134      	bne.n	80063dc <_vfiprintf_r+0x1b4>
 8006372:	9b07      	ldr	r3, [sp, #28]
 8006374:	3602      	adds	r6, #2
 8006376:	1d1a      	adds	r2, r3, #4
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	9207      	str	r2, [sp, #28]
 800637c:	2b00      	cmp	r3, #0
 800637e:	da01      	bge.n	8006384 <_vfiprintf_r+0x15c>
 8006380:	2301      	movs	r3, #1
 8006382:	425b      	negs	r3, r3
 8006384:	9309      	str	r3, [sp, #36]	@ 0x24
 8006386:	4d32      	ldr	r5, [pc, #200]	@ (8006450 <_vfiprintf_r+0x228>)
 8006388:	2203      	movs	r2, #3
 800638a:	0028      	movs	r0, r5
 800638c:	7831      	ldrb	r1, [r6, #0]
 800638e:	f000 fb5f 	bl	8006a50 <memchr>
 8006392:	2800      	cmp	r0, #0
 8006394:	d006      	beq.n	80063a4 <_vfiprintf_r+0x17c>
 8006396:	2340      	movs	r3, #64	@ 0x40
 8006398:	1b40      	subs	r0, r0, r5
 800639a:	4083      	lsls	r3, r0
 800639c:	6822      	ldr	r2, [r4, #0]
 800639e:	3601      	adds	r6, #1
 80063a0:	4313      	orrs	r3, r2
 80063a2:	6023      	str	r3, [r4, #0]
 80063a4:	7831      	ldrb	r1, [r6, #0]
 80063a6:	2206      	movs	r2, #6
 80063a8:	482a      	ldr	r0, [pc, #168]	@ (8006454 <_vfiprintf_r+0x22c>)
 80063aa:	1c75      	adds	r5, r6, #1
 80063ac:	7621      	strb	r1, [r4, #24]
 80063ae:	f000 fb4f 	bl	8006a50 <memchr>
 80063b2:	2800      	cmp	r0, #0
 80063b4:	d040      	beq.n	8006438 <_vfiprintf_r+0x210>
 80063b6:	4b28      	ldr	r3, [pc, #160]	@ (8006458 <_vfiprintf_r+0x230>)
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d122      	bne.n	8006402 <_vfiprintf_r+0x1da>
 80063bc:	2207      	movs	r2, #7
 80063be:	9b07      	ldr	r3, [sp, #28]
 80063c0:	3307      	adds	r3, #7
 80063c2:	4393      	bics	r3, r2
 80063c4:	3308      	adds	r3, #8
 80063c6:	9307      	str	r3, [sp, #28]
 80063c8:	6963      	ldr	r3, [r4, #20]
 80063ca:	9a04      	ldr	r2, [sp, #16]
 80063cc:	189b      	adds	r3, r3, r2
 80063ce:	6163      	str	r3, [r4, #20]
 80063d0:	e762      	b.n	8006298 <_vfiprintf_r+0x70>
 80063d2:	4343      	muls	r3, r0
 80063d4:	002e      	movs	r6, r5
 80063d6:	2101      	movs	r1, #1
 80063d8:	189b      	adds	r3, r3, r2
 80063da:	e7a4      	b.n	8006326 <_vfiprintf_r+0xfe>
 80063dc:	2300      	movs	r3, #0
 80063de:	200a      	movs	r0, #10
 80063e0:	0019      	movs	r1, r3
 80063e2:	3601      	adds	r6, #1
 80063e4:	6063      	str	r3, [r4, #4]
 80063e6:	7832      	ldrb	r2, [r6, #0]
 80063e8:	1c75      	adds	r5, r6, #1
 80063ea:	3a30      	subs	r2, #48	@ 0x30
 80063ec:	2a09      	cmp	r2, #9
 80063ee:	d903      	bls.n	80063f8 <_vfiprintf_r+0x1d0>
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d0c8      	beq.n	8006386 <_vfiprintf_r+0x15e>
 80063f4:	9109      	str	r1, [sp, #36]	@ 0x24
 80063f6:	e7c6      	b.n	8006386 <_vfiprintf_r+0x15e>
 80063f8:	4341      	muls	r1, r0
 80063fa:	002e      	movs	r6, r5
 80063fc:	2301      	movs	r3, #1
 80063fe:	1889      	adds	r1, r1, r2
 8006400:	e7f1      	b.n	80063e6 <_vfiprintf_r+0x1be>
 8006402:	aa07      	add	r2, sp, #28
 8006404:	9200      	str	r2, [sp, #0]
 8006406:	0021      	movs	r1, r4
 8006408:	003a      	movs	r2, r7
 800640a:	4b14      	ldr	r3, [pc, #80]	@ (800645c <_vfiprintf_r+0x234>)
 800640c:	9803      	ldr	r0, [sp, #12]
 800640e:	e000      	b.n	8006412 <_vfiprintf_r+0x1ea>
 8006410:	bf00      	nop
 8006412:	9004      	str	r0, [sp, #16]
 8006414:	9b04      	ldr	r3, [sp, #16]
 8006416:	3301      	adds	r3, #1
 8006418:	d1d6      	bne.n	80063c8 <_vfiprintf_r+0x1a0>
 800641a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800641c:	07db      	lsls	r3, r3, #31
 800641e:	d405      	bmi.n	800642c <_vfiprintf_r+0x204>
 8006420:	89bb      	ldrh	r3, [r7, #12]
 8006422:	059b      	lsls	r3, r3, #22
 8006424:	d402      	bmi.n	800642c <_vfiprintf_r+0x204>
 8006426:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006428:	f7ff fc32 	bl	8005c90 <__retarget_lock_release_recursive>
 800642c:	89bb      	ldrh	r3, [r7, #12]
 800642e:	065b      	lsls	r3, r3, #25
 8006430:	d500      	bpl.n	8006434 <_vfiprintf_r+0x20c>
 8006432:	e71e      	b.n	8006272 <_vfiprintf_r+0x4a>
 8006434:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8006436:	e71e      	b.n	8006276 <_vfiprintf_r+0x4e>
 8006438:	aa07      	add	r2, sp, #28
 800643a:	9200      	str	r2, [sp, #0]
 800643c:	0021      	movs	r1, r4
 800643e:	003a      	movs	r2, r7
 8006440:	4b06      	ldr	r3, [pc, #24]	@ (800645c <_vfiprintf_r+0x234>)
 8006442:	9803      	ldr	r0, [sp, #12]
 8006444:	f000 f87c 	bl	8006540 <_printf_i>
 8006448:	e7e3      	b.n	8006412 <_vfiprintf_r+0x1ea>
 800644a:	46c0      	nop			@ (mov r8, r8)
 800644c:	08006cb3 	.word	0x08006cb3
 8006450:	08006cb9 	.word	0x08006cb9
 8006454:	08006cbd 	.word	0x08006cbd
 8006458:	00000000 	.word	0x00000000
 800645c:	08006203 	.word	0x08006203

08006460 <_printf_common>:
 8006460:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006462:	0016      	movs	r6, r2
 8006464:	9301      	str	r3, [sp, #4]
 8006466:	688a      	ldr	r2, [r1, #8]
 8006468:	690b      	ldr	r3, [r1, #16]
 800646a:	000c      	movs	r4, r1
 800646c:	9000      	str	r0, [sp, #0]
 800646e:	4293      	cmp	r3, r2
 8006470:	da00      	bge.n	8006474 <_printf_common+0x14>
 8006472:	0013      	movs	r3, r2
 8006474:	0022      	movs	r2, r4
 8006476:	6033      	str	r3, [r6, #0]
 8006478:	3243      	adds	r2, #67	@ 0x43
 800647a:	7812      	ldrb	r2, [r2, #0]
 800647c:	2a00      	cmp	r2, #0
 800647e:	d001      	beq.n	8006484 <_printf_common+0x24>
 8006480:	3301      	adds	r3, #1
 8006482:	6033      	str	r3, [r6, #0]
 8006484:	6823      	ldr	r3, [r4, #0]
 8006486:	069b      	lsls	r3, r3, #26
 8006488:	d502      	bpl.n	8006490 <_printf_common+0x30>
 800648a:	6833      	ldr	r3, [r6, #0]
 800648c:	3302      	adds	r3, #2
 800648e:	6033      	str	r3, [r6, #0]
 8006490:	6822      	ldr	r2, [r4, #0]
 8006492:	2306      	movs	r3, #6
 8006494:	0015      	movs	r5, r2
 8006496:	401d      	ands	r5, r3
 8006498:	421a      	tst	r2, r3
 800649a:	d027      	beq.n	80064ec <_printf_common+0x8c>
 800649c:	0023      	movs	r3, r4
 800649e:	3343      	adds	r3, #67	@ 0x43
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	1e5a      	subs	r2, r3, #1
 80064a4:	4193      	sbcs	r3, r2
 80064a6:	6822      	ldr	r2, [r4, #0]
 80064a8:	0692      	lsls	r2, r2, #26
 80064aa:	d430      	bmi.n	800650e <_printf_common+0xae>
 80064ac:	0022      	movs	r2, r4
 80064ae:	9901      	ldr	r1, [sp, #4]
 80064b0:	9800      	ldr	r0, [sp, #0]
 80064b2:	9d08      	ldr	r5, [sp, #32]
 80064b4:	3243      	adds	r2, #67	@ 0x43
 80064b6:	47a8      	blx	r5
 80064b8:	3001      	adds	r0, #1
 80064ba:	d025      	beq.n	8006508 <_printf_common+0xa8>
 80064bc:	2206      	movs	r2, #6
 80064be:	6823      	ldr	r3, [r4, #0]
 80064c0:	2500      	movs	r5, #0
 80064c2:	4013      	ands	r3, r2
 80064c4:	2b04      	cmp	r3, #4
 80064c6:	d105      	bne.n	80064d4 <_printf_common+0x74>
 80064c8:	6833      	ldr	r3, [r6, #0]
 80064ca:	68e5      	ldr	r5, [r4, #12]
 80064cc:	1aed      	subs	r5, r5, r3
 80064ce:	43eb      	mvns	r3, r5
 80064d0:	17db      	asrs	r3, r3, #31
 80064d2:	401d      	ands	r5, r3
 80064d4:	68a3      	ldr	r3, [r4, #8]
 80064d6:	6922      	ldr	r2, [r4, #16]
 80064d8:	4293      	cmp	r3, r2
 80064da:	dd01      	ble.n	80064e0 <_printf_common+0x80>
 80064dc:	1a9b      	subs	r3, r3, r2
 80064de:	18ed      	adds	r5, r5, r3
 80064e0:	2600      	movs	r6, #0
 80064e2:	42b5      	cmp	r5, r6
 80064e4:	d120      	bne.n	8006528 <_printf_common+0xc8>
 80064e6:	2000      	movs	r0, #0
 80064e8:	e010      	b.n	800650c <_printf_common+0xac>
 80064ea:	3501      	adds	r5, #1
 80064ec:	68e3      	ldr	r3, [r4, #12]
 80064ee:	6832      	ldr	r2, [r6, #0]
 80064f0:	1a9b      	subs	r3, r3, r2
 80064f2:	42ab      	cmp	r3, r5
 80064f4:	ddd2      	ble.n	800649c <_printf_common+0x3c>
 80064f6:	0022      	movs	r2, r4
 80064f8:	2301      	movs	r3, #1
 80064fa:	9901      	ldr	r1, [sp, #4]
 80064fc:	9800      	ldr	r0, [sp, #0]
 80064fe:	9f08      	ldr	r7, [sp, #32]
 8006500:	3219      	adds	r2, #25
 8006502:	47b8      	blx	r7
 8006504:	3001      	adds	r0, #1
 8006506:	d1f0      	bne.n	80064ea <_printf_common+0x8a>
 8006508:	2001      	movs	r0, #1
 800650a:	4240      	negs	r0, r0
 800650c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800650e:	2030      	movs	r0, #48	@ 0x30
 8006510:	18e1      	adds	r1, r4, r3
 8006512:	3143      	adds	r1, #67	@ 0x43
 8006514:	7008      	strb	r0, [r1, #0]
 8006516:	0021      	movs	r1, r4
 8006518:	1c5a      	adds	r2, r3, #1
 800651a:	3145      	adds	r1, #69	@ 0x45
 800651c:	7809      	ldrb	r1, [r1, #0]
 800651e:	18a2      	adds	r2, r4, r2
 8006520:	3243      	adds	r2, #67	@ 0x43
 8006522:	3302      	adds	r3, #2
 8006524:	7011      	strb	r1, [r2, #0]
 8006526:	e7c1      	b.n	80064ac <_printf_common+0x4c>
 8006528:	0022      	movs	r2, r4
 800652a:	2301      	movs	r3, #1
 800652c:	9901      	ldr	r1, [sp, #4]
 800652e:	9800      	ldr	r0, [sp, #0]
 8006530:	9f08      	ldr	r7, [sp, #32]
 8006532:	321a      	adds	r2, #26
 8006534:	47b8      	blx	r7
 8006536:	3001      	adds	r0, #1
 8006538:	d0e6      	beq.n	8006508 <_printf_common+0xa8>
 800653a:	3601      	adds	r6, #1
 800653c:	e7d1      	b.n	80064e2 <_printf_common+0x82>
	...

08006540 <_printf_i>:
 8006540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006542:	b08b      	sub	sp, #44	@ 0x2c
 8006544:	9206      	str	r2, [sp, #24]
 8006546:	000a      	movs	r2, r1
 8006548:	3243      	adds	r2, #67	@ 0x43
 800654a:	9307      	str	r3, [sp, #28]
 800654c:	9005      	str	r0, [sp, #20]
 800654e:	9203      	str	r2, [sp, #12]
 8006550:	7e0a      	ldrb	r2, [r1, #24]
 8006552:	000c      	movs	r4, r1
 8006554:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006556:	2a78      	cmp	r2, #120	@ 0x78
 8006558:	d809      	bhi.n	800656e <_printf_i+0x2e>
 800655a:	2a62      	cmp	r2, #98	@ 0x62
 800655c:	d80b      	bhi.n	8006576 <_printf_i+0x36>
 800655e:	2a00      	cmp	r2, #0
 8006560:	d100      	bne.n	8006564 <_printf_i+0x24>
 8006562:	e0bc      	b.n	80066de <_printf_i+0x19e>
 8006564:	497b      	ldr	r1, [pc, #492]	@ (8006754 <_printf_i+0x214>)
 8006566:	9104      	str	r1, [sp, #16]
 8006568:	2a58      	cmp	r2, #88	@ 0x58
 800656a:	d100      	bne.n	800656e <_printf_i+0x2e>
 800656c:	e090      	b.n	8006690 <_printf_i+0x150>
 800656e:	0025      	movs	r5, r4
 8006570:	3542      	adds	r5, #66	@ 0x42
 8006572:	702a      	strb	r2, [r5, #0]
 8006574:	e022      	b.n	80065bc <_printf_i+0x7c>
 8006576:	0010      	movs	r0, r2
 8006578:	3863      	subs	r0, #99	@ 0x63
 800657a:	2815      	cmp	r0, #21
 800657c:	d8f7      	bhi.n	800656e <_printf_i+0x2e>
 800657e:	f7f9 fdc1 	bl	8000104 <__gnu_thumb1_case_shi>
 8006582:	0016      	.short	0x0016
 8006584:	fff6001f 	.word	0xfff6001f
 8006588:	fff6fff6 	.word	0xfff6fff6
 800658c:	001ffff6 	.word	0x001ffff6
 8006590:	fff6fff6 	.word	0xfff6fff6
 8006594:	fff6fff6 	.word	0xfff6fff6
 8006598:	003600a1 	.word	0x003600a1
 800659c:	fff60080 	.word	0xfff60080
 80065a0:	00b2fff6 	.word	0x00b2fff6
 80065a4:	0036fff6 	.word	0x0036fff6
 80065a8:	fff6fff6 	.word	0xfff6fff6
 80065ac:	0084      	.short	0x0084
 80065ae:	0025      	movs	r5, r4
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	3542      	adds	r5, #66	@ 0x42
 80065b4:	1d11      	adds	r1, r2, #4
 80065b6:	6019      	str	r1, [r3, #0]
 80065b8:	6813      	ldr	r3, [r2, #0]
 80065ba:	702b      	strb	r3, [r5, #0]
 80065bc:	2301      	movs	r3, #1
 80065be:	e0a0      	b.n	8006702 <_printf_i+0x1c2>
 80065c0:	6818      	ldr	r0, [r3, #0]
 80065c2:	6809      	ldr	r1, [r1, #0]
 80065c4:	1d02      	adds	r2, r0, #4
 80065c6:	060d      	lsls	r5, r1, #24
 80065c8:	d50b      	bpl.n	80065e2 <_printf_i+0xa2>
 80065ca:	6806      	ldr	r6, [r0, #0]
 80065cc:	601a      	str	r2, [r3, #0]
 80065ce:	2e00      	cmp	r6, #0
 80065d0:	da03      	bge.n	80065da <_printf_i+0x9a>
 80065d2:	232d      	movs	r3, #45	@ 0x2d
 80065d4:	9a03      	ldr	r2, [sp, #12]
 80065d6:	4276      	negs	r6, r6
 80065d8:	7013      	strb	r3, [r2, #0]
 80065da:	4b5e      	ldr	r3, [pc, #376]	@ (8006754 <_printf_i+0x214>)
 80065dc:	270a      	movs	r7, #10
 80065de:	9304      	str	r3, [sp, #16]
 80065e0:	e018      	b.n	8006614 <_printf_i+0xd4>
 80065e2:	6806      	ldr	r6, [r0, #0]
 80065e4:	601a      	str	r2, [r3, #0]
 80065e6:	0649      	lsls	r1, r1, #25
 80065e8:	d5f1      	bpl.n	80065ce <_printf_i+0x8e>
 80065ea:	b236      	sxth	r6, r6
 80065ec:	e7ef      	b.n	80065ce <_printf_i+0x8e>
 80065ee:	6808      	ldr	r0, [r1, #0]
 80065f0:	6819      	ldr	r1, [r3, #0]
 80065f2:	c940      	ldmia	r1!, {r6}
 80065f4:	0605      	lsls	r5, r0, #24
 80065f6:	d402      	bmi.n	80065fe <_printf_i+0xbe>
 80065f8:	0640      	lsls	r0, r0, #25
 80065fa:	d500      	bpl.n	80065fe <_printf_i+0xbe>
 80065fc:	b2b6      	uxth	r6, r6
 80065fe:	6019      	str	r1, [r3, #0]
 8006600:	4b54      	ldr	r3, [pc, #336]	@ (8006754 <_printf_i+0x214>)
 8006602:	270a      	movs	r7, #10
 8006604:	9304      	str	r3, [sp, #16]
 8006606:	2a6f      	cmp	r2, #111	@ 0x6f
 8006608:	d100      	bne.n	800660c <_printf_i+0xcc>
 800660a:	3f02      	subs	r7, #2
 800660c:	0023      	movs	r3, r4
 800660e:	2200      	movs	r2, #0
 8006610:	3343      	adds	r3, #67	@ 0x43
 8006612:	701a      	strb	r2, [r3, #0]
 8006614:	6863      	ldr	r3, [r4, #4]
 8006616:	60a3      	str	r3, [r4, #8]
 8006618:	2b00      	cmp	r3, #0
 800661a:	db03      	blt.n	8006624 <_printf_i+0xe4>
 800661c:	2104      	movs	r1, #4
 800661e:	6822      	ldr	r2, [r4, #0]
 8006620:	438a      	bics	r2, r1
 8006622:	6022      	str	r2, [r4, #0]
 8006624:	2e00      	cmp	r6, #0
 8006626:	d102      	bne.n	800662e <_printf_i+0xee>
 8006628:	9d03      	ldr	r5, [sp, #12]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00c      	beq.n	8006648 <_printf_i+0x108>
 800662e:	9d03      	ldr	r5, [sp, #12]
 8006630:	0030      	movs	r0, r6
 8006632:	0039      	movs	r1, r7
 8006634:	f7f9 fdf6 	bl	8000224 <__aeabi_uidivmod>
 8006638:	9b04      	ldr	r3, [sp, #16]
 800663a:	3d01      	subs	r5, #1
 800663c:	5c5b      	ldrb	r3, [r3, r1]
 800663e:	702b      	strb	r3, [r5, #0]
 8006640:	0033      	movs	r3, r6
 8006642:	0006      	movs	r6, r0
 8006644:	429f      	cmp	r7, r3
 8006646:	d9f3      	bls.n	8006630 <_printf_i+0xf0>
 8006648:	2f08      	cmp	r7, #8
 800664a:	d109      	bne.n	8006660 <_printf_i+0x120>
 800664c:	6823      	ldr	r3, [r4, #0]
 800664e:	07db      	lsls	r3, r3, #31
 8006650:	d506      	bpl.n	8006660 <_printf_i+0x120>
 8006652:	6862      	ldr	r2, [r4, #4]
 8006654:	6923      	ldr	r3, [r4, #16]
 8006656:	429a      	cmp	r2, r3
 8006658:	dc02      	bgt.n	8006660 <_printf_i+0x120>
 800665a:	2330      	movs	r3, #48	@ 0x30
 800665c:	3d01      	subs	r5, #1
 800665e:	702b      	strb	r3, [r5, #0]
 8006660:	9b03      	ldr	r3, [sp, #12]
 8006662:	1b5b      	subs	r3, r3, r5
 8006664:	6123      	str	r3, [r4, #16]
 8006666:	9b07      	ldr	r3, [sp, #28]
 8006668:	0021      	movs	r1, r4
 800666a:	9300      	str	r3, [sp, #0]
 800666c:	9805      	ldr	r0, [sp, #20]
 800666e:	9b06      	ldr	r3, [sp, #24]
 8006670:	aa09      	add	r2, sp, #36	@ 0x24
 8006672:	f7ff fef5 	bl	8006460 <_printf_common>
 8006676:	3001      	adds	r0, #1
 8006678:	d148      	bne.n	800670c <_printf_i+0x1cc>
 800667a:	2001      	movs	r0, #1
 800667c:	4240      	negs	r0, r0
 800667e:	b00b      	add	sp, #44	@ 0x2c
 8006680:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006682:	2220      	movs	r2, #32
 8006684:	6809      	ldr	r1, [r1, #0]
 8006686:	430a      	orrs	r2, r1
 8006688:	6022      	str	r2, [r4, #0]
 800668a:	2278      	movs	r2, #120	@ 0x78
 800668c:	4932      	ldr	r1, [pc, #200]	@ (8006758 <_printf_i+0x218>)
 800668e:	9104      	str	r1, [sp, #16]
 8006690:	0021      	movs	r1, r4
 8006692:	3145      	adds	r1, #69	@ 0x45
 8006694:	700a      	strb	r2, [r1, #0]
 8006696:	6819      	ldr	r1, [r3, #0]
 8006698:	6822      	ldr	r2, [r4, #0]
 800669a:	c940      	ldmia	r1!, {r6}
 800669c:	0610      	lsls	r0, r2, #24
 800669e:	d402      	bmi.n	80066a6 <_printf_i+0x166>
 80066a0:	0650      	lsls	r0, r2, #25
 80066a2:	d500      	bpl.n	80066a6 <_printf_i+0x166>
 80066a4:	b2b6      	uxth	r6, r6
 80066a6:	6019      	str	r1, [r3, #0]
 80066a8:	07d3      	lsls	r3, r2, #31
 80066aa:	d502      	bpl.n	80066b2 <_printf_i+0x172>
 80066ac:	2320      	movs	r3, #32
 80066ae:	4313      	orrs	r3, r2
 80066b0:	6023      	str	r3, [r4, #0]
 80066b2:	2e00      	cmp	r6, #0
 80066b4:	d001      	beq.n	80066ba <_printf_i+0x17a>
 80066b6:	2710      	movs	r7, #16
 80066b8:	e7a8      	b.n	800660c <_printf_i+0xcc>
 80066ba:	2220      	movs	r2, #32
 80066bc:	6823      	ldr	r3, [r4, #0]
 80066be:	4393      	bics	r3, r2
 80066c0:	6023      	str	r3, [r4, #0]
 80066c2:	e7f8      	b.n	80066b6 <_printf_i+0x176>
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	680d      	ldr	r5, [r1, #0]
 80066c8:	1d10      	adds	r0, r2, #4
 80066ca:	6949      	ldr	r1, [r1, #20]
 80066cc:	6018      	str	r0, [r3, #0]
 80066ce:	6813      	ldr	r3, [r2, #0]
 80066d0:	062e      	lsls	r6, r5, #24
 80066d2:	d501      	bpl.n	80066d8 <_printf_i+0x198>
 80066d4:	6019      	str	r1, [r3, #0]
 80066d6:	e002      	b.n	80066de <_printf_i+0x19e>
 80066d8:	066d      	lsls	r5, r5, #25
 80066da:	d5fb      	bpl.n	80066d4 <_printf_i+0x194>
 80066dc:	8019      	strh	r1, [r3, #0]
 80066de:	2300      	movs	r3, #0
 80066e0:	9d03      	ldr	r5, [sp, #12]
 80066e2:	6123      	str	r3, [r4, #16]
 80066e4:	e7bf      	b.n	8006666 <_printf_i+0x126>
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	1d11      	adds	r1, r2, #4
 80066ea:	6019      	str	r1, [r3, #0]
 80066ec:	6815      	ldr	r5, [r2, #0]
 80066ee:	2100      	movs	r1, #0
 80066f0:	0028      	movs	r0, r5
 80066f2:	6862      	ldr	r2, [r4, #4]
 80066f4:	f000 f9ac 	bl	8006a50 <memchr>
 80066f8:	2800      	cmp	r0, #0
 80066fa:	d001      	beq.n	8006700 <_printf_i+0x1c0>
 80066fc:	1b40      	subs	r0, r0, r5
 80066fe:	6060      	str	r0, [r4, #4]
 8006700:	6863      	ldr	r3, [r4, #4]
 8006702:	6123      	str	r3, [r4, #16]
 8006704:	2300      	movs	r3, #0
 8006706:	9a03      	ldr	r2, [sp, #12]
 8006708:	7013      	strb	r3, [r2, #0]
 800670a:	e7ac      	b.n	8006666 <_printf_i+0x126>
 800670c:	002a      	movs	r2, r5
 800670e:	6923      	ldr	r3, [r4, #16]
 8006710:	9906      	ldr	r1, [sp, #24]
 8006712:	9805      	ldr	r0, [sp, #20]
 8006714:	9d07      	ldr	r5, [sp, #28]
 8006716:	47a8      	blx	r5
 8006718:	3001      	adds	r0, #1
 800671a:	d0ae      	beq.n	800667a <_printf_i+0x13a>
 800671c:	6823      	ldr	r3, [r4, #0]
 800671e:	079b      	lsls	r3, r3, #30
 8006720:	d415      	bmi.n	800674e <_printf_i+0x20e>
 8006722:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006724:	68e0      	ldr	r0, [r4, #12]
 8006726:	4298      	cmp	r0, r3
 8006728:	daa9      	bge.n	800667e <_printf_i+0x13e>
 800672a:	0018      	movs	r0, r3
 800672c:	e7a7      	b.n	800667e <_printf_i+0x13e>
 800672e:	0022      	movs	r2, r4
 8006730:	2301      	movs	r3, #1
 8006732:	9906      	ldr	r1, [sp, #24]
 8006734:	9805      	ldr	r0, [sp, #20]
 8006736:	9e07      	ldr	r6, [sp, #28]
 8006738:	3219      	adds	r2, #25
 800673a:	47b0      	blx	r6
 800673c:	3001      	adds	r0, #1
 800673e:	d09c      	beq.n	800667a <_printf_i+0x13a>
 8006740:	3501      	adds	r5, #1
 8006742:	68e3      	ldr	r3, [r4, #12]
 8006744:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006746:	1a9b      	subs	r3, r3, r2
 8006748:	42ab      	cmp	r3, r5
 800674a:	dcf0      	bgt.n	800672e <_printf_i+0x1ee>
 800674c:	e7e9      	b.n	8006722 <_printf_i+0x1e2>
 800674e:	2500      	movs	r5, #0
 8006750:	e7f7      	b.n	8006742 <_printf_i+0x202>
 8006752:	46c0      	nop			@ (mov r8, r8)
 8006754:	08006cc4 	.word	0x08006cc4
 8006758:	08006cd5 	.word	0x08006cd5

0800675c <__swbuf_r>:
 800675c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800675e:	0006      	movs	r6, r0
 8006760:	000d      	movs	r5, r1
 8006762:	0014      	movs	r4, r2
 8006764:	2800      	cmp	r0, #0
 8006766:	d004      	beq.n	8006772 <__swbuf_r+0x16>
 8006768:	6a03      	ldr	r3, [r0, #32]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d101      	bne.n	8006772 <__swbuf_r+0x16>
 800676e:	f7ff f9f9 	bl	8005b64 <__sinit>
 8006772:	69a3      	ldr	r3, [r4, #24]
 8006774:	60a3      	str	r3, [r4, #8]
 8006776:	89a3      	ldrh	r3, [r4, #12]
 8006778:	071b      	lsls	r3, r3, #28
 800677a:	d502      	bpl.n	8006782 <__swbuf_r+0x26>
 800677c:	6923      	ldr	r3, [r4, #16]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d109      	bne.n	8006796 <__swbuf_r+0x3a>
 8006782:	0021      	movs	r1, r4
 8006784:	0030      	movs	r0, r6
 8006786:	f000 f82b 	bl	80067e0 <__swsetup_r>
 800678a:	2800      	cmp	r0, #0
 800678c:	d003      	beq.n	8006796 <__swbuf_r+0x3a>
 800678e:	2501      	movs	r5, #1
 8006790:	426d      	negs	r5, r5
 8006792:	0028      	movs	r0, r5
 8006794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006796:	6923      	ldr	r3, [r4, #16]
 8006798:	6820      	ldr	r0, [r4, #0]
 800679a:	b2ef      	uxtb	r7, r5
 800679c:	1ac0      	subs	r0, r0, r3
 800679e:	6963      	ldr	r3, [r4, #20]
 80067a0:	b2ed      	uxtb	r5, r5
 80067a2:	4283      	cmp	r3, r0
 80067a4:	dc05      	bgt.n	80067b2 <__swbuf_r+0x56>
 80067a6:	0021      	movs	r1, r4
 80067a8:	0030      	movs	r0, r6
 80067aa:	f7ff fbcb 	bl	8005f44 <_fflush_r>
 80067ae:	2800      	cmp	r0, #0
 80067b0:	d1ed      	bne.n	800678e <__swbuf_r+0x32>
 80067b2:	68a3      	ldr	r3, [r4, #8]
 80067b4:	3001      	adds	r0, #1
 80067b6:	3b01      	subs	r3, #1
 80067b8:	60a3      	str	r3, [r4, #8]
 80067ba:	6823      	ldr	r3, [r4, #0]
 80067bc:	1c5a      	adds	r2, r3, #1
 80067be:	6022      	str	r2, [r4, #0]
 80067c0:	701f      	strb	r7, [r3, #0]
 80067c2:	6963      	ldr	r3, [r4, #20]
 80067c4:	4283      	cmp	r3, r0
 80067c6:	d004      	beq.n	80067d2 <__swbuf_r+0x76>
 80067c8:	89a3      	ldrh	r3, [r4, #12]
 80067ca:	07db      	lsls	r3, r3, #31
 80067cc:	d5e1      	bpl.n	8006792 <__swbuf_r+0x36>
 80067ce:	2d0a      	cmp	r5, #10
 80067d0:	d1df      	bne.n	8006792 <__swbuf_r+0x36>
 80067d2:	0021      	movs	r1, r4
 80067d4:	0030      	movs	r0, r6
 80067d6:	f7ff fbb5 	bl	8005f44 <_fflush_r>
 80067da:	2800      	cmp	r0, #0
 80067dc:	d0d9      	beq.n	8006792 <__swbuf_r+0x36>
 80067de:	e7d6      	b.n	800678e <__swbuf_r+0x32>

080067e0 <__swsetup_r>:
 80067e0:	4b2d      	ldr	r3, [pc, #180]	@ (8006898 <__swsetup_r+0xb8>)
 80067e2:	b570      	push	{r4, r5, r6, lr}
 80067e4:	0005      	movs	r5, r0
 80067e6:	6818      	ldr	r0, [r3, #0]
 80067e8:	000c      	movs	r4, r1
 80067ea:	2800      	cmp	r0, #0
 80067ec:	d004      	beq.n	80067f8 <__swsetup_r+0x18>
 80067ee:	6a03      	ldr	r3, [r0, #32]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d101      	bne.n	80067f8 <__swsetup_r+0x18>
 80067f4:	f7ff f9b6 	bl	8005b64 <__sinit>
 80067f8:	230c      	movs	r3, #12
 80067fa:	5ee2      	ldrsh	r2, [r4, r3]
 80067fc:	0713      	lsls	r3, r2, #28
 80067fe:	d423      	bmi.n	8006848 <__swsetup_r+0x68>
 8006800:	06d3      	lsls	r3, r2, #27
 8006802:	d407      	bmi.n	8006814 <__swsetup_r+0x34>
 8006804:	2309      	movs	r3, #9
 8006806:	602b      	str	r3, [r5, #0]
 8006808:	2340      	movs	r3, #64	@ 0x40
 800680a:	2001      	movs	r0, #1
 800680c:	4313      	orrs	r3, r2
 800680e:	81a3      	strh	r3, [r4, #12]
 8006810:	4240      	negs	r0, r0
 8006812:	e03a      	b.n	800688a <__swsetup_r+0xaa>
 8006814:	0752      	lsls	r2, r2, #29
 8006816:	d513      	bpl.n	8006840 <__swsetup_r+0x60>
 8006818:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800681a:	2900      	cmp	r1, #0
 800681c:	d008      	beq.n	8006830 <__swsetup_r+0x50>
 800681e:	0023      	movs	r3, r4
 8006820:	3344      	adds	r3, #68	@ 0x44
 8006822:	4299      	cmp	r1, r3
 8006824:	d002      	beq.n	800682c <__swsetup_r+0x4c>
 8006826:	0028      	movs	r0, r5
 8006828:	f7ff fc8c 	bl	8006144 <_free_r>
 800682c:	2300      	movs	r3, #0
 800682e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006830:	2224      	movs	r2, #36	@ 0x24
 8006832:	89a3      	ldrh	r3, [r4, #12]
 8006834:	4393      	bics	r3, r2
 8006836:	81a3      	strh	r3, [r4, #12]
 8006838:	2300      	movs	r3, #0
 800683a:	6063      	str	r3, [r4, #4]
 800683c:	6923      	ldr	r3, [r4, #16]
 800683e:	6023      	str	r3, [r4, #0]
 8006840:	2308      	movs	r3, #8
 8006842:	89a2      	ldrh	r2, [r4, #12]
 8006844:	4313      	orrs	r3, r2
 8006846:	81a3      	strh	r3, [r4, #12]
 8006848:	6923      	ldr	r3, [r4, #16]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d10b      	bne.n	8006866 <__swsetup_r+0x86>
 800684e:	21a0      	movs	r1, #160	@ 0xa0
 8006850:	2280      	movs	r2, #128	@ 0x80
 8006852:	89a3      	ldrh	r3, [r4, #12]
 8006854:	0089      	lsls	r1, r1, #2
 8006856:	0092      	lsls	r2, r2, #2
 8006858:	400b      	ands	r3, r1
 800685a:	4293      	cmp	r3, r2
 800685c:	d003      	beq.n	8006866 <__swsetup_r+0x86>
 800685e:	0021      	movs	r1, r4
 8006860:	0028      	movs	r0, r5
 8006862:	f000 f845 	bl	80068f0 <__smakebuf_r>
 8006866:	230c      	movs	r3, #12
 8006868:	5ee2      	ldrsh	r2, [r4, r3]
 800686a:	2101      	movs	r1, #1
 800686c:	0013      	movs	r3, r2
 800686e:	400b      	ands	r3, r1
 8006870:	420a      	tst	r2, r1
 8006872:	d00b      	beq.n	800688c <__swsetup_r+0xac>
 8006874:	2300      	movs	r3, #0
 8006876:	60a3      	str	r3, [r4, #8]
 8006878:	6963      	ldr	r3, [r4, #20]
 800687a:	425b      	negs	r3, r3
 800687c:	61a3      	str	r3, [r4, #24]
 800687e:	2000      	movs	r0, #0
 8006880:	6923      	ldr	r3, [r4, #16]
 8006882:	4283      	cmp	r3, r0
 8006884:	d101      	bne.n	800688a <__swsetup_r+0xaa>
 8006886:	0613      	lsls	r3, r2, #24
 8006888:	d4be      	bmi.n	8006808 <__swsetup_r+0x28>
 800688a:	bd70      	pop	{r4, r5, r6, pc}
 800688c:	0791      	lsls	r1, r2, #30
 800688e:	d400      	bmi.n	8006892 <__swsetup_r+0xb2>
 8006890:	6963      	ldr	r3, [r4, #20]
 8006892:	60a3      	str	r3, [r4, #8]
 8006894:	e7f3      	b.n	800687e <__swsetup_r+0x9e>
 8006896:	46c0      	nop			@ (mov r8, r8)
 8006898:	2000041c 	.word	0x2000041c

0800689c <__swhatbuf_r>:
 800689c:	b570      	push	{r4, r5, r6, lr}
 800689e:	000e      	movs	r6, r1
 80068a0:	001d      	movs	r5, r3
 80068a2:	230e      	movs	r3, #14
 80068a4:	5ec9      	ldrsh	r1, [r1, r3]
 80068a6:	0014      	movs	r4, r2
 80068a8:	b096      	sub	sp, #88	@ 0x58
 80068aa:	2900      	cmp	r1, #0
 80068ac:	da0c      	bge.n	80068c8 <__swhatbuf_r+0x2c>
 80068ae:	89b2      	ldrh	r2, [r6, #12]
 80068b0:	2380      	movs	r3, #128	@ 0x80
 80068b2:	0011      	movs	r1, r2
 80068b4:	4019      	ands	r1, r3
 80068b6:	421a      	tst	r2, r3
 80068b8:	d114      	bne.n	80068e4 <__swhatbuf_r+0x48>
 80068ba:	2380      	movs	r3, #128	@ 0x80
 80068bc:	00db      	lsls	r3, r3, #3
 80068be:	2000      	movs	r0, #0
 80068c0:	6029      	str	r1, [r5, #0]
 80068c2:	6023      	str	r3, [r4, #0]
 80068c4:	b016      	add	sp, #88	@ 0x58
 80068c6:	bd70      	pop	{r4, r5, r6, pc}
 80068c8:	466a      	mov	r2, sp
 80068ca:	f000 f853 	bl	8006974 <_fstat_r>
 80068ce:	2800      	cmp	r0, #0
 80068d0:	dbed      	blt.n	80068ae <__swhatbuf_r+0x12>
 80068d2:	23f0      	movs	r3, #240	@ 0xf0
 80068d4:	9901      	ldr	r1, [sp, #4]
 80068d6:	021b      	lsls	r3, r3, #8
 80068d8:	4019      	ands	r1, r3
 80068da:	4b04      	ldr	r3, [pc, #16]	@ (80068ec <__swhatbuf_r+0x50>)
 80068dc:	18c9      	adds	r1, r1, r3
 80068de:	424b      	negs	r3, r1
 80068e0:	4159      	adcs	r1, r3
 80068e2:	e7ea      	b.n	80068ba <__swhatbuf_r+0x1e>
 80068e4:	2100      	movs	r1, #0
 80068e6:	2340      	movs	r3, #64	@ 0x40
 80068e8:	e7e9      	b.n	80068be <__swhatbuf_r+0x22>
 80068ea:	46c0      	nop			@ (mov r8, r8)
 80068ec:	ffffe000 	.word	0xffffe000

080068f0 <__smakebuf_r>:
 80068f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068f2:	2602      	movs	r6, #2
 80068f4:	898b      	ldrh	r3, [r1, #12]
 80068f6:	0005      	movs	r5, r0
 80068f8:	000c      	movs	r4, r1
 80068fa:	b085      	sub	sp, #20
 80068fc:	4233      	tst	r3, r6
 80068fe:	d007      	beq.n	8006910 <__smakebuf_r+0x20>
 8006900:	0023      	movs	r3, r4
 8006902:	3347      	adds	r3, #71	@ 0x47
 8006904:	6023      	str	r3, [r4, #0]
 8006906:	6123      	str	r3, [r4, #16]
 8006908:	2301      	movs	r3, #1
 800690a:	6163      	str	r3, [r4, #20]
 800690c:	b005      	add	sp, #20
 800690e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006910:	ab03      	add	r3, sp, #12
 8006912:	aa02      	add	r2, sp, #8
 8006914:	f7ff ffc2 	bl	800689c <__swhatbuf_r>
 8006918:	9f02      	ldr	r7, [sp, #8]
 800691a:	9001      	str	r0, [sp, #4]
 800691c:	0039      	movs	r1, r7
 800691e:	0028      	movs	r0, r5
 8006920:	f7ff fa0a 	bl	8005d38 <_malloc_r>
 8006924:	2800      	cmp	r0, #0
 8006926:	d108      	bne.n	800693a <__smakebuf_r+0x4a>
 8006928:	220c      	movs	r2, #12
 800692a:	5ea3      	ldrsh	r3, [r4, r2]
 800692c:	059a      	lsls	r2, r3, #22
 800692e:	d4ed      	bmi.n	800690c <__smakebuf_r+0x1c>
 8006930:	2203      	movs	r2, #3
 8006932:	4393      	bics	r3, r2
 8006934:	431e      	orrs	r6, r3
 8006936:	81a6      	strh	r6, [r4, #12]
 8006938:	e7e2      	b.n	8006900 <__smakebuf_r+0x10>
 800693a:	2380      	movs	r3, #128	@ 0x80
 800693c:	89a2      	ldrh	r2, [r4, #12]
 800693e:	6020      	str	r0, [r4, #0]
 8006940:	4313      	orrs	r3, r2
 8006942:	81a3      	strh	r3, [r4, #12]
 8006944:	9b03      	ldr	r3, [sp, #12]
 8006946:	6120      	str	r0, [r4, #16]
 8006948:	6167      	str	r7, [r4, #20]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00c      	beq.n	8006968 <__smakebuf_r+0x78>
 800694e:	0028      	movs	r0, r5
 8006950:	230e      	movs	r3, #14
 8006952:	5ee1      	ldrsh	r1, [r4, r3]
 8006954:	f000 f820 	bl	8006998 <_isatty_r>
 8006958:	2800      	cmp	r0, #0
 800695a:	d005      	beq.n	8006968 <__smakebuf_r+0x78>
 800695c:	2303      	movs	r3, #3
 800695e:	89a2      	ldrh	r2, [r4, #12]
 8006960:	439a      	bics	r2, r3
 8006962:	3b02      	subs	r3, #2
 8006964:	4313      	orrs	r3, r2
 8006966:	81a3      	strh	r3, [r4, #12]
 8006968:	89a3      	ldrh	r3, [r4, #12]
 800696a:	9a01      	ldr	r2, [sp, #4]
 800696c:	4313      	orrs	r3, r2
 800696e:	81a3      	strh	r3, [r4, #12]
 8006970:	e7cc      	b.n	800690c <__smakebuf_r+0x1c>
	...

08006974 <_fstat_r>:
 8006974:	2300      	movs	r3, #0
 8006976:	b570      	push	{r4, r5, r6, lr}
 8006978:	4d06      	ldr	r5, [pc, #24]	@ (8006994 <_fstat_r+0x20>)
 800697a:	0004      	movs	r4, r0
 800697c:	0008      	movs	r0, r1
 800697e:	0011      	movs	r1, r2
 8006980:	602b      	str	r3, [r5, #0]
 8006982:	f7fb f953 	bl	8001c2c <_fstat>
 8006986:	1c43      	adds	r3, r0, #1
 8006988:	d103      	bne.n	8006992 <_fstat_r+0x1e>
 800698a:	682b      	ldr	r3, [r5, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d000      	beq.n	8006992 <_fstat_r+0x1e>
 8006990:	6023      	str	r3, [r4, #0]
 8006992:	bd70      	pop	{r4, r5, r6, pc}
 8006994:	200013a0 	.word	0x200013a0

08006998 <_isatty_r>:
 8006998:	2300      	movs	r3, #0
 800699a:	b570      	push	{r4, r5, r6, lr}
 800699c:	4d06      	ldr	r5, [pc, #24]	@ (80069b8 <_isatty_r+0x20>)
 800699e:	0004      	movs	r4, r0
 80069a0:	0008      	movs	r0, r1
 80069a2:	602b      	str	r3, [r5, #0]
 80069a4:	f7fb f950 	bl	8001c48 <_isatty>
 80069a8:	1c43      	adds	r3, r0, #1
 80069aa:	d103      	bne.n	80069b4 <_isatty_r+0x1c>
 80069ac:	682b      	ldr	r3, [r5, #0]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d000      	beq.n	80069b4 <_isatty_r+0x1c>
 80069b2:	6023      	str	r3, [r4, #0]
 80069b4:	bd70      	pop	{r4, r5, r6, pc}
 80069b6:	46c0      	nop			@ (mov r8, r8)
 80069b8:	200013a0 	.word	0x200013a0

080069bc <_raise_r>:
 80069bc:	b570      	push	{r4, r5, r6, lr}
 80069be:	0004      	movs	r4, r0
 80069c0:	000d      	movs	r5, r1
 80069c2:	291f      	cmp	r1, #31
 80069c4:	d904      	bls.n	80069d0 <_raise_r+0x14>
 80069c6:	2316      	movs	r3, #22
 80069c8:	6003      	str	r3, [r0, #0]
 80069ca:	2001      	movs	r0, #1
 80069cc:	4240      	negs	r0, r0
 80069ce:	bd70      	pop	{r4, r5, r6, pc}
 80069d0:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d004      	beq.n	80069e0 <_raise_r+0x24>
 80069d6:	008a      	lsls	r2, r1, #2
 80069d8:	189b      	adds	r3, r3, r2
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	2a00      	cmp	r2, #0
 80069de:	d108      	bne.n	80069f2 <_raise_r+0x36>
 80069e0:	0020      	movs	r0, r4
 80069e2:	f000 f831 	bl	8006a48 <_getpid_r>
 80069e6:	002a      	movs	r2, r5
 80069e8:	0001      	movs	r1, r0
 80069ea:	0020      	movs	r0, r4
 80069ec:	f000 f81a 	bl	8006a24 <_kill_r>
 80069f0:	e7ed      	b.n	80069ce <_raise_r+0x12>
 80069f2:	2a01      	cmp	r2, #1
 80069f4:	d009      	beq.n	8006a0a <_raise_r+0x4e>
 80069f6:	1c51      	adds	r1, r2, #1
 80069f8:	d103      	bne.n	8006a02 <_raise_r+0x46>
 80069fa:	2316      	movs	r3, #22
 80069fc:	6003      	str	r3, [r0, #0]
 80069fe:	2001      	movs	r0, #1
 8006a00:	e7e5      	b.n	80069ce <_raise_r+0x12>
 8006a02:	2100      	movs	r1, #0
 8006a04:	0028      	movs	r0, r5
 8006a06:	6019      	str	r1, [r3, #0]
 8006a08:	4790      	blx	r2
 8006a0a:	2000      	movs	r0, #0
 8006a0c:	e7df      	b.n	80069ce <_raise_r+0x12>
	...

08006a10 <raise>:
 8006a10:	b510      	push	{r4, lr}
 8006a12:	4b03      	ldr	r3, [pc, #12]	@ (8006a20 <raise+0x10>)
 8006a14:	0001      	movs	r1, r0
 8006a16:	6818      	ldr	r0, [r3, #0]
 8006a18:	f7ff ffd0 	bl	80069bc <_raise_r>
 8006a1c:	bd10      	pop	{r4, pc}
 8006a1e:	46c0      	nop			@ (mov r8, r8)
 8006a20:	2000041c 	.word	0x2000041c

08006a24 <_kill_r>:
 8006a24:	2300      	movs	r3, #0
 8006a26:	b570      	push	{r4, r5, r6, lr}
 8006a28:	4d06      	ldr	r5, [pc, #24]	@ (8006a44 <_kill_r+0x20>)
 8006a2a:	0004      	movs	r4, r0
 8006a2c:	0008      	movs	r0, r1
 8006a2e:	0011      	movs	r1, r2
 8006a30:	602b      	str	r3, [r5, #0]
 8006a32:	f7fb f89b 	bl	8001b6c <_kill>
 8006a36:	1c43      	adds	r3, r0, #1
 8006a38:	d103      	bne.n	8006a42 <_kill_r+0x1e>
 8006a3a:	682b      	ldr	r3, [r5, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d000      	beq.n	8006a42 <_kill_r+0x1e>
 8006a40:	6023      	str	r3, [r4, #0]
 8006a42:	bd70      	pop	{r4, r5, r6, pc}
 8006a44:	200013a0 	.word	0x200013a0

08006a48 <_getpid_r>:
 8006a48:	b510      	push	{r4, lr}
 8006a4a:	f7fb f889 	bl	8001b60 <_getpid>
 8006a4e:	bd10      	pop	{r4, pc}

08006a50 <memchr>:
 8006a50:	b2c9      	uxtb	r1, r1
 8006a52:	1882      	adds	r2, r0, r2
 8006a54:	4290      	cmp	r0, r2
 8006a56:	d101      	bne.n	8006a5c <memchr+0xc>
 8006a58:	2000      	movs	r0, #0
 8006a5a:	4770      	bx	lr
 8006a5c:	7803      	ldrb	r3, [r0, #0]
 8006a5e:	428b      	cmp	r3, r1
 8006a60:	d0fb      	beq.n	8006a5a <memchr+0xa>
 8006a62:	3001      	adds	r0, #1
 8006a64:	e7f6      	b.n	8006a54 <memchr+0x4>
	...

08006a68 <round>:
 8006a68:	b570      	push	{r4, r5, r6, lr}
 8006a6a:	4b1f      	ldr	r3, [pc, #124]	@ (8006ae8 <round+0x80>)
 8006a6c:	004d      	lsls	r5, r1, #1
 8006a6e:	0d6d      	lsrs	r5, r5, #21
 8006a70:	18eb      	adds	r3, r5, r3
 8006a72:	000a      	movs	r2, r1
 8006a74:	0004      	movs	r4, r0
 8006a76:	2b13      	cmp	r3, #19
 8006a78:	dc18      	bgt.n	8006aac <round+0x44>
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	da0a      	bge.n	8006a94 <round+0x2c>
 8006a7e:	0fc9      	lsrs	r1, r1, #31
 8006a80:	07c9      	lsls	r1, r1, #31
 8006a82:	000a      	movs	r2, r1
 8006a84:	3301      	adds	r3, #1
 8006a86:	d101      	bne.n	8006a8c <round+0x24>
 8006a88:	4a18      	ldr	r2, [pc, #96]	@ (8006aec <round+0x84>)
 8006a8a:	430a      	orrs	r2, r1
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	0011      	movs	r1, r2
 8006a90:	0018      	movs	r0, r3
 8006a92:	e015      	b.n	8006ac0 <round+0x58>
 8006a94:	4d16      	ldr	r5, [pc, #88]	@ (8006af0 <round+0x88>)
 8006a96:	000e      	movs	r6, r1
 8006a98:	411d      	asrs	r5, r3
 8006a9a:	402e      	ands	r6, r5
 8006a9c:	4334      	orrs	r4, r6
 8006a9e:	d00f      	beq.n	8006ac0 <round+0x58>
 8006aa0:	2180      	movs	r1, #128	@ 0x80
 8006aa2:	0309      	lsls	r1, r1, #12
 8006aa4:	4119      	asrs	r1, r3
 8006aa6:	188a      	adds	r2, r1, r2
 8006aa8:	43aa      	bics	r2, r5
 8006aaa:	e7ef      	b.n	8006a8c <round+0x24>
 8006aac:	2b33      	cmp	r3, #51	@ 0x33
 8006aae:	dd08      	ble.n	8006ac2 <round+0x5a>
 8006ab0:	2280      	movs	r2, #128	@ 0x80
 8006ab2:	00d2      	lsls	r2, r2, #3
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d103      	bne.n	8006ac0 <round+0x58>
 8006ab8:	0002      	movs	r2, r0
 8006aba:	000b      	movs	r3, r1
 8006abc:	f7f9 fbe6 	bl	800028c <__aeabi_dadd>
 8006ac0:	bd70      	pop	{r4, r5, r6, pc}
 8006ac2:	4e0c      	ldr	r6, [pc, #48]	@ (8006af4 <round+0x8c>)
 8006ac4:	19ae      	adds	r6, r5, r6
 8006ac6:	2501      	movs	r5, #1
 8006ac8:	426d      	negs	r5, r5
 8006aca:	40f5      	lsrs	r5, r6
 8006acc:	4228      	tst	r0, r5
 8006ace:	d0f7      	beq.n	8006ac0 <round+0x58>
 8006ad0:	2133      	movs	r1, #51	@ 0x33
 8006ad2:	1ac9      	subs	r1, r1, r3
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	408b      	lsls	r3, r1
 8006ad8:	181b      	adds	r3, r3, r0
 8006ada:	4283      	cmp	r3, r0
 8006adc:	41a4      	sbcs	r4, r4
 8006ade:	4264      	negs	r4, r4
 8006ae0:	1912      	adds	r2, r2, r4
 8006ae2:	43ab      	bics	r3, r5
 8006ae4:	e7d3      	b.n	8006a8e <round+0x26>
 8006ae6:	46c0      	nop			@ (mov r8, r8)
 8006ae8:	fffffc01 	.word	0xfffffc01
 8006aec:	3ff00000 	.word	0x3ff00000
 8006af0:	000fffff 	.word	0x000fffff
 8006af4:	fffffbed 	.word	0xfffffbed

08006af8 <_gettimeofday>:
 8006af8:	2258      	movs	r2, #88	@ 0x58
 8006afa:	2001      	movs	r0, #1
 8006afc:	4b01      	ldr	r3, [pc, #4]	@ (8006b04 <_gettimeofday+0xc>)
 8006afe:	4240      	negs	r0, r0
 8006b00:	601a      	str	r2, [r3, #0]
 8006b02:	4770      	bx	lr
 8006b04:	200013a0 	.word	0x200013a0

08006b08 <_init>:
 8006b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b0a:	46c0      	nop			@ (mov r8, r8)
 8006b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b0e:	bc08      	pop	{r3}
 8006b10:	469e      	mov	lr, r3
 8006b12:	4770      	bx	lr

08006b14 <_fini>:
 8006b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b16:	46c0      	nop			@ (mov r8, r8)
 8006b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b1a:	bc08      	pop	{r3}
 8006b1c:	469e      	mov	lr, r3
 8006b1e:	4770      	bx	lr
